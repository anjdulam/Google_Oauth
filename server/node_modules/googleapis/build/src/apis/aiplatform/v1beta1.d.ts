/// <reference types="node" />
import { OAuth2Client, JWT, Compute, UserRefreshClient, BaseExternalAccountClient, GaxiosPromise, GoogleConfigurable, MethodOptions, StreamMethodOptions, GlobalOptions, GoogleAuth, BodyResponseCallback, APIRequestContext } from 'googleapis-common';
import { Readable } from 'stream';
export declare namespace aiplatform_v1beta1 {
    export interface Options extends GlobalOptions {
        version: 'v1beta1';
    }
    interface StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient | BaseExternalAccountClient | GoogleAuth;
        /**
         * V1 error format.
         */
        '$.xgafv'?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Data format for response.
         */
        alt?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint?: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
    }
    /**
     * Vertex AI API
     *
     * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
     *
     * @example
     * ```js
     * const {google} = require('googleapis');
     * const aiplatform = google.aiplatform('v1beta1');
     * ```
     */
    export class Aiplatform {
        context: APIRequestContext;
        projects: Resource$Projects;
        publishers: Resource$Publishers;
        constructor(options: GlobalOptions, google?: GoogleConfigurable);
    }
    /**
     * Video embedding response.
     */
    export interface Schema$CloudAiLargeModelsVisionEmbedVideoResponse {
        /**
         * The embedding vector for the video.
         */
        videoEmbeddings?: any[] | null;
    }
    /**
     * Details for filtered input text.
     */
    export interface Schema$CloudAiLargeModelsVisionFilteredText {
        /**
         * Confidence level
         */
        category?: string | null;
        /**
         * Filtered category
         */
        confidence?: string | null;
        /**
         * Input prompt
         */
        prompt?: string | null;
        /**
         * Score for category
         */
        score?: number | null;
    }
    /**
     * Generate video response.
     */
    export interface Schema$CloudAiLargeModelsVisionGenerateVideoResponse {
        /**
         * The generates samples.
         */
        generatedSamples?: Schema$CloudAiLargeModelsVisionMedia[];
        /**
         * Returns if any videos were filtered due to RAI policies.
         */
        raiMediaFilteredCount?: number | null;
        /**
         * Returns rai failure reasons if any.
         */
        raiMediaFilteredReasons?: string[] | null;
        /**
         * Returns filtered text rai info.
         */
        raiTextFilteredReason?: Schema$CloudAiLargeModelsVisionFilteredText;
    }
    /**
     * Image.
     */
    export interface Schema$CloudAiLargeModelsVisionImage {
        /**
         * Image encoding, encoded as "image/png" or "image/jpg".
         */
        encoding?: string | null;
        /**
         * Raw bytes.
         */
        image?: string | null;
        /**
         * RAI scores for generated image.
         */
        imageRaiScores?: Schema$CloudAiLargeModelsVisionImageRAIScores;
        /**
         * RAI info for image.
         */
        raiInfo?: Schema$CloudAiLargeModelsVisionRaiInfo;
        /**
         * Semantic filter info for image.
         */
        semanticFilterResponse?: Schema$CloudAiLargeModelsVisionSemanticFilterResponse;
        /**
         * Text/Expanded text input for imagen.
         */
        text?: string | null;
        /**
         * Path to another storage (typically Google Cloud Storage).
         */
        uri?: string | null;
    }
    /**
     * RAI scores for generated image returned.
     */
    export interface Schema$CloudAiLargeModelsVisionImageRAIScores {
        /**
         * Agile watermark score for image.
         */
        agileWatermarkDetectionScore?: number | null;
    }
    /**
     * Media.
     */
    export interface Schema$CloudAiLargeModelsVisionMedia {
        /**
         * Image.
         */
        image?: Schema$CloudAiLargeModelsVisionImage;
        /**
         * Video
         */
        video?: Schema$CloudAiLargeModelsVisionVideo;
    }
    /**
     * Generate media content response
     */
    export interface Schema$CloudAiLargeModelsVisionMediaGenerateContentResponse {
        /**
         * Response to the user's request.
         */
        response?: Schema$CloudAiNlLlmProtoServiceGenerateMultiModalResponse;
    }
    export interface Schema$CloudAiLargeModelsVisionNamedBoundingBox {
        classes?: string[] | null;
        entities?: string[] | null;
        scores?: number[] | null;
        x1?: number | null;
        x2?: number | null;
        y1?: number | null;
        y2?: number | null;
    }
    export interface Schema$CloudAiLargeModelsVisionRaiInfo {
        /**
         * List of rai categories' information to return
         */
        raiCategories?: string[] | null;
        /**
         * List of rai scores mapping to the rai categories. Rounded to 1 decimal place.
         */
        scores?: number[] | null;
    }
    /**
     * Video reasoning response.
     */
    export interface Schema$CloudAiLargeModelsVisionReasonVideoResponse {
        /**
         * Generated text responses. The generated responses for different segments within the same video.
         */
        responses?: Schema$CloudAiLargeModelsVisionReasonVideoResponseTextResponse[];
    }
    /**
     * Contains text that is the response of the video captioning.
     */
    export interface Schema$CloudAiLargeModelsVisionReasonVideoResponseTextResponse {
        /**
         * Partition of the caption's video in time. This field is intended for video captioning. To represent the start time and end time of the caption's video.
         */
        relativeTemporalPartition?: Schema$CloudAiLargeModelsVisionRelativeTemporalPartition;
        /**
         * Text information
         */
        text?: string | null;
    }
    /**
     * For ease of use, assume that the start_offset is inclusive and the end_offset is exclusive. In mathematical terms, the partition would be written as [start_offset, end_offset).
     */
    export interface Schema$CloudAiLargeModelsVisionRelativeTemporalPartition {
        /**
         * End time offset of the partition.
         */
        endOffset?: string | null;
        /**
         * Start time offset of the partition.
         */
        startOffset?: string | null;
    }
    export interface Schema$CloudAiLargeModelsVisionSemanticFilterResponse {
        /**
         * Class labels of the bounding boxes that failed the semantic filtering. Bounding box coordinates.
         */
        namedBoundingBoxes?: Schema$CloudAiLargeModelsVisionNamedBoundingBox[];
        /**
         * This response is added when semantic filter config is turned on in EditConfig. It reports if this image is passed semantic filter response. If passed_semantic_filter is false, the bounding box information will be populated for user to check what caused the semantic filter to fail.
         */
        passedSemanticFilter?: boolean | null;
    }
    /**
     * Video
     */
    export interface Schema$CloudAiLargeModelsVisionVideo {
        /**
         * Path to another storage (typically Google Cloud Storage).
         */
        uri?: string | null;
        /**
         * Raw bytes.
         */
        video?: string | null;
    }
    export interface Schema$CloudAiNlLlmProtoServiceCandidate {
        /**
         * Source attribution of the generated content.
         */
        citationMetadata?: Schema$CloudAiNlLlmProtoServiceCitationMetadata;
        /**
         * Content of the candidate.
         */
        content?: Schema$CloudAiNlLlmProtoServiceContent;
        /**
         * A string that describes the filtering behavior in more detail. Only filled when reason is set.
         */
        finishMessage?: string | null;
        /**
         * The reason why the model stopped generating tokens.
         */
        finishReason?: string | null;
        /**
         * Grounding metadata. Combine with the facts list from response to generate grounding citations for this choice.
         */
        groundingMetadata?: Schema$LearningGenaiRootGroundingMetadata;
        /**
         * Index of the candidate.
         */
        index?: number | null;
        /**
         * Safety ratings of the generated content.
         */
        safetyRatings?: Schema$CloudAiNlLlmProtoServiceSafetyRating[];
    }
    /**
     * Source attributions for content.
     */
    export interface Schema$CloudAiNlLlmProtoServiceCitation {
        /**
         * End index into the content.
         */
        endIndex?: number | null;
        /**
         * License of the attribution.
         */
        license?: string | null;
        /**
         * Publication date of the attribution.
         */
        publicationDate?: Schema$GoogleTypeDate;
        /**
         * Start index into the content.
         */
        startIndex?: number | null;
        /**
         * Title of the attribution.
         */
        title?: string | null;
        /**
         * Url reference of the attribution.
         */
        uri?: string | null;
    }
    /**
     * A collection of source attributions for a piece of content.
     */
    export interface Schema$CloudAiNlLlmProtoServiceCitationMetadata {
        /**
         * List of citations.
         */
        citations?: Schema$CloudAiNlLlmProtoServiceCitation[];
    }
    /**
     * The content of a single message from a participant.
     */
    export interface Schema$CloudAiNlLlmProtoServiceContent {
        /**
         * The parts of the message.
         */
        parts?: Schema$CloudAiNlLlmProtoServicePart[];
        /**
         * The role of the current conversation participant.
         */
        role?: string | null;
    }
    /**
     * A condense version of WorldFact (assistant/boq/lamda/factuality/proto/factuality.proto) to propagate the essential information about the fact used in factuality to the upstream caller.
     */
    export interface Schema$CloudAiNlLlmProtoServiceFact {
        /**
         * Query that is used to retrieve this fact.
         */
        query?: string | null;
        /**
         * If present, the summary/snippet of the fact.
         */
        summary?: string | null;
        /**
         * If present, it refers to the title of this fact.
         */
        title?: string | null;
        /**
         * If present, this URL links to the webpage of the fact.
         */
        url?: string | null;
    }
    /**
     * Function call details.
     */
    export interface Schema$CloudAiNlLlmProtoServiceFunctionCall {
        /**
         * The function parameters and values in JSON format.
         */
        args?: {
            [key: string]: any;
        } | null;
        /**
         * Required. The name of the function to call.
         */
        name?: string | null;
    }
    /**
     * Function response details.
     */
    export interface Schema$CloudAiNlLlmProtoServiceFunctionResponse {
        /**
         * Required. The name of the function to call.
         */
        name?: string | null;
        /**
         * Required. The function response in JSON object format.
         */
        response?: {
            [key: string]: any;
        } | null;
    }
    export interface Schema$CloudAiNlLlmProtoServiceGenerateMultiModalResponse {
        /**
         * Possible candidate responses to the conversation up until this point.
         */
        candidates?: Schema$CloudAiNlLlmProtoServiceCandidate[];
        /**
         * Debug information containing message metadata. Clients should not consume this field, and this is only populated for Flow Runner path.
         */
        debugMetadata?: Schema$CloudAiNlLlmProtoServiceMessageMetadata;
        /**
         * External facts retrieved for factuality/grounding.
         */
        facts?: Schema$CloudAiNlLlmProtoServiceFact[];
        /**
         * Content filter results for a prompt sent in the request. Note: Sent only in the first stream chunk. Only happens when no candidates were generated due to content violations.
         */
        promptFeedback?: Schema$CloudAiNlLlmProtoServicePromptFeedback;
        /**
         * Billable prediction metrics.
         */
        reportingMetrics?: Schema$IntelligenceCloudAutomlXpsReportingMetrics;
        /**
         * Usage metadata about the response(s).
         */
        usageMetadata?: Schema$CloudAiNlLlmProtoServiceUsageMetadata;
    }
    export interface Schema$CloudAiNlLlmProtoServiceMessageMetadata {
        /**
         * Filter metadata of the input messages.
         */
        inputFilterInfo?: Schema$LearningServingLlmMessageMetadata;
        /**
         * This score is generated by the router model to decide which model to use
         */
        modelRoutingDecision?: Schema$LearningGenaiRootRoutingDecision;
        /**
         * Filter metadata of the output messages.
         */
        outputFilterInfo?: Schema$LearningServingLlmMessageMetadata[];
    }
    /**
     * A single part of a message.
     */
    export interface Schema$CloudAiNlLlmProtoServicePart {
        /**
         * URI-based data.
         */
        fileData?: Schema$CloudAiNlLlmProtoServicePartFileData;
        /**
         * Function call data.
         */
        functionCall?: Schema$CloudAiNlLlmProtoServiceFunctionCall;
        /**
         * Function response data.
         */
        functionResponse?: Schema$CloudAiNlLlmProtoServiceFunctionResponse;
        /**
         * Inline bytes data
         */
        inlineData?: Schema$CloudAiNlLlmProtoServicePartBlob;
        /**
         * Text input.
         */
        text?: string | null;
        /**
         * Video metadata. The metadata should only be specified while the video data is presented in inline_data or file_data.
         */
        videoMetadata?: Schema$CloudAiNlLlmProtoServicePartVideoMetadata;
    }
    /**
     * Represents arbitrary blob data input.
     */
    export interface Schema$CloudAiNlLlmProtoServicePartBlob {
        /**
         * Inline data.
         */
        data?: string | null;
        /**
         * The mime type corresponding to this input.
         */
        mimeType?: string | null;
        /**
         * Original file data where the blob comes from.
         */
        originalFileData?: Schema$CloudAiNlLlmProtoServicePartFileData;
    }
    /**
     * Represents file data.
     */
    export interface Schema$CloudAiNlLlmProtoServicePartFileData {
        /**
         * Inline data.
         */
        fileUri?: string | null;
        /**
         * The mime type corresponding to this input.
         */
        mimeType?: string | null;
    }
    /**
     * Metadata describes the input video content.
     */
    export interface Schema$CloudAiNlLlmProtoServicePartVideoMetadata {
        /**
         * The end offset of the video.
         */
        endOffset?: string | null;
        /**
         * The start offset of the video.
         */
        startOffset?: string | null;
    }
    /**
     * Content filter results for a prompt sent in the request.
     */
    export interface Schema$CloudAiNlLlmProtoServicePromptFeedback {
        /**
         * Blocked reason.
         */
        blockReason?: string | null;
        /**
         * A readable block reason message.
         */
        blockReasonMessage?: string | null;
        /**
         * Safety ratings.
         */
        safetyRatings?: Schema$CloudAiNlLlmProtoServiceSafetyRating[];
    }
    /**
     * The RAI results for a given text.
     */
    export interface Schema$CloudAiNlLlmProtoServiceRaiResult {
        /**
         * Recitation result from Aida recitation checker.
         */
        aidaRecitationResult?: Schema$LanguageLabsAidaTrustRecitationProtoRecitationResult;
        /**
         * Use `triggered_blocklist`.
         */
        blocked?: boolean | null;
        /**
         * The error codes indicate which RAI filters block the response.
         */
        errorCodes?: number[] | null;
        /**
         * Whether the text should be filtered and not shown to the end user. This is determined based on a combination of `triggered_recitation`, `triggered_blocklist`, `language_filter_result`, and `triggered_safety_filter`.
         */
        filtered?: boolean | null;
        /**
         * Language filter result from SAFT LangId.
         */
        languageFilterResult?: Schema$LearningGenaiRootLanguageFilterResult;
        /**
         * The RAI signals for the text.
         */
        raiSignals?: Schema$CloudAiNlLlmProtoServiceRaiSignal[];
        /**
         * Whether the text triggered the blocklist.
         */
        triggeredBlocklist?: boolean | null;
        /**
         * Whether the text should be blocked by the recitation result from Aida recitation checker. It is determined from aida_recitation_result.
         */
        triggeredRecitation?: boolean | null;
        /**
         * Whether the text triggered the safety filter. Currently, this is due to CSAI triggering or one of four categories (derogatory, sexual, toxic, violent) having a score over the filter threshold.
         */
        triggeredSafetyFilter?: boolean | null;
    }
    /**
     * An RAI signal for a single category.
     */
    export interface Schema$CloudAiNlLlmProtoServiceRaiSignal {
        /**
         * The confidence level for the RAI category.
         */
        confidence?: string | null;
        /**
         * Whether the category is flagged as being present. Currently, this is set to true if score \>= 0.5.
         */
        flagged?: boolean | null;
        /**
         * The RAI category.
         */
        raiCategory?: string | null;
        /**
         * The score for the category, in the range [0.0, 1.0].
         */
        score?: number | null;
    }
    /**
     * Safety rating corresponding to the generated content.
     */
    export interface Schema$CloudAiNlLlmProtoServiceSafetyRating {
        /**
         * Indicates whether the content was filtered out because of this rating.
         */
        blocked?: boolean | null;
        /**
         * Harm category.
         */
        category?: string | null;
        /**
         * The influential terms that could potentially block the response.
         */
        influentialTerms?: Schema$CloudAiNlLlmProtoServiceSafetyRatingInfluentialTerm[];
        /**
         * Harm probability levels in the content.
         */
        probability?: string | null;
        /**
         * Harm probability score.
         */
        probabilityScore?: number | null;
        /**
         * Harm severity levels in the content.
         */
        severity?: string | null;
        /**
         * Harm severity score.
         */
        severityScore?: number | null;
    }
    /**
     * The influential term that could potentially block the response.
     */
    export interface Schema$CloudAiNlLlmProtoServiceSafetyRatingInfluentialTerm {
        /**
         * The beginning offset of the influential term.
         */
        beginOffset?: number | null;
        /**
         * The confidence score of the influential term.
         */
        confidence?: number | null;
        /**
         * The source of the influential term, prompt or response.
         */
        source?: string | null;
        /**
         * The influential term.
         */
        term?: string | null;
    }
    /**
     * Usage metadata about response(s).
     */
    export interface Schema$CloudAiNlLlmProtoServiceUsageMetadata {
        /**
         * Number of tokens in the response(s).
         */
        candidatesTokenCount?: number | null;
        /**
         * Number of tokens in the request.
         */
        promptTokenCount?: number | null;
        totalTokenCount?: number | null;
    }
    /**
     * Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; \} service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); \} Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); \} Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.
     */
    export interface Schema$GoogleApiHttpBody {
        /**
         * The HTTP Content-Type header value specifying the content type of the body.
         */
        contentType?: string | null;
        /**
         * The HTTP request/response body as raw binary.
         */
        data?: string | null;
        /**
         * Application specific response metadata. Must be set in the first response for streaming APIs.
         */
        extensions?: Array<{
            [key: string]: any;
        }> | null;
    }
    /**
     * Parameters that configure the active learning pipeline. Active learning will label the data incrementally by several iterations. For every iteration, it will select a batch of data based on the sampling strategy.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ActiveLearningConfig {
        /**
         * Max number of human labeled DataItems.
         */
        maxDataItemCount?: string | null;
        /**
         * Max percent of total DataItems for human labeling.
         */
        maxDataItemPercentage?: number | null;
        /**
         * Active learning data sampling config. For every active learning labeling iteration, it will select a batch of data based on the sampling strategy.
         */
        sampleConfig?: Schema$GoogleCloudAiplatformV1beta1SampleConfig;
        /**
         * CMLE training config. For every active learning labeling iteration, system will train a machine learning model on CMLE. The trained model will be used by data sampling algorithm to select DataItems.
         */
        trainingConfig?: Schema$GoogleCloudAiplatformV1beta1TrainingConfig;
    }
    /**
     * Request message for MetadataService.AddContextArtifactsAndExecutions.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1AddContextArtifactsAndExecutionsRequest {
        /**
         * The resource names of the Artifacts to attribute to the Context. Format: `projects/{project\}/locations/{location\}/metadataStores/{metadatastore\}/artifacts/{artifact\}`
         */
        artifacts?: string[] | null;
        /**
         * The resource names of the Executions to associate with the Context. Format: `projects/{project\}/locations/{location\}/metadataStores/{metadatastore\}/executions/{execution\}`
         */
        executions?: string[] | null;
    }
    /**
     * Response message for MetadataService.AddContextArtifactsAndExecutions.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1AddContextArtifactsAndExecutionsResponse {
    }
    /**
     * Request message for MetadataService.AddContextChildren.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1AddContextChildrenRequest {
        /**
         * The resource names of the child Contexts.
         */
        childContexts?: string[] | null;
    }
    /**
     * Response message for MetadataService.AddContextChildren.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1AddContextChildrenResponse {
    }
    /**
     * Request message for MetadataService.AddExecutionEvents.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1AddExecutionEventsRequest {
        /**
         * The Events to create and add.
         */
        events?: Schema$GoogleCloudAiplatformV1beta1Event[];
    }
    /**
     * Response message for MetadataService.AddExecutionEvents.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1AddExecutionEventsResponse {
    }
    /**
     * Request message for VizierService.AddTrialMeasurement.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1AddTrialMeasurementRequest {
        /**
         * Required. The measurement to be added to a Trial.
         */
        measurement?: Schema$GoogleCloudAiplatformV1beta1Measurement;
    }
    /**
     * Used to assign specific AnnotationSpec to a particular area of a DataItem or the whole part of the DataItem.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1Annotation {
        /**
         * Output only. The source of the Annotation.
         */
        annotationSource?: Schema$GoogleCloudAiplatformV1beta1UserActionReference;
        /**
         * Output only. Timestamp when this Annotation was created.
         */
        createTime?: string | null;
        /**
         * Optional. Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
         */
        etag?: string | null;
        /**
         * Optional. The labels with user-defined metadata to organize your Annotations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Annotation(System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable. Following system labels exist for each Annotation: * "aiplatform.googleapis.com/annotation_set_name": optional, name of the UI's annotation set this Annotation belongs to. If not set, the Annotation is not visible in the UI. * "aiplatform.googleapis.com/payload_schema": output only, its value is the payload_schema's title.
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Output only. Resource name of the Annotation.
         */
        name?: string | null;
        /**
         * Required. The schema of the payload can be found in payload_schema.
         */
        payload?: any | null;
        /**
         * Required. Google Cloud Storage URI points to a YAML file describing payload. The schema is defined as an [OpenAPI 3.0.2 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). The schema files that can be used here are found in gs://google-cloud-aiplatform/schema/dataset/annotation/, note that the chosen schema must be consistent with the parent Dataset's metadata.
         */
        payloadSchemaUri?: string | null;
        /**
         * Output only. Timestamp when this Annotation was last updated.
         */
        updateTime?: string | null;
    }
    /**
     * Identifies a concept with which DataItems may be annotated with.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1AnnotationSpec {
        /**
         * Output only. Timestamp when this AnnotationSpec was created.
         */
        createTime?: string | null;
        /**
         * Required. The user-defined name of the AnnotationSpec. The name can be up to 128 characters long and can consist of any UTF-8 characters.
         */
        displayName?: string | null;
        /**
         * Optional. Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
         */
        etag?: string | null;
        /**
         * Output only. Resource name of the AnnotationSpec.
         */
        name?: string | null;
        /**
         * Output only. Timestamp when AnnotationSpec was last updated.
         */
        updateTime?: string | null;
    }
    /**
     * Instance of a general artifact.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1Artifact {
        /**
         * Output only. Timestamp when this Artifact was created.
         */
        createTime?: string | null;
        /**
         * Description of the Artifact
         */
        description?: string | null;
        /**
         * User provided display name of the Artifact. May be up to 128 Unicode characters.
         */
        displayName?: string | null;
        /**
         * An eTag used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
         */
        etag?: string | null;
        /**
         * The labels with user-defined metadata to organize your Artifacts. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Artifact (System labels are excluded).
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Properties of the Artifact. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.
         */
        metadata?: {
            [key: string]: any;
        } | null;
        /**
         * Output only. The resource name of the Artifact.
         */
        name?: string | null;
        /**
         * The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
         */
        schemaTitle?: string | null;
        /**
         * The version of the schema in schema_name to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
         */
        schemaVersion?: string | null;
        /**
         * The state of this Artifact. This is a property of the Artifact, and does not imply or capture any ongoing process. This property is managed by clients (such as Vertex AI Pipelines), and the system does not prescribe or check the validity of state transitions.
         */
        state?: string | null;
        /**
         * Output only. Timestamp when this Artifact was last updated.
         */
        updateTime?: string | null;
        /**
         * The uniform resource identifier of the artifact file. May be empty if there is no actual artifact file.
         */
        uri?: string | null;
    }
    /**
     * Metadata information for NotebookService.AssignNotebookRuntime.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1AssignNotebookRuntimeOperationMetadata {
        /**
         * The operation generic information.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
        /**
         * A human-readable message that shows the intermediate progress details of NotebookRuntime.
         */
        progressMessage?: string | null;
    }
    /**
     * Request message for NotebookService.AssignNotebookRuntime.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1AssignNotebookRuntimeRequest {
        /**
         * Required. Provide runtime specific information (e.g. runtime owner, notebook id) used for NotebookRuntime assignment.
         */
        notebookRuntime?: Schema$GoogleCloudAiplatformV1beta1NotebookRuntime;
        /**
         * Optional. User specified ID for the notebook runtime.
         */
        notebookRuntimeId?: string | null;
        /**
         * Required. The resource name of the NotebookRuntimeTemplate based on which a NotebookRuntime will be assigned (reuse or create a new one).
         */
        notebookRuntimeTemplate?: string | null;
    }
    /**
     * Attribution that explains a particular prediction output.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1Attribution {
        /**
         * Output only. Error of feature_attributions caused by approximation used in the explanation method. Lower value means more precise attributions. * For Sampled Shapley attribution, increasing path_count might reduce the error. * For Integrated Gradients attribution, increasing step_count might reduce the error. * For XRAI attribution, increasing step_count might reduce the error. See [this introduction](/vertex-ai/docs/explainable-ai/overview) for more information.
         */
        approximationError?: number | null;
        /**
         * Output only. Model predicted output if the input instance is constructed from the baselines of all the features defined in ExplanationMetadata.inputs. The field name of the output is determined by the key in ExplanationMetadata.outputs. If the Model's predicted output has multiple dimensions (rank \> 1), this is the value in the output located by output_index. If there are multiple baselines, their output values are averaged.
         */
        baselineOutputValue?: number | null;
        /**
         * Output only. Attributions of each explained feature. Features are extracted from the prediction instances according to explanation metadata for inputs. The value is a struct, whose keys are the name of the feature. The values are how much the feature in the instance contributed to the predicted result. The format of the value is determined by the feature's input format: * If the feature is a scalar value, the attribution value is a floating number. * If the feature is an array of scalar values, the attribution value is an array. * If the feature is a struct, the attribution value is a struct. The keys in the attribution value struct are the same as the keys in the feature struct. The formats of the values in the attribution struct are determined by the formats of the values in the feature struct. The ExplanationMetadata.feature_attributions_schema_uri field, pointed to by the ExplanationSpec field of the Endpoint.deployed_models object, points to the schema file that describes the features and their attribution values (if it is populated).
         */
        featureAttributions?: any | null;
        /**
         * Output only. Model predicted output on the corresponding explanation instance. The field name of the output is determined by the key in ExplanationMetadata.outputs. If the Model predicted output has multiple dimensions, this is the value in the output located by output_index.
         */
        instanceOutputValue?: number | null;
        /**
         * Output only. The display name of the output identified by output_index. For example, the predicted class name by a multi-classification Model. This field is only populated iff the Model predicts display names as a separate field along with the explained output. The predicted display name must has the same shape of the explained output, and can be located using output_index.
         */
        outputDisplayName?: string | null;
        /**
         * Output only. The index that locates the explained prediction output. If the prediction output is a scalar value, output_index is not populated. If the prediction output has multiple dimensions, the length of the output_index list is the same as the number of dimensions of the output. The i-th element in output_index is the element index of the i-th dimension of the output vector. Indices start from 0.
         */
        outputIndex?: number[] | null;
        /**
         * Output only. Name of the explain output. Specified as the key in ExplanationMetadata.outputs.
         */
        outputName?: string | null;
    }
    /**
     * A description of resources that to large degree are decided by Vertex AI, and require only a modest additional configuration. Each Model supporting these resources documents its specific guidelines.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1AutomaticResources {
        /**
         * Immutable. The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, a no upper bound for scaling under heavy traffic will be assume, though Vertex AI may be unable to scale beyond certain replica number.
         */
        maxReplicaCount?: number | null;
        /**
         * Immutable. The minimum number of replicas this DeployedModel will be always deployed on. If traffic against it increases, it may dynamically be deployed onto more replicas up to max_replica_count, and as traffic decreases, some of these extra replicas may be freed. If the requested value is too large, the deployment will error.
         */
        minReplicaCount?: number | null;
    }
    /**
     * The metric specification that defines the target resource utilization (CPU utilization, accelerator's duty cycle, and so on) for calculating the desired replica count.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1AutoscalingMetricSpec {
        /**
         * Required. The resource metric name. Supported metrics: * For Online Prediction: * `aiplatform.googleapis.com/prediction/online/accelerator/duty_cycle` * `aiplatform.googleapis.com/prediction/online/cpu/utilization`
         */
        metricName?: string | null;
        /**
         * The target resource utilization in percentage (1% - 100%) for the given metric; once the real usage deviates from the target by a certain percentage, the machine replicas change. The default value is 60 (representing 60%) if not provided.
         */
        target?: number | null;
    }
    /**
     * The storage details for Avro input content.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1AvroSource {
        /**
         * Required. Google Cloud Storage location.
         */
        gcsSource?: Schema$GoogleCloudAiplatformV1beta1GcsSource;
    }
    /**
     * Request message for PipelineService.BatchCancelPipelineJobs.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchCancelPipelineJobsRequest {
        /**
         * Required. The names of the PipelineJobs to cancel. A maximum of 32 PipelineJobs can be cancelled in a batch. Format: `projects/{project\}/locations/{location\}/pipelineJobs/{pipelineJob\}`
         */
        names?: string[] | null;
    }
    /**
     * Response message for PipelineService.BatchCancelPipelineJobs.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchCancelPipelineJobsResponse {
        /**
         * PipelineJobs cancelled.
         */
        pipelineJobs?: Schema$GoogleCloudAiplatformV1beta1PipelineJob[];
    }
    /**
     * Details of operations that perform batch create Features.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchCreateFeaturesOperationMetadata {
        /**
         * Operation metadata for Feature.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Request message for FeaturestoreService.BatchCreateFeatures.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchCreateFeaturesRequest {
        /**
         * Required. The request message specifying the Features to create. All Features must be created under the same parent EntityType. The `parent` field in each child request message can be omitted. If `parent` is set in a child request, then the value must match the `parent` value in this request message.
         */
        requests?: Schema$GoogleCloudAiplatformV1beta1CreateFeatureRequest[];
    }
    /**
     * Response message for FeaturestoreService.BatchCreateFeatures.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchCreateFeaturesResponse {
        /**
         * The Features created.
         */
        features?: Schema$GoogleCloudAiplatformV1beta1Feature[];
    }
    /**
     * Request message for TensorboardService.BatchCreateTensorboardRuns.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchCreateTensorboardRunsRequest {
        /**
         * Required. The request message specifying the TensorboardRuns to create. A maximum of 1000 TensorboardRuns can be created in a batch.
         */
        requests?: Schema$GoogleCloudAiplatformV1beta1CreateTensorboardRunRequest[];
    }
    /**
     * Response message for TensorboardService.BatchCreateTensorboardRuns.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchCreateTensorboardRunsResponse {
        /**
         * The created TensorboardRuns.
         */
        tensorboardRuns?: Schema$GoogleCloudAiplatformV1beta1TensorboardRun[];
    }
    /**
     * Request message for TensorboardService.BatchCreateTensorboardTimeSeries.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchCreateTensorboardTimeSeriesRequest {
        /**
         * Required. The request message specifying the TensorboardTimeSeries to create. A maximum of 1000 TensorboardTimeSeries can be created in a batch.
         */
        requests?: Schema$GoogleCloudAiplatformV1beta1CreateTensorboardTimeSeriesRequest[];
    }
    /**
     * Response message for TensorboardService.BatchCreateTensorboardTimeSeries.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchCreateTensorboardTimeSeriesResponse {
        /**
         * The created TensorboardTimeSeries.
         */
        tensorboardTimeSeries?: Schema$GoogleCloudAiplatformV1beta1TensorboardTimeSeries[];
    }
    /**
     * A description of resources that are used for performing batch operations, are dedicated to a Model, and need manual configuration.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchDedicatedResources {
        /**
         * Required. Immutable. The specification of a single machine.
         */
        machineSpec?: Schema$GoogleCloudAiplatformV1beta1MachineSpec;
        /**
         * Immutable. The maximum number of machine replicas the batch operation may be scaled to. The default value is 10.
         */
        maxReplicaCount?: number | null;
        /**
         * Immutable. The number of machine replicas used at the start of the batch operation. If not set, Vertex AI decides starting number, not greater than max_replica_count
         */
        startingReplicaCount?: number | null;
    }
    /**
     * Request message for PipelineService.BatchDeletePipelineJobs.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchDeletePipelineJobsRequest {
        /**
         * Required. The names of the PipelineJobs to delete. A maximum of 32 PipelineJobs can be deleted in a batch. Format: `projects/{project\}/locations/{location\}/pipelineJobs/{pipelineJob\}`
         */
        names?: string[] | null;
    }
    /**
     * Response message for PipelineService.BatchDeletePipelineJobs.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchDeletePipelineJobsResponse {
        /**
         * PipelineJobs deleted.
         */
        pipelineJobs?: Schema$GoogleCloudAiplatformV1beta1PipelineJob[];
    }
    /**
     * Request message for ModelService.BatchImportEvaluatedAnnotations
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchImportEvaluatedAnnotationsRequest {
        /**
         * Required. Evaluated annotations resource to be imported.
         */
        evaluatedAnnotations?: Schema$GoogleCloudAiplatformV1beta1EvaluatedAnnotation[];
    }
    /**
     * Response message for ModelService.BatchImportEvaluatedAnnotations
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchImportEvaluatedAnnotationsResponse {
        /**
         * Output only. Number of EvaluatedAnnotations imported.
         */
        importedEvaluatedAnnotationsCount?: number | null;
    }
    /**
     * Request message for ModelService.BatchImportModelEvaluationSlices
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchImportModelEvaluationSlicesRequest {
        /**
         * Required. Model evaluation slice resource to be imported.
         */
        modelEvaluationSlices?: Schema$GoogleCloudAiplatformV1beta1ModelEvaluationSlice[];
    }
    /**
     * Response message for ModelService.BatchImportModelEvaluationSlices
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchImportModelEvaluationSlicesResponse {
        /**
         * Output only. List of imported ModelEvaluationSlice.name.
         */
        importedModelEvaluationSlices?: string[] | null;
    }
    /**
     * Runtime operation information for MigrationService.BatchMigrateResources.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchMigrateResourcesOperationMetadata {
        /**
         * The common part of the operation metadata.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
        /**
         * Partial results that reflect the latest migration operation progress.
         */
        partialResults?: Schema$GoogleCloudAiplatformV1beta1BatchMigrateResourcesOperationMetadataPartialResult[];
    }
    /**
     * Represents a partial result in batch migration operation for one MigrateResourceRequest.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchMigrateResourcesOperationMetadataPartialResult {
        /**
         * Migrated dataset resource name.
         */
        dataset?: string | null;
        /**
         * The error result of the migration request in case of failure.
         */
        error?: Schema$GoogleRpcStatus;
        /**
         * Migrated model resource name.
         */
        model?: string | null;
        /**
         * It's the same as the value in MigrateResourceRequest.migrate_resource_requests.
         */
        request?: Schema$GoogleCloudAiplatformV1beta1MigrateResourceRequest;
    }
    /**
     * Request message for MigrationService.BatchMigrateResources.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchMigrateResourcesRequest {
        /**
         * Required. The request messages specifying the resources to migrate. They must be in the same location as the destination. Up to 50 resources can be migrated in one batch.
         */
        migrateResourceRequests?: Schema$GoogleCloudAiplatformV1beta1MigrateResourceRequest[];
    }
    /**
     * Response message for MigrationService.BatchMigrateResources.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchMigrateResourcesResponse {
        /**
         * Successfully migrated resources.
         */
        migrateResourceResponses?: Schema$GoogleCloudAiplatformV1beta1MigrateResourceResponse[];
    }
    /**
     * A job that uses a Model to produce predictions on multiple input instances. If predictions for significant portion of the instances fail, the job may finish without attempting predictions for all remaining instances.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchPredictionJob {
        /**
         * Output only. Statistics on completed and failed prediction instances.
         */
        completionStats?: Schema$GoogleCloudAiplatformV1beta1CompletionStats;
        /**
         * Output only. Time when the BatchPredictionJob was created.
         */
        createTime?: string | null;
        /**
         * The config of resources used by the Model during the batch prediction. If the Model supports DEDICATED_RESOURCES this config may be provided (and the job will use these resources), if the Model doesn't support AUTOMATIC_RESOURCES, this config must be provided.
         */
        dedicatedResources?: Schema$GoogleCloudAiplatformV1beta1BatchDedicatedResources;
        /**
         * For custom-trained Models and AutoML Tabular Models, the container of the DeployedModel instances will send `stderr` and `stdout` streams to Cloud Logging by default. Please note that the logs incur cost, which are subject to [Cloud Logging pricing](https://cloud.google.com/logging/pricing). User can disable container logging by setting this flag to true.
         */
        disableContainerLogging?: boolean | null;
        /**
         * Required. The user-defined name of this BatchPredictionJob.
         */
        displayName?: string | null;
        /**
         * Customer-managed encryption key options for a BatchPredictionJob. If this is set, then all resources created by the BatchPredictionJob will be encrypted with the provided encryption key.
         */
        encryptionSpec?: Schema$GoogleCloudAiplatformV1beta1EncryptionSpec;
        /**
         * Output only. Time when the BatchPredictionJob entered any of the following states: `JOB_STATE_SUCCEEDED`, `JOB_STATE_FAILED`, `JOB_STATE_CANCELLED`.
         */
        endTime?: string | null;
        /**
         * Output only. Only populated when the job's state is JOB_STATE_FAILED or JOB_STATE_CANCELLED.
         */
        error?: Schema$GoogleRpcStatus;
        /**
         * Explanation configuration for this BatchPredictionJob. Can be specified only if generate_explanation is set to `true`. This value overrides the value of Model.explanation_spec. All fields of explanation_spec are optional in the request. If a field of the explanation_spec object is not populated, the corresponding field of the Model.explanation_spec object is inherited.
         */
        explanationSpec?: Schema$GoogleCloudAiplatformV1beta1ExplanationSpec;
        /**
         * Generate explanation with the batch prediction results. When set to `true`, the batch prediction output changes based on the `predictions_format` field of the BatchPredictionJob.output_config object: * `bigquery`: output includes a column named `explanation`. The value is a struct that conforms to the Explanation object. * `jsonl`: The JSON objects on each line include an additional entry keyed `explanation`. The value of the entry is a JSON object that conforms to the Explanation object. * `csv`: Generating explanations for CSV format is not supported. If this field is set to true, either the Model.explanation_spec or explanation_spec must be populated.
         */
        generateExplanation?: boolean | null;
        /**
         * Required. Input configuration of the instances on which predictions are performed. The schema of any single instance may be specified via the Model's PredictSchemata's instance_schema_uri.
         */
        inputConfig?: Schema$GoogleCloudAiplatformV1beta1BatchPredictionJobInputConfig;
        /**
         * Configuration for how to convert batch prediction input instances to the prediction instances that are sent to the Model.
         */
        instanceConfig?: Schema$GoogleCloudAiplatformV1beta1BatchPredictionJobInstanceConfig;
        /**
         * The labels with user-defined metadata to organize BatchPredictionJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Immutable. Parameters configuring the batch behavior. Currently only applicable when dedicated_resources are used (in other cases Vertex AI does the tuning itself).
         */
        manualBatchTuningParameters?: Schema$GoogleCloudAiplatformV1beta1ManualBatchTuningParameters;
        /**
         * The name of the Model resource that produces the predictions via this job, must share the same ancestor Location. Starting this job has no impact on any existing deployments of the Model and their resources. Exactly one of model and unmanaged_container_model must be set. The model resource name may contain version id or version alias to specify the version. Example: `projects/{project\}/locations/{location\}/models/{model\}@2` or `projects/{project\}/locations/{location\}/models/{model\}@golden` if no version is specified, the default version will be deployed. The model resource could also be a publisher model. Example: `publishers/{publisher\}/models/{model\}` or `projects/{project\}/locations/{location\}/publishers/{publisher\}/models/{model\}`
         */
        model?: string | null;
        /**
         * Model monitoring config will be used for analysis model behaviors, based on the input and output to the batch prediction job, as well as the provided training dataset.
         */
        modelMonitoringConfig?: Schema$GoogleCloudAiplatformV1beta1ModelMonitoringConfig;
        /**
         * Get batch prediction job monitoring statistics.
         */
        modelMonitoringStatsAnomalies?: Schema$GoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies[];
        /**
         * Output only. The running status of the model monitoring pipeline.
         */
        modelMonitoringStatus?: Schema$GoogleRpcStatus;
        /**
         * The parameters that govern the predictions. The schema of the parameters may be specified via the Model's PredictSchemata's parameters_schema_uri.
         */
        modelParameters?: any | null;
        /**
         * Output only. The version ID of the Model that produces the predictions via this job.
         */
        modelVersionId?: string | null;
        /**
         * Output only. Resource name of the BatchPredictionJob.
         */
        name?: string | null;
        /**
         * Required. The Configuration specifying where output predictions should be written. The schema of any single prediction may be specified as a concatenation of Model's PredictSchemata's instance_schema_uri and prediction_schema_uri.
         */
        outputConfig?: Schema$GoogleCloudAiplatformV1beta1BatchPredictionJobOutputConfig;
        /**
         * Output only. Information further describing the output of this job.
         */
        outputInfo?: Schema$GoogleCloudAiplatformV1beta1BatchPredictionJobOutputInfo;
        /**
         * Output only. Partial failures encountered. For example, single files that can't be read. This field never exceeds 20 entries. Status details fields contain standard Google Cloud error details.
         */
        partialFailures?: Schema$GoogleRpcStatus[];
        /**
         * Output only. Information about resources that had been consumed by this job. Provided in real time at best effort basis, as well as a final value once the job completes. Note: This field currently may be not populated for batch predictions that use AutoML Models.
         */
        resourcesConsumed?: Schema$GoogleCloudAiplatformV1beta1ResourcesConsumed;
        /**
         * The service account that the DeployedModel's container runs as. If not specified, a system generated one will be used, which has minimal permissions and the custom container, if used, may not have enough permission to access other Google Cloud resources. Users deploying the Model must have the `iam.serviceAccounts.actAs` permission on this service account.
         */
        serviceAccount?: string | null;
        /**
         * Output only. Time when the BatchPredictionJob for the first time entered the `JOB_STATE_RUNNING` state.
         */
        startTime?: string | null;
        /**
         * Output only. The detailed state of the job.
         */
        state?: string | null;
        /**
         * Contains model information necessary to perform batch prediction without requiring uploading to model registry. Exactly one of model and unmanaged_container_model must be set.
         */
        unmanagedContainerModel?: Schema$GoogleCloudAiplatformV1beta1UnmanagedContainerModel;
        /**
         * Output only. Time when the BatchPredictionJob was most recently updated.
         */
        updateTime?: string | null;
    }
    /**
     * Configures the input to BatchPredictionJob. See Model.supported_input_storage_formats for Model's supported input formats, and how instances should be expressed via any of them.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchPredictionJobInputConfig {
        /**
         * The BigQuery location of the input table. The schema of the table should be in the format described by the given context OpenAPI Schema, if one is provided. The table may contain additional columns that are not described by the schema, and they will be ignored.
         */
        bigquerySource?: Schema$GoogleCloudAiplatformV1beta1BigQuerySource;
        /**
         * The Cloud Storage location for the input instances.
         */
        gcsSource?: Schema$GoogleCloudAiplatformV1beta1GcsSource;
        /**
         * Required. The format in which instances are given, must be one of the Model's supported_input_storage_formats.
         */
        instancesFormat?: string | null;
    }
    /**
     * Configuration defining how to transform batch prediction input instances to the instances that the Model accepts.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchPredictionJobInstanceConfig {
        /**
         * Fields that will be excluded in the prediction instance that is sent to the Model. Excluded will be attached to the batch prediction output if key_field is not specified. When excluded_fields is populated, included_fields must be empty. The input must be JSONL with objects at each line, BigQuery or TfRecord.
         */
        excludedFields?: string[] | null;
        /**
         * Fields that will be included in the prediction instance that is sent to the Model. If instance_type is `array`, the order of field names in included_fields also determines the order of the values in the array. When included_fields is populated, excluded_fields must be empty. The input must be JSONL with objects at each line, BigQuery or TfRecord.
         */
        includedFields?: string[] | null;
        /**
         * The format of the instance that the Model accepts. Vertex AI will convert compatible batch prediction input instance formats to the specified format. Supported values are: * `object`: Each input is converted to JSON object format. * For `bigquery`, each row is converted to an object. * For `jsonl`, each line of the JSONL input must be an object. * Does not apply to `csv`, `file-list`, `tf-record`, or `tf-record-gzip`. * `array`: Each input is converted to JSON array format. * For `bigquery`, each row is converted to an array. The order of columns is determined by the BigQuery column order, unless included_fields is populated. included_fields must be populated for specifying field orders. * For `jsonl`, if each line of the JSONL input is an object, included_fields must be populated for specifying field orders. * Does not apply to `csv`, `file-list`, `tf-record`, or `tf-record-gzip`. If not specified, Vertex AI converts the batch prediction input as follows: * For `bigquery` and `csv`, the behavior is the same as `array`. The order of columns is the same as defined in the file or table, unless included_fields is populated. * For `jsonl`, the prediction instance format is determined by each line of the input. * For `tf-record`/`tf-record-gzip`, each record will be converted to an object in the format of `{"b64": \}`, where `` is the Base64-encoded string of the content of the record. * For `file-list`, each file in the list will be converted to an object in the format of `{"b64": \}`, where `` is the Base64-encoded string of the content of the file.
         */
        instanceType?: string | null;
        /**
         * The name of the field that is considered as a key. The values identified by the key field is not included in the transformed instances that is sent to the Model. This is similar to specifying this name of the field in excluded_fields. In addition, the batch prediction output will not include the instances. Instead the output will only include the value of the key field, in a field named `key` in the output: * For `jsonl` output format, the output will have a `key` field instead of the `instance` field. * For `csv`/`bigquery` output format, the output will have have a `key` column instead of the instance feature columns. The input must be JSONL with objects at each line, CSV, BigQuery or TfRecord.
         */
        keyField?: string | null;
    }
    /**
     * Configures the output of BatchPredictionJob. See Model.supported_output_storage_formats for supported output formats, and how predictions are expressed via any of them.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchPredictionJobOutputConfig {
        /**
         * The BigQuery project or dataset location where the output is to be written to. If project is provided, a new dataset is created with name `prediction__` where is made BigQuery-dataset-name compatible (for example, most special characters become underscores), and timestamp is in YYYY_MM_DDThh_mm_ss_sssZ "based on ISO-8601" format. In the dataset two tables will be created, `predictions`, and `errors`. If the Model has both instance and prediction schemata defined then the tables have columns as follows: The `predictions` table contains instances for which the prediction succeeded, it has columns as per a concatenation of the Model's instance and prediction schemata. The `errors` table contains rows for which the prediction has failed, it has instance columns, as per the instance schema, followed by a single "errors" column, which as values has google.rpc.Status represented as a STRUCT, and containing only `code` and `message`.
         */
        bigqueryDestination?: Schema$GoogleCloudAiplatformV1beta1BigQueryDestination;
        /**
         * The Cloud Storage location of the directory where the output is to be written to. In the given directory a new directory is created. Its name is `prediction--`, where timestamp is in YYYY-MM-DDThh:mm:ss.sssZ ISO-8601 format. Inside of it files `predictions_0001.`, `predictions_0002.`, ..., `predictions_N.` are created where `` depends on chosen predictions_format, and N may equal 0001 and depends on the total number of successfully predicted instances. If the Model has both instance and prediction schemata defined then each such file contains predictions as per the predictions_format. If prediction for any instance failed (partially or completely), then an additional `errors_0001.`, `errors_0002.`,..., `errors_N.` files are created (N depends on total number of failed predictions). These files contain the failed instances, as per their schema, followed by an additional `error` field which as value has google.rpc.Status containing only `code` and `message` fields.
         */
        gcsDestination?: Schema$GoogleCloudAiplatformV1beta1GcsDestination;
        /**
         * Required. The format in which Vertex AI gives the predictions, must be one of the Model's supported_output_storage_formats.
         */
        predictionsFormat?: string | null;
    }
    /**
     * Further describes this job's output. Supplements output_config.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchPredictionJobOutputInfo {
        /**
         * Output only. The path of the BigQuery dataset created, in `bq://projectId.bqDatasetId` format, into which the prediction output is written.
         */
        bigqueryOutputDataset?: string | null;
        /**
         * Output only. The name of the BigQuery table created, in `predictions_` format, into which the prediction output is written. Can be used by UI to generate the BigQuery output path, for example.
         */
        bigqueryOutputTable?: string | null;
        /**
         * Output only. The full path of the Cloud Storage directory created, into which the prediction output is written.
         */
        gcsOutputDirectory?: string | null;
    }
    /**
     * Details of operations that batch reads Feature values.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchReadFeatureValuesOperationMetadata {
        /**
         * Operation metadata for Featurestore batch read Features values.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Request message for FeaturestoreService.BatchReadFeatureValues.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest {
        /**
         * Similar to csv_read_instances, but from BigQuery source.
         */
        bigqueryReadInstances?: Schema$GoogleCloudAiplatformV1beta1BigQuerySource;
        /**
         * Each read instance consists of exactly one read timestamp and one or more entity IDs identifying entities of the corresponding EntityTypes whose Features are requested. Each output instance contains Feature values of requested entities concatenated together as of the read time. An example read instance may be `foo_entity_id, bar_entity_id, 2020-01-01T10:00:00.123Z`. An example output instance may be `foo_entity_id, bar_entity_id, 2020-01-01T10:00:00.123Z, foo_entity_feature1_value, bar_entity_feature2_value`. Timestamp in each read instance must be millisecond-aligned. `csv_read_instances` are read instances stored in a plain-text CSV file. The header should be: [ENTITY_TYPE_ID1], [ENTITY_TYPE_ID2], ..., timestamp The columns can be in any order. Values in the timestamp column must use the RFC 3339 format, e.g. `2012-07-30T10:43:17.123Z`.
         */
        csvReadInstances?: Schema$GoogleCloudAiplatformV1beta1CsvSource;
        /**
         * Required. Specifies output location and format.
         */
        destination?: Schema$GoogleCloudAiplatformV1beta1FeatureValueDestination;
        /**
         * Required. Specifies EntityType grouping Features to read values of and settings.
         */
        entityTypeSpecs?: Schema$GoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec[];
        /**
         * When not empty, the specified fields in the *_read_instances source will be joined as-is in the output, in addition to those fields from the Featurestore Entity. For BigQuery source, the type of the pass-through values will be automatically inferred. For CSV source, the pass-through values will be passed as opaque bytes.
         */
        passThroughFields?: Schema$GoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestPassThroughField[];
        /**
         * Optional. Excludes Feature values with feature generation timestamp before this timestamp. If not set, retrieve oldest values kept in Feature Store. Timestamp, if present, must not have higher than millisecond precision.
         */
        startTime?: string | null;
    }
    /**
     * Selects Features of an EntityType to read values of and specifies read settings.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec {
        /**
         * Required. ID of the EntityType to select Features. The EntityType id is the entity_type_id specified during EntityType creation.
         */
        entityTypeId?: string | null;
        /**
         * Required. Selectors choosing which Feature values to read from the EntityType.
         */
        featureSelector?: Schema$GoogleCloudAiplatformV1beta1FeatureSelector;
        /**
         * Per-Feature settings for the batch read.
         */
        settings?: Schema$GoogleCloudAiplatformV1beta1DestinationFeatureSetting[];
    }
    /**
     * Describe pass-through fields in read_instance source.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestPassThroughField {
        /**
         * Required. The name of the field in the CSV header or the name of the column in BigQuery table. The naming restriction is the same as Feature.name.
         */
        fieldName?: string | null;
    }
    /**
     * Response message for FeaturestoreService.BatchReadFeatureValues.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchReadFeatureValuesResponse {
    }
    /**
     * Response message for TensorboardService.BatchReadTensorboardTimeSeriesData.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BatchReadTensorboardTimeSeriesDataResponse {
        /**
         * The returned time series data.
         */
        timeSeriesData?: Schema$GoogleCloudAiplatformV1beta1TimeSeriesData[];
    }
    /**
     * The BigQuery location for the output content.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BigQueryDestination {
        /**
         * Required. BigQuery URI to a project or table, up to 2000 characters long. When only the project is specified, the Dataset and Table is created. When the full table reference is specified, the Dataset must exist and table must not exist. Accepted forms: * BigQuery path. For example: `bq://projectId` or `bq://projectId.bqDatasetId` or `bq://projectId.bqDatasetId.bqTableId`.
         */
        outputUri?: string | null;
    }
    /**
     * The BigQuery location for the input content.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BigQuerySource {
        /**
         * Required. BigQuery URI to a table, up to 2000 characters long. Accepted forms: * BigQuery path. For example: `bq://projectId.bqDatasetId.bqTableId`.
         */
        inputUri?: string | null;
    }
    /**
     * Raw media bytes. Text should not be sent as raw bytes, use the 'text' field.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1Blob {
        /**
         * Required. Raw bytes for media formats.
         */
        data?: string | null;
        /**
         * Required. The IANA standard MIME type of the source data.
         */
        mimeType?: string | null;
    }
    /**
     * Config for blur baseline. When enabled, a linear path from the maximally blurred image to the input image is created. Using a blurred baseline instead of zero (black image) is motivated by the BlurIG approach explained here: https://arxiv.org/abs/2004.03383
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BlurBaselineConfig {
        /**
         * The standard deviation of the blur kernel for the blurred baseline. The same blurring parameter is used for both the height and the width dimension. If not set, the method defaults to the zero (i.e. black for images) baseline.
         */
        maxBlurSigma?: number | null;
    }
    /**
     * A list of boolean values.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1BoolArray {
        /**
         * A list of bool values.
         */
        values?: boolean[] | null;
    }
    /**
     * Request message for JobService.CancelBatchPredictionJob.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CancelBatchPredictionJobRequest {
    }
    /**
     * Request message for JobService.CancelCustomJob.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CancelCustomJobRequest {
    }
    /**
     * Request message for JobService.CancelDataLabelingJob.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CancelDataLabelingJobRequest {
    }
    /**
     * Request message for JobService.CancelHyperparameterTuningJob.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CancelHyperparameterTuningJobRequest {
    }
    /**
     * Request message for JobService.CancelNasJob.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CancelNasJobRequest {
    }
    /**
     * Request message for PipelineService.CancelPipelineJob.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CancelPipelineJobRequest {
    }
    /**
     * Request message for PipelineService.CancelTrainingPipeline.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CancelTrainingPipelineRequest {
    }
    /**
     * A response candidate generated from the model.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1Candidate {
        /**
         * Output only. Source attribution of the generated content.
         */
        citationMetadata?: Schema$GoogleCloudAiplatformV1beta1CitationMetadata;
        /**
         * Output only. Content parts of the candidate.
         */
        content?: Schema$GoogleCloudAiplatformV1beta1Content;
        /**
         * Output only. Describes the reason the mode stopped generating tokens in more detail. This is only filled when `finish_reason` is set.
         */
        finishMessage?: string | null;
        /**
         * Output only. The reason why the model stopped generating tokens. If empty, the model has not stopped generating the tokens.
         */
        finishReason?: string | null;
        /**
         * Output only. Metadata specifies sources used to ground generated content.
         */
        groundingMetadata?: Schema$GoogleCloudAiplatformV1beta1GroundingMetadata;
        /**
         * Output only. Index of the candidate.
         */
        index?: number | null;
        /**
         * Output only. List of ratings for the safety of a response candidate. There is at most one rating per category.
         */
        safetyRatings?: Schema$GoogleCloudAiplatformV1beta1SafetyRating[];
    }
    /**
     * This message will be placed in the metadata field of a google.longrunning.Operation associated with a CheckTrialEarlyStoppingState request.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CheckTrialEarlyStoppingStateMetatdata {
        /**
         * Operation metadata for suggesting Trials.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
        /**
         * The name of the Study that the Trial belongs to.
         */
        study?: string | null;
        /**
         * The Trial name.
         */
        trial?: string | null;
    }
    /**
     * Request message for VizierService.CheckTrialEarlyStoppingState.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CheckTrialEarlyStoppingStateRequest {
    }
    /**
     * Response message for VizierService.CheckTrialEarlyStoppingState.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CheckTrialEarlyStoppingStateResponse {
        /**
         * True if the Trial should stop.
         */
        shouldStop?: boolean | null;
    }
    /**
     * Source attributions for content.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1Citation {
        /**
         * Output only. End index into the content.
         */
        endIndex?: number | null;
        /**
         * Output only. License of the attribution.
         */
        license?: string | null;
        /**
         * Output only. Publication date of the attribution.
         */
        publicationDate?: Schema$GoogleTypeDate;
        /**
         * Output only. Start index into the content.
         */
        startIndex?: number | null;
        /**
         * Output only. Title of the attribution.
         */
        title?: string | null;
        /**
         * Output only. Url reference of the attribution.
         */
        uri?: string | null;
    }
    /**
     * A collection of source attributions for a piece of content.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CitationMetadata {
        /**
         * Output only. List of citations.
         */
        citations?: Schema$GoogleCloudAiplatformV1beta1Citation[];
    }
    /**
     * Request message for VizierService.CompleteTrial.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CompleteTrialRequest {
        /**
         * Optional. If provided, it will be used as the completed Trial's final_measurement; Otherwise, the service will auto-select a previously reported measurement as the final-measurement
         */
        finalMeasurement?: Schema$GoogleCloudAiplatformV1beta1Measurement;
        /**
         * Optional. A human readable reason why the trial was infeasible. This should only be provided if `trial_infeasible` is true.
         */
        infeasibleReason?: string | null;
        /**
         * Optional. True if the Trial cannot be run with the given Parameter, and final_measurement will be ignored.
         */
        trialInfeasible?: boolean | null;
    }
    /**
     * Success and error statistics of processing multiple entities (for example, DataItems or structured data rows) in batch.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CompletionStats {
        /**
         * Output only. The number of entities for which any error was encountered.
         */
        failedCount?: string | null;
        /**
         * Output only. In cases when enough errors are encountered a job, pipeline, or operation may be failed as a whole. Below is the number of entities for which the processing had not been finished (either in successful or failed state). Set to -1 if the number is unknown (for example, the operation failed before the total entity number could be collected).
         */
        incompleteCount?: string | null;
        /**
         * Output only. The number of entities that had been processed successfully.
         */
        successfulCount?: string | null;
        /**
         * Output only. The number of the successful forecast points that are generated by the forecasting model. This is ONLY used by the forecasting batch prediction.
         */
        successfulForecastPointCount?: string | null;
    }
    /**
     * Request message for ComputeTokens RPC call.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ComputeTokensRequest {
        /**
         * Required. The instances that are the input to token computing API call. Schema is identical to the prediction schema of the text model, even for the non-text models, like chat models, or Codey models.
         */
        instances?: any[] | null;
    }
    /**
     * Response message for ComputeTokens RPC call.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ComputeTokensResponse {
        /**
         * Lists of tokens info from the input. A ComputeTokensRequest could have multiple instances with a prompt in each instance. We also need to return lists of tokens info for the request with multiple instances.
         */
        tokensInfo?: Schema$GoogleCloudAiplatformV1beta1TokensInfo[];
    }
    /**
     * The Container Registry location for the container image.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ContainerRegistryDestination {
        /**
         * Required. Container Registry URI of a container image. Only Google Container Registry and Artifact Registry are supported now. Accepted forms: * Google Container Registry path. For example: `gcr.io/projectId/imageName:tag`. * Artifact Registry path. For example: `us-central1-docker.pkg.dev/projectId/repoName/imageName:tag`. If a tag is not specified, "latest" will be used as the default tag.
         */
        outputUri?: string | null;
    }
    /**
     * The spec of a Container.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ContainerSpec {
        /**
         * The arguments to be passed when starting the container.
         */
        args?: string[] | null;
        /**
         * The command to be invoked when the container is started. It overrides the entrypoint instruction in Dockerfile when provided.
         */
        command?: string[] | null;
        /**
         * Environment variables to be passed to the container. Maximum limit is 100.
         */
        env?: Schema$GoogleCloudAiplatformV1beta1EnvVar[];
        /**
         * Required. The URI of a container image in the Container Registry that is to be run on each worker replica.
         */
        imageUri?: string | null;
    }
    /**
     * The base structured datatype containing multi-part content of a message. A `Content` includes a `role` field designating the producer of the `Content` and a `parts` field containing multi-part data that contains the content of the message turn.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1Content {
        /**
         * Required. Ordered `Parts` that constitute a single message. Parts may have different IANA MIME types.
         */
        parts?: Schema$GoogleCloudAiplatformV1beta1Part[];
        /**
         * Optional. The producer of the content. Must be either 'user' or 'model'. Useful to set for multi-turn conversations, otherwise can be left blank or unset.
         */
        role?: string | null;
    }
    /**
     * Instance of a general context.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1Context {
        /**
         * Output only. Timestamp when this Context was created.
         */
        createTime?: string | null;
        /**
         * Description of the Context
         */
        description?: string | null;
        /**
         * User provided display name of the Context. May be up to 128 Unicode characters.
         */
        displayName?: string | null;
        /**
         * An eTag used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
         */
        etag?: string | null;
        /**
         * The labels with user-defined metadata to organize your Contexts. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Context (System labels are excluded).
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Properties of the Context. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.
         */
        metadata?: {
            [key: string]: any;
        } | null;
        /**
         * Immutable. The resource name of the Context.
         */
        name?: string | null;
        /**
         * Output only. A list of resource names of Contexts that are parents of this Context. A Context may have at most 10 parent_contexts.
         */
        parentContexts?: string[] | null;
        /**
         * The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
         */
        schemaTitle?: string | null;
        /**
         * The version of the schema in schema_name to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
         */
        schemaVersion?: string | null;
        /**
         * Output only. Timestamp when this Context was last updated.
         */
        updateTime?: string | null;
    }
    /**
     * Details of ModelService.CopyModel operation.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CopyModelOperationMetadata {
        /**
         * The common part of the operation metadata.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Request message for ModelService.CopyModel.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CopyModelRequest {
        /**
         * Customer-managed encryption key options. If this is set, then the Model copy will be encrypted with the provided encryption key.
         */
        encryptionSpec?: Schema$GoogleCloudAiplatformV1beta1EncryptionSpec;
        /**
         * Optional. Copy source_model into a new Model with this ID. The ID will become the final component of the model resource name. This value may be up to 63 characters, and valid characters are `[a-z0-9_-]`. The first character cannot be a number or hyphen.
         */
        modelId?: string | null;
        /**
         * Optional. Specify this field to copy source_model into this existing Model as a new version. Format: `projects/{project\}/locations/{location\}/models/{model\}`
         */
        parentModel?: string | null;
        /**
         * Required. The resource name of the Model to copy. That Model must be in the same Project. Format: `projects/{project\}/locations/{location\}/models/{model\}`
         */
        sourceModel?: string | null;
    }
    /**
     * Response message of ModelService.CopyModel operation.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CopyModelResponse {
        /**
         * The name of the copied Model resource. Format: `projects/{project\}/locations/{location\}/models/{model\}`
         */
        model?: string | null;
        /**
         * Output only. The version ID of the model that is copied.
         */
        modelVersionId?: string | null;
    }
    /**
     * Request message for PredictionService.CountTokens.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CountTokensRequest {
        /**
         * Required. Input content.
         */
        contents?: Schema$GoogleCloudAiplatformV1beta1Content[];
        /**
         * Required. The instances that are the input to token counting call. Schema is identical to the prediction schema of the underlying model.
         */
        instances?: any[] | null;
        /**
         * Required. The name of the publisher model requested to serve the prediction. Format: `projects/{project\}/locations/{location\}/publishers/x/models/x`
         */
        model?: string | null;
    }
    /**
     * Response message for PredictionService.CountTokens.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CountTokensResponse {
        /**
         * The total number of billable characters counted across all instances from the request.
         */
        totalBillableCharacters?: number | null;
        /**
         * The total number of tokens counted across all instances from the request.
         */
        totalTokens?: number | null;
    }
    /**
     * Runtime operation information for DatasetService.CreateDataset.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreateDatasetOperationMetadata {
        /**
         * The operation generic information.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Runtime operation information for DatasetService.CreateDatasetVersion.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreateDatasetVersionOperationMetadata {
        /**
         * The common part of the operation metadata.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Runtime operation information for CreateDeploymentResourcePool method.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreateDeploymentResourcePoolOperationMetadata {
        /**
         * The operation generic information.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Request message for CreateDeploymentResourcePool method.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreateDeploymentResourcePoolRequest {
        /**
         * Required. The DeploymentResourcePool to create.
         */
        deploymentResourcePool?: Schema$GoogleCloudAiplatformV1beta1DeploymentResourcePool;
        /**
         * Required. The ID to use for the DeploymentResourcePool, which will become the final component of the DeploymentResourcePool's resource name. The maximum length is 63 characters, and valid characters are `/^[a-z]([a-z0-9-]{0,61\}[a-z0-9])?$/`.
         */
        deploymentResourcePoolId?: string | null;
    }
    /**
     * Runtime operation information for EndpointService.CreateEndpoint.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreateEndpointOperationMetadata {
        /**
         * The operation generic information.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Details of operations that perform create EntityType.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreateEntityTypeOperationMetadata {
        /**
         * Operation metadata for EntityType.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Details of ExtensionControllerService.CreateExtensionController operation.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreateExtensionControllerOperationMetadata {
        /**
         * The common part of the operation metadata.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Details of operations that perform create FeatureGroup.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreateFeatureGroupOperationMetadata {
        /**
         * Operation metadata for FeatureGroup.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Details of operations that perform create FeatureOnlineStore.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreateFeatureOnlineStoreOperationMetadata {
        /**
         * Operation metadata for FeatureOnlineStore.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Details of operations that perform create Feature.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreateFeatureOperationMetadata {
        /**
         * Operation metadata for Feature.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Request message for FeaturestoreService.CreateFeature. Request message for FeatureRegistryService.CreateFeature.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreateFeatureRequest {
        /**
         * Required. The Feature to create.
         */
        feature?: Schema$GoogleCloudAiplatformV1beta1Feature;
        /**
         * Required. The ID to use for the Feature, which will become the final component of the Feature's resource name. This value may be up to 128 characters, and valid characters are `[a-z0-9_]`. The first character cannot be a number. The value must be unique within an EntityType/FeatureGroup.
         */
        featureId?: string | null;
        /**
         * Required. The resource name of the EntityType or FeatureGroup to create a Feature. Format for entity_type as parent: `projects/{project\}/locations/{location\}/featurestores/{featurestore\}/entityTypes/{entity_type\}` Format for feature_group as parent: `projects/{project\}/locations/{location\}/featureGroups/{feature_group\}`
         */
        parent?: string | null;
    }
    /**
     * Details of operations that perform create Featurestore.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreateFeaturestoreOperationMetadata {
        /**
         * Operation metadata for Featurestore.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Details of operations that perform create FeatureView.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreateFeatureViewOperationMetadata {
        /**
         * Operation metadata for FeatureView Create.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Runtime operation information for IndexEndpointService.CreateIndexEndpoint.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreateIndexEndpointOperationMetadata {
        /**
         * The operation generic information.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Runtime operation information for IndexService.CreateIndex.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreateIndexOperationMetadata {
        /**
         * The operation generic information.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
        /**
         * The operation metadata with regard to Matching Engine Index operation.
         */
        nearestNeighborSearchOperationMetadata?: Schema$GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadata;
    }
    /**
     * Details of operations that perform MetadataService.CreateMetadataStore.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreateMetadataStoreOperationMetadata {
        /**
         * Operation metadata for creating a MetadataStore.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Metadata information for NotebookService.CreateNotebookRuntimeTemplate.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreateNotebookRuntimeTemplateOperationMetadata {
        /**
         * The operation generic information.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Details of operations that perform create PersistentResource.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreatePersistentResourceOperationMetadata {
        /**
         * Operation metadata for PersistentResource.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
        /**
         * Progress Message for Create LRO
         */
        progressMessage?: string | null;
    }
    /**
     * Request message for PipelineService.CreatePipelineJob.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreatePipelineJobRequest {
        /**
         * Required. The resource name of the Location to create the PipelineJob in. Format: `projects/{project\}/locations/{location\}`
         */
        parent?: string | null;
        /**
         * Required. The PipelineJob to create.
         */
        pipelineJob?: Schema$GoogleCloudAiplatformV1beta1PipelineJob;
        /**
         * The ID to use for the PipelineJob, which will become the final component of the PipelineJob name. If not provided, an ID will be automatically generated. This value should be less than 128 characters, and valid characters are `/a-z-/`.
         */
        pipelineJobId?: string | null;
    }
    /**
     * Details of operations that perform create FeatureGroup.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreateRegistryFeatureOperationMetadata {
        /**
         * Operation metadata for Feature.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Runtime operation information for SolverService.CreateSolver.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreateSolverOperationMetadata {
        /**
         * The generic operation information.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Runtime operation information for SpecialistPoolService.CreateSpecialistPool.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreateSpecialistPoolOperationMetadata {
        /**
         * The operation generic information.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Details of operations that perform create Tensorboard.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreateTensorboardOperationMetadata {
        /**
         * Operation metadata for Tensorboard.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Request message for TensorboardService.CreateTensorboardRun.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreateTensorboardRunRequest {
        /**
         * Required. The resource name of the TensorboardExperiment to create the TensorboardRun in. Format: `projects/{project\}/locations/{location\}/tensorboards/{tensorboard\}/experiments/{experiment\}`
         */
        parent?: string | null;
        /**
         * Required. The TensorboardRun to create.
         */
        tensorboardRun?: Schema$GoogleCloudAiplatformV1beta1TensorboardRun;
        /**
         * Required. The ID to use for the Tensorboard run, which becomes the final component of the Tensorboard run's resource name. This value should be 1-128 characters, and valid characters are `/a-z-/`.
         */
        tensorboardRunId?: string | null;
    }
    /**
     * Request message for TensorboardService.CreateTensorboardTimeSeries.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CreateTensorboardTimeSeriesRequest {
        /**
         * Required. The resource name of the TensorboardRun to create the TensorboardTimeSeries in. Format: `projects/{project\}/locations/{location\}/tensorboards/{tensorboard\}/experiments/{experiment\}/runs/{run\}`
         */
        parent?: string | null;
        /**
         * Required. The TensorboardTimeSeries to create.
         */
        tensorboardTimeSeries?: Schema$GoogleCloudAiplatformV1beta1TensorboardTimeSeries;
        /**
         * Optional. The user specified unique ID to use for the TensorboardTimeSeries, which becomes the final component of the TensorboardTimeSeries's resource name. This value should match "a-z0-9{0, 127\}"
         */
        tensorboardTimeSeriesId?: string | null;
    }
    /**
     * The storage details for CSV output content.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CsvDestination {
        /**
         * Required. Google Cloud Storage location.
         */
        gcsDestination?: Schema$GoogleCloudAiplatformV1beta1GcsDestination;
    }
    /**
     * The storage details for CSV input content.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CsvSource {
        /**
         * Required. Google Cloud Storage location.
         */
        gcsSource?: Schema$GoogleCloudAiplatformV1beta1GcsSource;
    }
    /**
     * Represents a job that runs custom workloads such as a Docker container or a Python package. A CustomJob can have multiple worker pools and each worker pool can have its own machine and input spec. A CustomJob will be cleaned up once the job enters terminal state (failed or succeeded).
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CustomJob {
        /**
         * Output only. Time when the CustomJob was created.
         */
        createTime?: string | null;
        /**
         * Required. The display name of the CustomJob. The name can be up to 128 characters long and can consist of any UTF-8 characters.
         */
        displayName?: string | null;
        /**
         * Customer-managed encryption key options for a CustomJob. If this is set, then all resources created by the CustomJob will be encrypted with the provided encryption key.
         */
        encryptionSpec?: Schema$GoogleCloudAiplatformV1beta1EncryptionSpec;
        /**
         * Output only. Time when the CustomJob entered any of the following states: `JOB_STATE_SUCCEEDED`, `JOB_STATE_FAILED`, `JOB_STATE_CANCELLED`.
         */
        endTime?: string | null;
        /**
         * Output only. Only populated when job's state is `JOB_STATE_FAILED` or `JOB_STATE_CANCELLED`.
         */
        error?: Schema$GoogleRpcStatus;
        /**
         * Required. Job spec.
         */
        jobSpec?: Schema$GoogleCloudAiplatformV1beta1CustomJobSpec;
        /**
         * The labels with user-defined metadata to organize CustomJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Output only. Resource name of a CustomJob.
         */
        name?: string | null;
        /**
         * Output only. Time when the CustomJob for the first time entered the `JOB_STATE_RUNNING` state.
         */
        startTime?: string | null;
        /**
         * Output only. The detailed state of the job.
         */
        state?: string | null;
        /**
         * Output only. Time when the CustomJob was most recently updated.
         */
        updateTime?: string | null;
        /**
         * Output only. URIs for accessing [interactive shells](https://cloud.google.com/vertex-ai/docs/training/monitor-debug-interactive-shell) (one URI for each training node). Only available if job_spec.enable_web_access is `true`. The keys are names of each node in the training job; for example, `workerpool0-0` for the primary node, `workerpool1-0` for the first node in the second worker pool, and `workerpool1-1` for the second node in the second worker pool. The values are the URIs for each node's interactive shell.
         */
        webAccessUris?: {
            [key: string]: string;
        } | null;
    }
    /**
     * Represents the spec of a CustomJob.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1CustomJobSpec {
        /**
         * The Cloud Storage location to store the output of this CustomJob or HyperparameterTuningJob. For HyperparameterTuningJob, the baseOutputDirectory of each child CustomJob backing a Trial is set to a subdirectory of name id under its parent HyperparameterTuningJob's baseOutputDirectory. The following Vertex AI environment variables will be passed to containers or python modules when this field is set: For CustomJob: * AIP_MODEL_DIR = `/model/` * AIP_CHECKPOINT_DIR = `/checkpoints/` * AIP_TENSORBOARD_LOG_DIR = `/logs/` For CustomJob backing a Trial of HyperparameterTuningJob: * AIP_MODEL_DIR = `//model/` * AIP_CHECKPOINT_DIR = `//checkpoints/` * AIP_TENSORBOARD_LOG_DIR = `//logs/`
         */
        baseOutputDirectory?: Schema$GoogleCloudAiplatformV1beta1GcsDestination;
        /**
         * Optional. Whether you want Vertex AI to enable access to the customized dashboard in training chief container. If set to `true`, you can access the dashboard at the URIs given by CustomJob.web_access_uris or Trial.web_access_uris (within HyperparameterTuningJob.trials).
         */
        enableDashboardAccess?: boolean | null;
        /**
         * Optional. Whether you want Vertex AI to enable [interactive shell access](https://cloud.google.com/vertex-ai/docs/training/monitor-debug-interactive-shell) to training containers. If set to `true`, you can access interactive shells at the URIs given by CustomJob.web_access_uris or Trial.web_access_uris (within HyperparameterTuningJob.trials).
         */
        enableWebAccess?: boolean | null;
        /**
         * Optional. The Experiment associated with this job. Format: `projects/{project\}/locations/{location\}/metadataStores/{metadataStores\}/contexts/{experiment-name\}`
         */
        experiment?: string | null;
        /**
         * Optional. The Experiment Run associated with this job. Format: `projects/{project\}/locations/{location\}/metadataStores/{metadataStores\}/contexts/{experiment-name\}-{experiment-run-name\}`
         */
        experimentRun?: string | null;
        /**
         * Optional. The name of the Model resources for which to generate a mapping to artifact URIs. Applicable only to some of the Google-provided custom jobs. Format: `projects/{project\}/locations/{location\}/models/{model\}` In order to retrieve a specific version of the model, also provide the version ID or version alias. Example: `projects/{project\}/locations/{location\}/models/{model\}@2` or `projects/{project\}/locations/{location\}/models/{model\}@golden` If no version ID or alias is specified, the "default" version will be returned. The "default" version alias is created for the first version of the model, and can be moved to other versions later on. There will be exactly one default version.
         */
        models?: string[] | null;
        /**
         * Optional. The full name of the Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the Job should be peered. For example, `projects/12345/global/networks/myVPC`. [Format](/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project\}/global/networks/{network\}`. Where {project\} is a project number, as in `12345`, and {network\} is a network name. To specify this field, you must have already [configured VPC Network Peering for Vertex AI](https://cloud.google.com/vertex-ai/docs/general/vpc-peering). If this field is left unspecified, the job is not peered with any network.
         */
        network?: string | null;
        /**
         * Optional. The ID of the PersistentResource in the same Project and Location which to run If this is specified, the job will be run on existing machines held by the PersistentResource instead of on-demand short-live machines. The network and CMEK configs on the job should be consistent with those on the PersistentResource, otherwise, the job will be rejected.
         */
        persistentResourceId?: string | null;
        /**
         * The ID of the location to store protected artifacts. e.g. us-central1. Populate only when the location is different than CustomJob location. List of supported locations: https://cloud.google.com/vertex-ai/docs/general/locations
         */
        protectedArtifactLocationId?: string | null;
        /**
         * Optional. A list of names for the reserved ip ranges under the VPC network that can be used for this job. If set, we will deploy the job within the provided ip ranges. Otherwise, the job will be deployed to any ip ranges under the provided VPC network. Example: ['vertex-ai-ip-range'].
         */
        reservedIpRanges?: string[] | null;
        /**
         * Scheduling options for a CustomJob.
         */
        scheduling?: Schema$GoogleCloudAiplatformV1beta1Scheduling;
        /**
         * Specifies the service account for workload run-as account. Users submitting jobs must have act-as permission on this run-as account. If unspecified, the [Vertex AI Custom Code Service Agent](https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents) for the CustomJob's project is used.
         */
        serviceAccount?: string | null;
        /**
         * Optional. The name of a Vertex AI Tensorboard resource to which this CustomJob will upload Tensorboard logs. Format: `projects/{project\}/locations/{location\}/tensorboards/{tensorboard\}`
         */
        tensorboard?: string | null;
        /**
         * Required. The spec of the worker pools including machine type and Docker image. All worker pools except the first one are optional and can be skipped by providing an empty value.
         */
        workerPoolSpecs?: Schema$GoogleCloudAiplatformV1beta1WorkerPoolSpec[];
    }
    /**
     * A piece of data in a Dataset. Could be an image, a video, a document or plain text.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DataItem {
        /**
         * Output only. Timestamp when this DataItem was created.
         */
        createTime?: string | null;
        /**
         * Optional. Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
         */
        etag?: string | null;
        /**
         * Optional. The labels with user-defined metadata to organize your DataItems. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one DataItem(System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Output only. The resource name of the DataItem.
         */
        name?: string | null;
        /**
         * Required. The data that the DataItem represents (for example, an image or a text snippet). The schema of the payload is stored in the parent Dataset's metadata schema's dataItemSchemaUri field.
         */
        payload?: any | null;
        /**
         * Output only. Timestamp when this DataItem was last updated.
         */
        updateTime?: string | null;
    }
    /**
     * A container for a single DataItem and Annotations on it.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DataItemView {
        /**
         * The Annotations on the DataItem. If too many Annotations should be returned for the DataItem, this field will be truncated per annotations_limit in request. If it was, then the has_truncated_annotations will be set to true.
         */
        annotations?: Schema$GoogleCloudAiplatformV1beta1Annotation[];
        /**
         * The DataItem.
         */
        dataItem?: Schema$GoogleCloudAiplatformV1beta1DataItem;
        /**
         * True if and only if the Annotations field has been truncated. It happens if more Annotations for this DataItem met the request's annotation_filter than are allowed to be returned by annotations_limit. Note that if Annotations field is not being returned due to field mask, then this field will not be set to true no matter how many Annotations are there.
         */
        hasTruncatedAnnotations?: boolean | null;
    }
    /**
     * DataLabelingJob is used to trigger a human labeling job on unlabeled data from the following Dataset:
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DataLabelingJob {
        /**
         * Parameters that configure the active learning pipeline. Active learning will label the data incrementally via several iterations. For every iteration, it will select a batch of data based on the sampling strategy.
         */
        activeLearningConfig?: Schema$GoogleCloudAiplatformV1beta1ActiveLearningConfig;
        /**
         * Labels to assign to annotations generated by this DataLabelingJob. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
         */
        annotationLabels?: {
            [key: string]: string;
        } | null;
        /**
         * Output only. Timestamp when this DataLabelingJob was created.
         */
        createTime?: string | null;
        /**
         * Output only. Estimated cost(in US dollars) that the DataLabelingJob has incurred to date.
         */
        currentSpend?: Schema$GoogleTypeMoney;
        /**
         * Required. Dataset resource names. Right now we only support labeling from a single Dataset. Format: `projects/{project\}/locations/{location\}/datasets/{dataset\}`
         */
        datasets?: string[] | null;
        /**
         * Required. The user-defined name of the DataLabelingJob. The name can be up to 128 characters long and can consist of any UTF-8 characters. Display name of a DataLabelingJob.
         */
        displayName?: string | null;
        /**
         * Customer-managed encryption key spec for a DataLabelingJob. If set, this DataLabelingJob will be secured by this key. Note: Annotations created in the DataLabelingJob are associated with the EncryptionSpec of the Dataset they are exported to.
         */
        encryptionSpec?: Schema$GoogleCloudAiplatformV1beta1EncryptionSpec;
        /**
         * Output only. DataLabelingJob errors. It is only populated when job's state is `JOB_STATE_FAILED` or `JOB_STATE_CANCELLED`.
         */
        error?: Schema$GoogleRpcStatus;
        /**
         * Required. Input config parameters for the DataLabelingJob.
         */
        inputs?: any | null;
        /**
         * Required. Points to a YAML file stored on Google Cloud Storage describing the config for a specific type of DataLabelingJob. The schema files that can be used here are found in the https://storage.googleapis.com/google-cloud-aiplatform bucket in the /schema/datalabelingjob/inputs/ folder.
         */
        inputsSchemaUri?: string | null;
        /**
         * Required. The Google Cloud Storage location of the instruction pdf. This pdf is shared with labelers, and provides detailed description on how to label DataItems in Datasets.
         */
        instructionUri?: string | null;
        /**
         * Required. Number of labelers to work on each DataItem.
         */
        labelerCount?: number | null;
        /**
         * Output only. Current labeling job progress percentage scaled in interval [0, 100], indicating the percentage of DataItems that has been finished.
         */
        labelingProgress?: number | null;
        /**
         * The labels with user-defined metadata to organize your DataLabelingJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable. Following system labels exist for each DataLabelingJob: * "aiplatform.googleapis.com/schema": output only, its value is the inputs_schema's title.
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Output only. Resource name of the DataLabelingJob.
         */
        name?: string | null;
        /**
         * The SpecialistPools' resource names associated with this job.
         */
        specialistPools?: string[] | null;
        /**
         * Output only. The detailed state of the job.
         */
        state?: string | null;
        /**
         * Output only. Timestamp when this DataLabelingJob was updated most recently.
         */
        updateTime?: string | null;
    }
    /**
     * A collection of DataItems and Annotations on them.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1Dataset {
        /**
         * Output only. Timestamp when this Dataset was created.
         */
        createTime?: string | null;
        /**
         * Output only. The number of DataItems in this Dataset. Only apply for non-structured Dataset.
         */
        dataItemCount?: string | null;
        /**
         * The description of the Dataset.
         */
        description?: string | null;
        /**
         * Required. The user-defined name of the Dataset. The name can be up to 128 characters long and can consist of any UTF-8 characters.
         */
        displayName?: string | null;
        /**
         * Customer-managed encryption key spec for a Dataset. If set, this Dataset and all sub-resources of this Dataset will be secured by this key.
         */
        encryptionSpec?: Schema$GoogleCloudAiplatformV1beta1EncryptionSpec;
        /**
         * Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
         */
        etag?: string | null;
        /**
         * The labels with user-defined metadata to organize your Datasets. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Dataset (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable. Following system labels exist for each Dataset: * "aiplatform.googleapis.com/dataset_metadata_schema": output only, its value is the metadata_schema's title.
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Required. Additional information about the Dataset.
         */
        metadata?: any | null;
        /**
         * Output only. The resource name of the Artifact that was created in MetadataStore when creating the Dataset. The Artifact resource name pattern is `projects/{project\}/locations/{location\}/metadataStores/{metadata_store\}/artifacts/{artifact\}`.
         */
        metadataArtifact?: string | null;
        /**
         * Required. Points to a YAML file stored on Google Cloud Storage describing additional information about the Dataset. The schema is defined as an OpenAPI 3.0.2 Schema Object. The schema files that can be used here are found in gs://google-cloud-aiplatform/schema/dataset/metadata/.
         */
        metadataSchemaUri?: string | null;
        /**
         * Output only. The resource name of the Dataset.
         */
        name?: string | null;
        /**
         * All SavedQueries belong to the Dataset will be returned in List/Get Dataset response. The annotation_specs field will not be populated except for UI cases which will only use annotation_spec_count. In CreateDataset request, a SavedQuery is created together if this field is set, up to one SavedQuery can be set in CreateDatasetRequest. The SavedQuery should not contain any AnnotationSpec.
         */
        savedQueries?: Schema$GoogleCloudAiplatformV1beta1SavedQuery[];
        /**
         * Output only. Timestamp when this Dataset was last updated.
         */
        updateTime?: string | null;
    }
    /**
     * Describes the dataset version.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DatasetVersion {
        /**
         * Output only. Name of the associated BigQuery dataset.
         */
        bigQueryDatasetName?: string | null;
        /**
         * Output only. Timestamp when this DatasetVersion was created.
         */
        createTime?: string | null;
        /**
         * The user-defined name of the DatasetVersion. The name can be up to 128 characters long and can consist of any UTF-8 characters.
         */
        displayName?: string | null;
        /**
         * Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
         */
        etag?: string | null;
        /**
         * Required. Additional information about the DatasetVersion.
         */
        metadata?: any | null;
        /**
         * Output only. The resource name of the DatasetVersion.
         */
        name?: string | null;
        /**
         * Output only. Timestamp when this DatasetVersion was last updated.
         */
        updateTime?: string | null;
    }
    /**
     * A description of resources that are dedicated to a DeployedModel, and that need a higher degree of manual configuration.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DedicatedResources {
        /**
         * Immutable. The metric specifications that overrides a resource utilization metric (CPU utilization, accelerator's duty cycle, and so on) target value (default to 60 if not set). At most one entry is allowed per metric. If machine_spec.accelerator_count is above 0, the autoscaling will be based on both CPU utilization and accelerator's duty cycle metrics and scale up when either metrics exceeds its target value while scale down if both metrics are under their target value. The default target value is 60 for both metrics. If machine_spec.accelerator_count is 0, the autoscaling will be based on CPU utilization metric only with default target value 60 if not explicitly set. For example, in the case of Online Prediction, if you want to override target CPU utilization to 80, you should set autoscaling_metric_specs.metric_name to `aiplatform.googleapis.com/prediction/online/cpu/utilization` and autoscaling_metric_specs.target to `80`.
         */
        autoscalingMetricSpecs?: Schema$GoogleCloudAiplatformV1beta1AutoscalingMetricSpec[];
        /**
         * Required. Immutable. The specification of a single machine used by the prediction.
         */
        machineSpec?: Schema$GoogleCloudAiplatformV1beta1MachineSpec;
        /**
         * Immutable. The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, will use min_replica_count as the default value. The value of this field impacts the charge against Vertex CPU and GPU quotas. Specifically, you will be charged for (max_replica_count * number of cores in the selected machine type) and (max_replica_count * number of GPUs per replica in the selected machine type).
         */
        maxReplicaCount?: number | null;
        /**
         * Required. Immutable. The minimum number of machine replicas this DeployedModel will be always deployed on. This value must be greater than or equal to 1. If traffic against the DeployedModel increases, it may dynamically be deployed onto more replicas, and as traffic decreases, some of these extra replicas may be freed.
         */
        minReplicaCount?: number | null;
    }
    /**
     * Details of operations that delete Feature values.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DeleteFeatureValuesOperationMetadata {
        /**
         * Operation metadata for Featurestore delete Features values.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Request message for FeaturestoreService.DeleteFeatureValues.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DeleteFeatureValuesRequest {
        /**
         * Select feature values to be deleted by specifying entities.
         */
        selectEntity?: Schema$GoogleCloudAiplatformV1beta1DeleteFeatureValuesRequestSelectEntity;
        /**
         * Select feature values to be deleted by specifying time range and features.
         */
        selectTimeRangeAndFeature?: Schema$GoogleCloudAiplatformV1beta1DeleteFeatureValuesRequestSelectTimeRangeAndFeature;
    }
    /**
     * Message to select entity. If an entity id is selected, all the feature values corresponding to the entity id will be deleted, including the entityId.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DeleteFeatureValuesRequestSelectEntity {
        /**
         * Required. Selectors choosing feature values of which entity id to be deleted from the EntityType.
         */
        entityIdSelector?: Schema$GoogleCloudAiplatformV1beta1EntityIdSelector;
    }
    /**
     * Message to select time range and feature. Values of the selected feature generated within an inclusive time range will be deleted. Using this option permanently deletes the feature values from the specified feature IDs within the specified time range. This might include data from the online storage. If you want to retain any deleted historical data in the online storage, you must re-ingest it.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DeleteFeatureValuesRequestSelectTimeRangeAndFeature {
        /**
         * Required. Selectors choosing which feature values to be deleted from the EntityType.
         */
        featureSelector?: Schema$GoogleCloudAiplatformV1beta1FeatureSelector;
        /**
         * If set, data will not be deleted from online storage. When time range is older than the data in online storage, setting this to be true will make the deletion have no impact on online serving.
         */
        skipOnlineStorageDelete?: boolean | null;
        /**
         * Required. Select feature generated within a half-inclusive time range. The time range is lower inclusive and upper exclusive.
         */
        timeRange?: Schema$GoogleTypeInterval;
    }
    /**
     * Response message for FeaturestoreService.DeleteFeatureValues.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DeleteFeatureValuesResponse {
        /**
         * Response for request specifying the entities to delete
         */
        selectEntity?: Schema$GoogleCloudAiplatformV1beta1DeleteFeatureValuesResponseSelectEntity;
        /**
         * Response for request specifying time range and feature
         */
        selectTimeRangeAndFeature?: Schema$GoogleCloudAiplatformV1beta1DeleteFeatureValuesResponseSelectTimeRangeAndFeature;
    }
    /**
     * Response message if the request uses the SelectEntity option.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DeleteFeatureValuesResponseSelectEntity {
        /**
         * The count of deleted entity rows in the offline storage. Each row corresponds to the combination of an entity ID and a timestamp. One entity ID can have multiple rows in the offline storage.
         */
        offlineStorageDeletedEntityRowCount?: string | null;
        /**
         * The count of deleted entities in the online storage. Each entity ID corresponds to one entity.
         */
        onlineStorageDeletedEntityCount?: string | null;
    }
    /**
     * Response message if the request uses the SelectTimeRangeAndFeature option.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DeleteFeatureValuesResponseSelectTimeRangeAndFeature {
        /**
         * The count of the features or columns impacted. This is the same as the feature count in the request.
         */
        impactedFeatureCount?: string | null;
        /**
         * The count of modified entity rows in the offline storage. Each row corresponds to the combination of an entity ID and a timestamp. One entity ID can have multiple rows in the offline storage. Within each row, only the features specified in the request are deleted.
         */
        offlineStorageModifiedEntityRowCount?: string | null;
        /**
         * The count of modified entities in the online storage. Each entity ID corresponds to one entity. Within each entity, only the features specified in the request are deleted.
         */
        onlineStorageModifiedEntityCount?: string | null;
    }
    /**
     * Details of operations that perform MetadataService.DeleteMetadataStore.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DeleteMetadataStoreOperationMetadata {
        /**
         * Operation metadata for deleting a MetadataStore.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Details of operations that perform deletes of any entities.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DeleteOperationMetadata {
        /**
         * The common part of the operation metadata.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * A deployment of an Index. IndexEndpoints contain one or more DeployedIndexes.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DeployedIndex {
        /**
         * Optional. A description of resources that the DeployedIndex uses, which to large degree are decided by Vertex AI, and optionally allows only a modest additional configuration. If min_replica_count is not set, the default value is 2 (we don't provide SLA when min_replica_count=1). If max_replica_count is not set, the default value is min_replica_count. The max allowed replica count is 1000.
         */
        automaticResources?: Schema$GoogleCloudAiplatformV1beta1AutomaticResources;
        /**
         * Output only. Timestamp when the DeployedIndex was created.
         */
        createTime?: string | null;
        /**
         * Optional. A description of resources that are dedicated to the DeployedIndex, and that need a higher degree of manual configuration. The field min_replica_count must be set to a value strictly greater than 0, or else validation will fail. We don't provide SLA when min_replica_count=1. If max_replica_count is not set, the default value is min_replica_count. The max allowed replica count is 1000. Available machine types for SMALL shard: e2-standard-2 and all machine types available for MEDIUM and LARGE shard. Available machine types for MEDIUM shard: e2-standard-16 and all machine types available for LARGE shard. Available machine types for LARGE shard: e2-highmem-16, n2d-standard-32. n1-standard-16 and n1-standard-32 are still available, but we recommend e2-standard-16 and e2-highmem-16 for cost efficiency.
         */
        dedicatedResources?: Schema$GoogleCloudAiplatformV1beta1DedicatedResources;
        /**
         * Optional. If set, the authentication is enabled for the private endpoint.
         */
        deployedIndexAuthConfig?: Schema$GoogleCloudAiplatformV1beta1DeployedIndexAuthConfig;
        /**
         * Optional. The deployment group can be no longer than 64 characters (eg: 'test', 'prod'). If not set, we will use the 'default' deployment group. Creating `deployment_groups` with `reserved_ip_ranges` is a recommended practice when the peered network has multiple peering ranges. This creates your deployments from predictable IP spaces for easier traffic administration. Also, one deployment_group (except 'default') can only be used with the same reserved_ip_ranges which means if the deployment_group has been used with reserved_ip_ranges: [a, b, c], using it with [a, b] or [d, e] is disallowed. Note: we only support up to 5 deployment groups(not including 'default').
         */
        deploymentGroup?: string | null;
        /**
         * The display name of the DeployedIndex. If not provided upon creation, the Index's display_name is used.
         */
        displayName?: string | null;
        /**
         * Optional. If true, private endpoint's access logs are sent to Cloud Logging. These logs are like standard server access logs, containing information like timestamp and latency for each MatchRequest. Note that logs may incur a cost, especially if the deployed index receives a high queries per second rate (QPS). Estimate your costs before enabling this option.
         */
        enableAccessLogging?: boolean | null;
        /**
         * Required. The user specified ID of the DeployedIndex. The ID can be up to 128 characters long and must start with a letter and only contain letters, numbers, and underscores. The ID must be unique within the project it is created in.
         */
        id?: string | null;
        /**
         * Required. The name of the Index this is the deployment of. We may refer to this Index as the DeployedIndex's "original" Index.
         */
        index?: string | null;
        /**
         * Output only. The DeployedIndex may depend on various data on its original Index. Additionally when certain changes to the original Index are being done (e.g. when what the Index contains is being changed) the DeployedIndex may be asynchronously updated in the background to reflect these changes. If this timestamp's value is at least the Index.update_time of the original Index, it means that this DeployedIndex and the original Index are in sync. If this timestamp is older, then to see which updates this DeployedIndex already contains (and which it does not), one must list the operations that are running on the original Index. Only the successfully completed Operations with update_time equal or before this sync time are contained in this DeployedIndex.
         */
        indexSyncTime?: string | null;
        /**
         * Output only. Provides paths for users to send requests directly to the deployed index services running on Cloud via private services access. This field is populated if network is configured.
         */
        privateEndpoints?: Schema$GoogleCloudAiplatformV1beta1IndexPrivateEndpoints;
        /**
         * Optional. A list of reserved ip ranges under the VPC network that can be used for this DeployedIndex. If set, we will deploy the index within the provided ip ranges. Otherwise, the index might be deployed to any ip ranges under the provided VPC network. The value should be the name of the address (https://cloud.google.com/compute/docs/reference/rest/v1/addresses) Example: ['vertex-ai-ip-range']. For more information about subnets and network IP ranges, please see https://cloud.google.com/vpc/docs/subnets#manually_created_subnet_ip_ranges.
         */
        reservedIpRanges?: string[] | null;
    }
    /**
     * Used to set up the auth on the DeployedIndex's private endpoint.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DeployedIndexAuthConfig {
        /**
         * Defines the authentication provider that the DeployedIndex uses.
         */
        authProvider?: Schema$GoogleCloudAiplatformV1beta1DeployedIndexAuthConfigAuthProvider;
    }
    /**
     * Configuration for an authentication provider, including support for [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DeployedIndexAuthConfigAuthProvider {
        /**
         * A list of allowed JWT issuers. Each entry must be a valid Google service account, in the following format: `service-account-name@project-id.iam.gserviceaccount.com`
         */
        allowedIssuers?: string[] | null;
        /**
         * The list of JWT [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted.
         */
        audiences?: string[] | null;
    }
    /**
     * Points to a DeployedIndex.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DeployedIndexRef {
        /**
         * Immutable. The ID of the DeployedIndex in the above IndexEndpoint.
         */
        deployedIndexId?: string | null;
        /**
         * Output only. The display name of the DeployedIndex.
         */
        displayName?: string | null;
        /**
         * Immutable. A resource name of the IndexEndpoint.
         */
        indexEndpoint?: string | null;
    }
    /**
     * A deployment of a Model. Endpoints contain one or more DeployedModels.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DeployedModel {
        /**
         * A description of resources that to large degree are decided by Vertex AI, and require only a modest additional configuration.
         */
        automaticResources?: Schema$GoogleCloudAiplatformV1beta1AutomaticResources;
        /**
         * Output only. Timestamp when the DeployedModel was created.
         */
        createTime?: string | null;
        /**
         * A description of resources that are dedicated to the DeployedModel, and that need a higher degree of manual configuration.
         */
        dedicatedResources?: Schema$GoogleCloudAiplatformV1beta1DedicatedResources;
        /**
         * If true, deploy the model without explainable feature, regardless the existence of Model.explanation_spec or explanation_spec.
         */
        disableExplanations?: boolean | null;
        /**
         * The display name of the DeployedModel. If not provided upon creation, the Model's display_name is used.
         */
        displayName?: string | null;
        /**
         * If true, online prediction access logs are sent to Cloud Logging. These logs are like standard server access logs, containing information like timestamp and latency for each prediction request. Note that logs may incur a cost, especially if your project receives prediction requests at a high queries per second rate (QPS). Estimate your costs before enabling this option.
         */
        enableAccessLogging?: boolean | null;
        /**
         * If true, the container of the DeployedModel instances will send `stderr` and `stdout` streams to Cloud Logging. Only supported for custom-trained Models and AutoML Tabular Models.
         */
        enableContainerLogging?: boolean | null;
        /**
         * Explanation configuration for this DeployedModel. When deploying a Model using EndpointService.DeployModel, this value overrides the value of Model.explanation_spec. All fields of explanation_spec are optional in the request. If a field of explanation_spec is not populated, the value of the same field of Model.explanation_spec is inherited. If the corresponding Model.explanation_spec is not populated, all fields of the explanation_spec will be used for the explanation configuration.
         */
        explanationSpec?: Schema$GoogleCloudAiplatformV1beta1ExplanationSpec;
        /**
         * Immutable. The ID of the DeployedModel. If not provided upon deployment, Vertex AI will generate a value for this ID. This value should be 1-10 characters, and valid characters are `/[0-9]/`.
         */
        id?: string | null;
        /**
         * Required. The resource name of the Model that this is the deployment of. Note that the Model may be in a different location than the DeployedModel's Endpoint. The resource name may contain version id or version alias to specify the version. Example: `projects/{project\}/locations/{location\}/models/{model\}@2` or `projects/{project\}/locations/{location\}/models/{model\}@golden` if no version is specified, the default version will be deployed.
         */
        model?: string | null;
        /**
         * Output only. The version ID of the model that is deployed.
         */
        modelVersionId?: string | null;
        /**
         * Output only. Provide paths for users to send predict/explain/health requests directly to the deployed model services running on Cloud via private services access. This field is populated if network is configured.
         */
        privateEndpoints?: Schema$GoogleCloudAiplatformV1beta1PrivateEndpoints;
        /**
         * The service account that the DeployedModel's container runs as. Specify the email address of the service account. If this service account is not specified, the container runs as a service account that doesn't have access to the resource project. Users deploying the Model must have the `iam.serviceAccounts.actAs` permission on this service account.
         */
        serviceAccount?: string | null;
        /**
         * The resource name of the shared DeploymentResourcePool to deploy on. Format: `projects/{project\}/locations/{location\}/deploymentResourcePools/{deployment_resource_pool\}`
         */
        sharedResources?: string | null;
    }
    /**
     * Points to a DeployedModel.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DeployedModelRef {
        /**
         * Immutable. An ID of a DeployedModel in the above Endpoint.
         */
        deployedModelId?: string | null;
        /**
         * Immutable. A resource name of an Endpoint.
         */
        endpoint?: string | null;
    }
    /**
     * Runtime operation information for IndexEndpointService.DeployIndex.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DeployIndexOperationMetadata {
        /**
         * The unique index id specified by user
         */
        deployedIndexId?: string | null;
        /**
         * The operation generic information.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Request message for IndexEndpointService.DeployIndex.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DeployIndexRequest {
        /**
         * Required. The DeployedIndex to be created within the IndexEndpoint.
         */
        deployedIndex?: Schema$GoogleCloudAiplatformV1beta1DeployedIndex;
    }
    /**
     * Response message for IndexEndpointService.DeployIndex.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DeployIndexResponse {
        /**
         * The DeployedIndex that had been deployed in the IndexEndpoint.
         */
        deployedIndex?: Schema$GoogleCloudAiplatformV1beta1DeployedIndex;
    }
    /**
     * A description of resources that can be shared by multiple DeployedModels, whose underlying specification consists of a DedicatedResources.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DeploymentResourcePool {
        /**
         * Output only. Timestamp when this DeploymentResourcePool was created.
         */
        createTime?: string | null;
        /**
         * Required. The underlying DedicatedResources that the DeploymentResourcePool uses.
         */
        dedicatedResources?: Schema$GoogleCloudAiplatformV1beta1DedicatedResources;
        /**
         * Immutable. The resource name of the DeploymentResourcePool. Format: `projects/{project\}/locations/{location\}/deploymentResourcePools/{deployment_resource_pool\}`
         */
        name?: string | null;
    }
    /**
     * Runtime operation information for EndpointService.DeployModel.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DeployModelOperationMetadata {
        /**
         * The operation generic information.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Request message for EndpointService.DeployModel.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DeployModelRequest {
        /**
         * Required. The DeployedModel to be created within the Endpoint. Note that Endpoint.traffic_split must be updated for the DeployedModel to start receiving traffic, either as part of this call, or via EndpointService.UpdateEndpoint.
         */
        deployedModel?: Schema$GoogleCloudAiplatformV1beta1DeployedModel;
        /**
         * A map from a DeployedModel's ID to the percentage of this Endpoint's traffic that should be forwarded to that DeployedModel. If this field is non-empty, then the Endpoint's traffic_split will be overwritten with it. To refer to the ID of the just being deployed Model, a "0" should be used, and the actual ID of the new DeployedModel will be filled in its place by this method. The traffic percentage values must add up to 100. If this field is empty, then the Endpoint's traffic_split is not updated.
         */
        trafficSplit?: {
            [key: string]: number;
        } | null;
    }
    /**
     * Response message for EndpointService.DeployModel.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DeployModelResponse {
        /**
         * The DeployedModel that had been deployed in the Endpoint.
         */
        deployedModel?: Schema$GoogleCloudAiplatformV1beta1DeployedModel;
    }
    /**
     * Runtime operation information for SolverService.DeploySolver.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DeploySolverOperationMetadata {
        /**
         * The generic operation information.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    export interface Schema$GoogleCloudAiplatformV1beta1DestinationFeatureSetting {
        /**
         * Specify the field name in the export destination. If not specified, Feature ID is used.
         */
        destinationField?: string | null;
        /**
         * Required. The ID of the Feature to apply the setting to.
         */
        featureId?: string | null;
    }
    /**
     * Request message for PredictionService.DirectPredict.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DirectPredictRequest {
        /**
         * The prediction input.
         */
        inputs?: Schema$GoogleCloudAiplatformV1beta1Tensor[];
        /**
         * The parameters that govern the prediction.
         */
        parameters?: Schema$GoogleCloudAiplatformV1beta1Tensor;
    }
    /**
     * Response message for PredictionService.DirectPredict.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DirectPredictResponse {
        /**
         * The prediction output.
         */
        outputs?: Schema$GoogleCloudAiplatformV1beta1Tensor[];
        /**
         * The parameters that govern the prediction.
         */
        parameters?: Schema$GoogleCloudAiplatformV1beta1Tensor;
    }
    /**
     * Request message for PredictionService.DirectRawPredict.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DirectRawPredictRequest {
        /**
         * The prediction input.
         */
        input?: string | null;
        /**
         * Fully qualified name of the API method being invoked to perform predictions. Format: `/namespace.Service/Method/` Example: `/tensorflow.serving.PredictionService/Predict`
         */
        methodName?: string | null;
    }
    /**
     * Response message for PredictionService.DirectRawPredict.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DirectRawPredictResponse {
        /**
         * The prediction output.
         */
        output?: string | null;
    }
    /**
     * Represents the spec of disk options.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DiskSpec {
        /**
         * Size in GB of the boot disk (default is 100GB).
         */
        bootDiskSizeGb?: number | null;
        /**
         * Type of the boot disk (default is "pd-ssd"). Valid values: "pd-ssd" (Persistent Disk Solid State Drive) or "pd-standard" (Persistent Disk Hard Disk Drive).
         */
        bootDiskType?: string | null;
    }
    /**
     * A list of double values.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1DoubleArray {
        /**
         * A list of double values.
         */
        values?: number[] | null;
    }
    /**
     * Represents a customer-managed encryption key spec that can be applied to a top-level resource.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1EncryptionSpec {
        /**
         * Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created.
         */
        kmsKeyName?: string | null;
    }
    /**
     * Models are deployed into it, and afterwards Endpoint is called to obtain predictions and explanations.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1Endpoint {
        /**
         * Output only. Timestamp when this Endpoint was created.
         */
        createTime?: string | null;
        /**
         * Output only. The models deployed in this Endpoint. To add or remove DeployedModels use EndpointService.DeployModel and EndpointService.UndeployModel respectively.
         */
        deployedModels?: Schema$GoogleCloudAiplatformV1beta1DeployedModel[];
        /**
         * The description of the Endpoint.
         */
        description?: string | null;
        /**
         * Required. The display name of the Endpoint. The name can be up to 128 characters long and can consist of any UTF-8 characters.
         */
        displayName?: string | null;
        /**
         * Deprecated: If true, expose the Endpoint via private service connect. Only one of the fields, network or enable_private_service_connect, can be set.
         */
        enablePrivateServiceConnect?: boolean | null;
        /**
         * Customer-managed encryption key spec for an Endpoint. If set, this Endpoint and all sub-resources of this Endpoint will be secured by this key.
         */
        encryptionSpec?: Schema$GoogleCloudAiplatformV1beta1EncryptionSpec;
        /**
         * Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
         */
        etag?: string | null;
        /**
         * The labels with user-defined metadata to organize your Endpoints. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Output only. Resource name of the Model Monitoring job associated with this Endpoint if monitoring is enabled by JobService.CreateModelDeploymentMonitoringJob. Format: `projects/{project\}/locations/{location\}/modelDeploymentMonitoringJobs/{model_deployment_monitoring_job\}`
         */
        modelDeploymentMonitoringJob?: string | null;
        /**
         * Output only. The resource name of the Endpoint.
         */
        name?: string | null;
        /**
         * Optional. The full name of the Google Compute Engine [network](https://cloud.google.com//compute/docs/networks-and-firewalls#networks) to which the Endpoint should be peered. Private services access must already be configured for the network. If left unspecified, the Endpoint is not peered with any network. Only one of the fields, network or enable_private_service_connect, can be set. [Format](https://cloud.google.com/compute/docs/reference/rest/v1/networks/insert): `projects/{project\}/global/networks/{network\}`. Where `{project\}` is a project number, as in `12345`, and `{network\}` is network name.
         */
        network?: string | null;
        /**
         * Configures the request-response logging for online prediction.
         */
        predictRequestResponseLoggingConfig?: Schema$GoogleCloudAiplatformV1beta1PredictRequestResponseLoggingConfig;
        /**
         * Optional. Configuration for private service connect. network and private_service_connect_config are mutually exclusive.
         */
        privateServiceConnectConfig?: Schema$GoogleCloudAiplatformV1beta1PrivateServiceConnectConfig;
        /**
         * A map from a DeployedModel's ID to the percentage of this Endpoint's traffic that should be forwarded to that DeployedModel. If a DeployedModel's ID is not listed in this map, then it receives no traffic. The traffic percentage values must add up to 100, or map must be empty if the Endpoint is to not accept any traffic at a moment.
         */
        trafficSplit?: {
            [key: string]: number;
        } | null;
        /**
         * Output only. Timestamp when this Endpoint was last updated.
         */
        updateTime?: string | null;
    }
    /**
     * Selector for entityId. Getting ids from the given source.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1EntityIdSelector {
        /**
         * Source of Csv
         */
        csvSource?: Schema$GoogleCloudAiplatformV1beta1CsvSource;
        /**
         * Source column that holds entity IDs. If not provided, entity IDs are extracted from the column named entity_id.
         */
        entityIdField?: string | null;
    }
    /**
     * An entity type is a type of object in a system that needs to be modeled and have stored information about. For example, driver is an entity type, and driver0 is an instance of an entity type driver.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1EntityType {
        /**
         * Output only. Timestamp when this EntityType was created.
         */
        createTime?: string | null;
        /**
         * Optional. Description of the EntityType.
         */
        description?: string | null;
        /**
         * Optional. Used to perform a consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
         */
        etag?: string | null;
        /**
         * Optional. The labels with user-defined metadata to organize your EntityTypes. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one EntityType (System labels are excluded)." System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Optional. The default monitoring configuration for all Features with value type (Feature.ValueType) BOOL, STRING, DOUBLE or INT64 under this EntityType. If this is populated with [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring is disabled.
         */
        monitoringConfig?: Schema$GoogleCloudAiplatformV1beta1FeaturestoreMonitoringConfig;
        /**
         * Immutable. Name of the EntityType. Format: `projects/{project\}/locations/{location\}/featurestores/{featurestore\}/entityTypes/{entity_type\}` The last part entity_type is assigned by the client. The entity_type can be up to 64 characters long and can consist only of ASCII Latin letters A-Z and a-z and underscore(_), and ASCII digits 0-9 starting with a letter. The value will be unique given a featurestore.
         */
        name?: string | null;
        /**
         * Optional. Config for data retention policy in offline storage. TTL in days for feature values that will be stored in offline storage. The Feature Store offline storage periodically removes obsolete feature values older than `offline_storage_ttl_days` since the feature generation time. If unset (or explicitly set to 0), default to 4000 days TTL.
         */
        offlineStorageTtlDays?: number | null;
        /**
         * Output only. Timestamp when this EntityType was most recently updated.
         */
        updateTime?: string | null;
    }
    /**
     * Represents an environment variable present in a Container or Python Module.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1EnvVar {
        /**
         * Required. Name of the environment variable. Must be a valid C identifier.
         */
        name?: string | null;
        /**
         * Required. Variables that reference a $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not.
         */
        value?: string | null;
    }
    /**
     * Model error analysis for each annotation.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation {
        /**
         * Attributed items for a given annotation, typically representing neighbors from the training sets constrained by the query type.
         */
        attributedItems?: Schema$GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotationAttributedItem[];
        /**
         * The outlier score of this annotated item. Usually defined as the min of all distances from attributed items.
         */
        outlierScore?: number | null;
        /**
         * The threshold used to determine if this annotation is an outlier or not.
         */
        outlierThreshold?: number | null;
        /**
         * The query type used for finding the attributed items.
         */
        queryType?: string | null;
    }
    /**
     * Attributed items for a given annotation, typically representing neighbors from the training sets constrained by the query type.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotationAttributedItem {
        /**
         * The unique ID for each annotation. Used by FE to allocate the annotation in DB.
         */
        annotationResourceName?: string | null;
        /**
         * The distance of this item to the annotation.
         */
        distance?: number | null;
    }
    /**
     * True positive, false positive, or false negative. EvaluatedAnnotation is only available under ModelEvaluationSlice with slice of `annotationSpec` dimension.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1EvaluatedAnnotation {
        /**
         * Output only. The data item payload that the Model predicted this EvaluatedAnnotation on.
         */
        dataItemPayload?: any | null;
        /**
         * Annotations of model error analysis results.
         */
        errorAnalysisAnnotations?: Schema$GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation[];
        /**
         * Output only. ID of the EvaluatedDataItemView under the same ancestor ModelEvaluation. The EvaluatedDataItemView consists of all ground truths and predictions on data_item_payload.
         */
        evaluatedDataItemViewId?: string | null;
        /**
         * Explanations of predictions. Each element of the explanations indicates the explanation for one explanation Method. The attributions list in the EvaluatedAnnotationExplanation.explanation object corresponds to the predictions list. For example, the second element in the attributions list explains the second element in the predictions list.
         */
        explanations?: Schema$GoogleCloudAiplatformV1beta1EvaluatedAnnotationExplanation[];
        /**
         * Output only. The ground truth Annotations, i.e. the Annotations that exist in the test data the Model is evaluated on. For true positive, there is one and only one ground truth annotation, which matches the only prediction in predictions. For false positive, there are zero or more ground truth annotations that are similar to the only prediction in predictions, but not enough for a match. For false negative, there is one and only one ground truth annotation, which doesn't match any predictions created by the model. The schema of the ground truth is stored in ModelEvaluation.annotation_schema_uri
         */
        groundTruths?: any[] | null;
        /**
         * Output only. The model predicted annotations. For true positive, there is one and only one prediction, which matches the only one ground truth annotation in ground_truths. For false positive, there is one and only one prediction, which doesn't match any ground truth annotation of the corresponding data_item_view_id. For false negative, there are zero or more predictions which are similar to the only ground truth annotation in ground_truths but not enough for a match. The schema of the prediction is stored in ModelEvaluation.annotation_schema_uri
         */
        predictions?: any[] | null;
        /**
         * Output only. Type of the EvaluatedAnnotation.
         */
        type?: string | null;
    }
    /**
     * Explanation result of the prediction produced by the Model.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1EvaluatedAnnotationExplanation {
        /**
         * Explanation attribution response details.
         */
        explanation?: Schema$GoogleCloudAiplatformV1beta1Explanation;
        /**
         * Explanation type. For AutoML Image Classification models, possible values are: * `image-integrated-gradients` * `image-xrai`
         */
        explanationType?: string | null;
    }
    /**
     * An edge describing the relationship between an Artifact and an Execution in a lineage graph.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1Event {
        /**
         * Required. The relative resource name of the Artifact in the Event.
         */
        artifact?: string | null;
        /**
         * Output only. Time the Event occurred.
         */
        eventTime?: string | null;
        /**
         * Output only. The relative resource name of the Execution in the Event.
         */
        execution?: string | null;
        /**
         * The labels with user-defined metadata to annotate Events. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Event (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Required. The type of the Event.
         */
        type?: string | null;
    }
    /**
     * Example-based explainability that returns the nearest neighbors from the provided dataset.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1Examples {
        /**
         * The Cloud Storage input instances.
         */
        exampleGcsSource?: Schema$GoogleCloudAiplatformV1beta1ExamplesExampleGcsSource;
        /**
         * The Cloud Storage locations that contain the instances to be indexed for approximate nearest neighbor search.
         */
        gcsSource?: Schema$GoogleCloudAiplatformV1beta1GcsSource;
        /**
         * The full configuration for the generated index, the semantics are the same as metadata and should match [NearestNeighborSearchConfig](https://cloud.google.com/vertex-ai/docs/explainable-ai/configuring-explanations-example-based#nearest-neighbor-search-config).
         */
        nearestNeighborSearchConfig?: any | null;
        /**
         * The number of neighbors to return when querying for examples.
         */
        neighborCount?: number | null;
        /**
         * Simplified preset configuration, which automatically sets configuration values based on the desired query speed-precision trade-off and modality.
         */
        presets?: Schema$GoogleCloudAiplatformV1beta1Presets;
    }
    /**
     * The Cloud Storage input instances.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExamplesExampleGcsSource {
        /**
         * The format in which instances are given, if not specified, assume it's JSONL format. Currently only JSONL format is supported.
         */
        dataFormat?: string | null;
        /**
         * The Cloud Storage location for the input instances.
         */
        gcsSource?: Schema$GoogleCloudAiplatformV1beta1GcsSource;
    }
    /**
     * Overrides for example-based explanations.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExamplesOverride {
        /**
         * The number of neighbors to return that have the same crowding tag.
         */
        crowdingCount?: number | null;
        /**
         * The format of the data being provided with each call.
         */
        dataFormat?: string | null;
        /**
         * The number of neighbors to return.
         */
        neighborCount?: number | null;
        /**
         * Restrict the resulting nearest neighbors to respect these constraints.
         */
        restrictions?: Schema$GoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace[];
        /**
         * If true, return the embeddings instead of neighbors.
         */
        returnEmbeddings?: boolean | null;
    }
    /**
     * Restrictions namespace for example-based explanations overrides.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace {
        /**
         * The list of allowed tags.
         */
        allow?: string[] | null;
        /**
         * The list of deny tags.
         */
        deny?: string[] | null;
        /**
         * The namespace name.
         */
        namespaceName?: string | null;
    }
    /**
     * Instance of a general execution.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1Execution {
        /**
         * Output only. Timestamp when this Execution was created.
         */
        createTime?: string | null;
        /**
         * Description of the Execution
         */
        description?: string | null;
        /**
         * User provided display name of the Execution. May be up to 128 Unicode characters.
         */
        displayName?: string | null;
        /**
         * An eTag used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
         */
        etag?: string | null;
        /**
         * The labels with user-defined metadata to organize your Executions. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Execution (System labels are excluded).
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Properties of the Execution. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.
         */
        metadata?: {
            [key: string]: any;
        } | null;
        /**
         * Output only. The resource name of the Execution.
         */
        name?: string | null;
        /**
         * The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
         */
        schemaTitle?: string | null;
        /**
         * The version of the schema in `schema_title` to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
         */
        schemaVersion?: string | null;
        /**
         * The state of this Execution. This is a property of the Execution, and does not imply or capture any ongoing process. This property is managed by clients (such as Vertex AI Pipelines) and the system does not prescribe or check the validity of state transitions.
         */
        state?: string | null;
        /**
         * Output only. Timestamp when this Execution was last updated.
         */
        updateTime?: string | null;
    }
    /**
     * Request message for PredictionService.Explain.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExplainRequest {
        /**
         * Optional. This field is the same as the one above, but supports multiple explanations to occur in parallel. The key can be any string. Each override will be run against the model, then its explanations will be grouped together. Note - these explanations are run **In Addition** to the default Explanation in the deployed model.
         */
        concurrentExplanationSpecOverride?: {
            [key: string]: Schema$GoogleCloudAiplatformV1beta1ExplanationSpecOverride;
        } | null;
        /**
         * If specified, this ExplainRequest will be served by the chosen DeployedModel, overriding Endpoint.traffic_split.
         */
        deployedModelId?: string | null;
        /**
         * If specified, overrides the explanation_spec of the DeployedModel. Can be used for explaining prediction results with different configurations, such as: - Explaining top-5 predictions results as opposed to top-1; - Increasing path count or step count of the attribution methods to reduce approximate errors; - Using different baselines for explaining the prediction results.
         */
        explanationSpecOverride?: Schema$GoogleCloudAiplatformV1beta1ExplanationSpecOverride;
        /**
         * Required. The instances that are the input to the explanation call. A DeployedModel may have an upper limit on the number of instances it supports per request, and when it is exceeded the explanation call errors in case of AutoML Models, or, in case of customer created Models, the behaviour is as documented by that Model. The schema of any single instance may be specified via Endpoint's DeployedModels' Model's PredictSchemata's instance_schema_uri.
         */
        instances?: any[] | null;
        /**
         * The parameters that govern the prediction. The schema of the parameters may be specified via Endpoint's DeployedModels' Model's PredictSchemata's parameters_schema_uri.
         */
        parameters?: any | null;
    }
    /**
     * Response message for PredictionService.Explain.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExplainResponse {
        /**
         * This field stores the results of the explanations run in parallel with The default explanation strategy/method.
         */
        concurrentExplanations?: {
            [key: string]: Schema$GoogleCloudAiplatformV1beta1ExplainResponseConcurrentExplanation;
        } | null;
        /**
         * ID of the Endpoint's DeployedModel that served this explanation.
         */
        deployedModelId?: string | null;
        /**
         * The explanations of the Model's PredictResponse.predictions. It has the same number of elements as instances to be explained.
         */
        explanations?: Schema$GoogleCloudAiplatformV1beta1Explanation[];
        /**
         * The predictions that are the output of the predictions call. Same as PredictResponse.predictions.
         */
        predictions?: any[] | null;
    }
    /**
     * This message is a wrapper grouping Concurrent Explanations.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExplainResponseConcurrentExplanation {
        /**
         * The explanations of the Model's PredictResponse.predictions. It has the same number of elements as instances to be explained.
         */
        explanations?: Schema$GoogleCloudAiplatformV1beta1Explanation[];
    }
    /**
     * Explanation of a prediction (provided in PredictResponse.predictions) produced by the Model on a given instance.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1Explanation {
        /**
         * Output only. Feature attributions grouped by predicted outputs. For Models that predict only one output, such as regression Models that predict only one score, there is only one attibution that explains the predicted output. For Models that predict multiple outputs, such as multiclass Models that predict multiple classes, each element explains one specific item. Attribution.output_index can be used to identify which output this attribution is explaining. By default, we provide Shapley values for the predicted class. However, you can configure the explanation request to generate Shapley values for any other classes too. For example, if a model predicts a probability of `0.4` for approving a loan application, the model's decision is to reject the application since `p(reject) = 0.6 \> p(approve) = 0.4`, and the default Shapley values would be computed for rejection decision and not approval, even though the latter might be the positive class. If users set ExplanationParameters.top_k, the attributions are sorted by instance_output_value in descending order. If ExplanationParameters.output_indices is specified, the attributions are stored by Attribution.output_index in the same order as they appear in the output_indices.
         */
        attributions?: Schema$GoogleCloudAiplatformV1beta1Attribution[];
        /**
         * Output only. List of the nearest neighbors for example-based explanations. For models deployed with the examples explanations feature enabled, the attributions field is empty and instead the neighbors field is populated.
         */
        neighbors?: Schema$GoogleCloudAiplatformV1beta1Neighbor[];
    }
    /**
     * Metadata describing the Model's input and output for explanation.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExplanationMetadata {
        /**
         * Points to a YAML file stored on Google Cloud Storage describing the format of the feature attributions. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). AutoML tabular Models always have this field populated by Vertex AI. Note: The URI given on output may be different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.
         */
        featureAttributionsSchemaUri?: string | null;
        /**
         * Required. Map from feature names to feature input metadata. Keys are the name of the features. Values are the specification of the feature. An empty InputMetadata is valid. It describes a text feature which has the name specified as the key in ExplanationMetadata.inputs. The baseline of the empty feature is chosen by Vertex AI. For Vertex AI-provided Tensorflow images, the key can be any friendly name of the feature. Once specified, featureAttributions are keyed by this key (if not grouped with another feature). For custom images, the key must match with the key in instance.
         */
        inputs?: {
            [key: string]: Schema$GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata;
        } | null;
        /**
         * Name of the source to generate embeddings for example based explanations.
         */
        latentSpaceSource?: string | null;
        /**
         * Required. Map from output names to output metadata. For Vertex AI-provided Tensorflow images, keys can be any user defined string that consists of any UTF-8 characters. For custom images, keys are the name of the output field in the prediction to be explained. Currently only one key is allowed.
         */
        outputs?: {
            [key: string]: Schema$GoogleCloudAiplatformV1beta1ExplanationMetadataOutputMetadata;
        } | null;
    }
    /**
     * Metadata of the input of a feature. Fields other than InputMetadata.input_baselines are applicable only for Models that are using Vertex AI-provided images for Tensorflow.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata {
        /**
         * Specifies the shape of the values of the input if the input is a sparse representation. Refer to Tensorflow documentation for more details: https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor.
         */
        denseShapeTensorName?: string | null;
        /**
         * A list of baselines for the encoded tensor. The shape of each baseline should match the shape of the encoded tensor. If a scalar is provided, Vertex AI broadcasts to the same shape as the encoded tensor.
         */
        encodedBaselines?: any[] | null;
        /**
         * Encoded tensor is a transformation of the input tensor. Must be provided if choosing Integrated Gradients attribution or XRAI attribution and the input tensor is not differentiable. An encoded tensor is generated if the input tensor is encoded by a lookup table.
         */
        encodedTensorName?: string | null;
        /**
         * Defines how the feature is encoded into the input tensor. Defaults to IDENTITY.
         */
        encoding?: string | null;
        /**
         * The domain details of the input feature value. Like min/max, original mean or standard deviation if normalized.
         */
        featureValueDomain?: Schema$GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataFeatureValueDomain;
        /**
         * Name of the group that the input belongs to. Features with the same group name will be treated as one feature when computing attributions. Features grouped together can have different shapes in value. If provided, there will be one single attribution generated in Attribution.feature_attributions, keyed by the group name.
         */
        groupName?: string | null;
        /**
         * A list of feature names for each index in the input tensor. Required when the input InputMetadata.encoding is BAG_OF_FEATURES, BAG_OF_FEATURES_SPARSE, INDICATOR.
         */
        indexFeatureMapping?: string[] | null;
        /**
         * Specifies the index of the values of the input tensor. Required when the input tensor is a sparse representation. Refer to Tensorflow documentation for more details: https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor.
         */
        indicesTensorName?: string | null;
        /**
         * Baseline inputs for this feature. If no baseline is specified, Vertex AI chooses the baseline for this feature. If multiple baselines are specified, Vertex AI returns the average attributions across them in Attribution.feature_attributions. For Vertex AI-provided Tensorflow images (both 1.x and 2.x), the shape of each baseline must match the shape of the input tensor. If a scalar is provided, we broadcast to the same shape as the input tensor. For custom images, the element of the baselines must be in the same format as the feature's input in the instance[]. The schema of any single instance may be specified via Endpoint's DeployedModels' Model's PredictSchemata's instance_schema_uri.
         */
        inputBaselines?: any[] | null;
        /**
         * Name of the input tensor for this feature. Required and is only applicable to Vertex AI-provided images for Tensorflow.
         */
        inputTensorName?: string | null;
        /**
         * Modality of the feature. Valid values are: numeric, image. Defaults to numeric.
         */
        modality?: string | null;
        /**
         * Visualization configurations for image explanation.
         */
        visualization?: Schema$GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization;
    }
    /**
     * Domain details of the input feature value. Provides numeric information about the feature, such as its range (min, max). If the feature has been pre-processed, for example with z-scoring, then it provides information about how to recover the original feature. For example, if the input feature is an image and it has been pre-processed to obtain 0-mean and stddev = 1 values, then original_mean, and original_stddev refer to the mean and stddev of the original feature (e.g. image tensor) from which input feature (with mean = 0 and stddev = 1) was obtained.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataFeatureValueDomain {
        /**
         * The maximum permissible value for this feature.
         */
        maxValue?: number | null;
        /**
         * The minimum permissible value for this feature.
         */
        minValue?: number | null;
        /**
         * If this input feature has been normalized to a mean value of 0, the original_mean specifies the mean value of the domain prior to normalization.
         */
        originalMean?: number | null;
        /**
         * If this input feature has been normalized to a standard deviation of 1.0, the original_stddev specifies the standard deviation of the domain prior to normalization.
         */
        originalStddev?: number | null;
    }
    /**
     * Visualization configurations for image explanation.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization {
        /**
         * Excludes attributions below the specified percentile, from the highlighted areas. Defaults to 62.
         */
        clipPercentLowerbound?: number | null;
        /**
         * Excludes attributions above the specified percentile from the highlighted areas. Using the clip_percent_upperbound and clip_percent_lowerbound together can be useful for filtering out noise and making it easier to see areas of strong attribution. Defaults to 99.9.
         */
        clipPercentUpperbound?: number | null;
        /**
         * The color scheme used for the highlighted areas. Defaults to PINK_GREEN for Integrated Gradients attribution, which shows positive attributions in green and negative in pink. Defaults to VIRIDIS for XRAI attribution, which highlights the most influential regions in yellow and the least influential in blue.
         */
        colorMap?: string | null;
        /**
         * How the original image is displayed in the visualization. Adjusting the overlay can help increase visual clarity if the original image makes it difficult to view the visualization. Defaults to NONE.
         */
        overlayType?: string | null;
        /**
         * Whether to only highlight pixels with positive contributions, negative or both. Defaults to POSITIVE.
         */
        polarity?: string | null;
        /**
         * Type of the image visualization. Only applicable to Integrated Gradients attribution. OUTLINES shows regions of attribution, while PIXELS shows per-pixel attribution. Defaults to OUTLINES.
         */
        type?: string | null;
    }
    /**
     * Metadata of the prediction output to be explained.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExplanationMetadataOutputMetadata {
        /**
         * Specify a field name in the prediction to look for the display name. Use this if the prediction contains the display names for the outputs. The display names in the prediction must have the same shape of the outputs, so that it can be located by Attribution.output_index for a specific output.
         */
        displayNameMappingKey?: string | null;
        /**
         * Static mapping between the index and display name. Use this if the outputs are a deterministic n-dimensional array, e.g. a list of scores of all the classes in a pre-defined order for a multi-classification Model. It's not feasible if the outputs are non-deterministic, e.g. the Model produces top-k classes or sort the outputs by their values. The shape of the value must be an n-dimensional array of strings. The number of dimensions must match that of the outputs to be explained. The Attribution.output_display_name is populated by locating in the mapping with Attribution.output_index.
         */
        indexDisplayNameMapping?: any | null;
        /**
         * Name of the output tensor. Required and is only applicable to Vertex AI provided images for Tensorflow.
         */
        outputTensorName?: string | null;
    }
    /**
     * The ExplanationMetadata entries that can be overridden at online explanation time.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExplanationMetadataOverride {
        /**
         * Required. Overrides the input metadata of the features. The key is the name of the feature to be overridden. The keys specified here must exist in the input metadata to be overridden. If a feature is not specified here, the corresponding feature's input metadata is not overridden.
         */
        inputs?: {
            [key: string]: Schema$GoogleCloudAiplatformV1beta1ExplanationMetadataOverrideInputMetadataOverride;
        } | null;
    }
    /**
     * The input metadata entries to be overridden.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExplanationMetadataOverrideInputMetadataOverride {
        /**
         * Baseline inputs for this feature. This overrides the `input_baseline` field of the ExplanationMetadata.InputMetadata object of the corresponding feature's input metadata. If it's not specified, the original baselines are not overridden.
         */
        inputBaselines?: any[] | null;
    }
    /**
     * Parameters to configure explaining for Model's predictions.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExplanationParameters {
        /**
         * Example-based explanations that returns the nearest neighbors from the provided dataset.
         */
        examples?: Schema$GoogleCloudAiplatformV1beta1Examples;
        /**
         * An attribution method that computes Aumann-Shapley values taking advantage of the model's fully differentiable structure. Refer to this paper for more details: https://arxiv.org/abs/1703.01365
         */
        integratedGradientsAttribution?: Schema$GoogleCloudAiplatformV1beta1IntegratedGradientsAttribution;
        /**
         * If populated, only returns attributions that have output_index contained in output_indices. It must be an ndarray of integers, with the same shape of the output it's explaining. If not populated, returns attributions for top_k indices of outputs. If neither top_k nor output_indices is populated, returns the argmax index of the outputs. Only applicable to Models that predict multiple outputs (e,g, multi-class Models that predict multiple classes).
         */
        outputIndices?: any[] | null;
        /**
         * An attribution method that approximates Shapley values for features that contribute to the label being predicted. A sampling strategy is used to approximate the value rather than considering all subsets of features. Refer to this paper for model details: https://arxiv.org/abs/1306.4265.
         */
        sampledShapleyAttribution?: Schema$GoogleCloudAiplatformV1beta1SampledShapleyAttribution;
        /**
         * If populated, returns attributions for top K indices of outputs (defaults to 1). Only applies to Models that predicts more than one outputs (e,g, multi-class Models). When set to -1, returns explanations for all outputs.
         */
        topK?: number | null;
        /**
         * An attribution method that redistributes Integrated Gradients attribution to segmented regions, taking advantage of the model's fully differentiable structure. Refer to this paper for more details: https://arxiv.org/abs/1906.02825 XRAI currently performs better on natural images, like a picture of a house or an animal. If the images are taken in artificial environments, like a lab or manufacturing line, or from diagnostic equipment, like x-rays or quality-control cameras, use Integrated Gradients instead.
         */
        xraiAttribution?: Schema$GoogleCloudAiplatformV1beta1XraiAttribution;
    }
    /**
     * Specification of Model explanation.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExplanationSpec {
        /**
         * Optional. Metadata describing the Model's input and output for explanation.
         */
        metadata?: Schema$GoogleCloudAiplatformV1beta1ExplanationMetadata;
        /**
         * Required. Parameters that configure explaining of the Model's predictions.
         */
        parameters?: Schema$GoogleCloudAiplatformV1beta1ExplanationParameters;
    }
    /**
     * The ExplanationSpec entries that can be overridden at online explanation time.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExplanationSpecOverride {
        /**
         * The example-based explanations parameter overrides.
         */
        examplesOverride?: Schema$GoogleCloudAiplatformV1beta1ExamplesOverride;
        /**
         * The metadata to be overridden. If not specified, no metadata is overridden.
         */
        metadata?: Schema$GoogleCloudAiplatformV1beta1ExplanationMetadataOverride;
        /**
         * The parameters to be overridden. Note that the attribution method cannot be changed. If not specified, no parameter is overridden.
         */
        parameters?: Schema$GoogleCloudAiplatformV1beta1ExplanationParameters;
    }
    /**
     * Describes what part of the Dataset is to be exported, the destination of the export and how to export.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExportDataConfig {
        /**
         * An expression for filtering what part of the Dataset is to be exported. Only Annotations that match this filter will be exported. The filter syntax is the same as in ListAnnotations.
         */
        annotationsFilter?: string | null;
        /**
         * Split based on fractions defining the size of each set.
         */
        fractionSplit?: Schema$GoogleCloudAiplatformV1beta1ExportFractionSplit;
        /**
         * The Google Cloud Storage location where the output is to be written to. In the given directory a new directory will be created with name: `export-data--` where timestamp is in YYYY-MM-DDThh:mm:ss.sssZ ISO-8601 format. All export output will be written into that directory. Inside that directory, annotations with the same schema will be grouped into sub directories which are named with the corresponding annotations' schema title. Inside these sub directories, a schema.yaml will be created to describe the output format.
         */
        gcsDestination?: Schema$GoogleCloudAiplatformV1beta1GcsDestination;
    }
    /**
     * Runtime operation information for DatasetService.ExportData.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExportDataOperationMetadata {
        /**
         * A Google Cloud Storage directory which path ends with '/'. The exported data is stored in the directory.
         */
        gcsOutputDirectory?: string | null;
        /**
         * The common part of the operation metadata.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Request message for DatasetService.ExportData.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExportDataRequest {
        /**
         * Required. The desired output location.
         */
        exportConfig?: Schema$GoogleCloudAiplatformV1beta1ExportDataConfig;
    }
    /**
     * Response message for DatasetService.ExportData.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExportDataResponse {
        /**
         * All of the files that are exported in this export operation. For custom code training export, only three (training, validation and test) Cloud Storage paths in wildcard format are populated (for example, gs://.../training-*).
         */
        exportedFiles?: string[] | null;
    }
    /**
     * Details of operations that exports Features values.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExportFeatureValuesOperationMetadata {
        /**
         * Operation metadata for Featurestore export Feature values.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Request message for FeaturestoreService.ExportFeatureValues.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExportFeatureValuesRequest {
        /**
         * Required. Specifies destination location and format.
         */
        destination?: Schema$GoogleCloudAiplatformV1beta1FeatureValueDestination;
        /**
         * Required. Selects Features to export values of.
         */
        featureSelector?: Schema$GoogleCloudAiplatformV1beta1FeatureSelector;
        /**
         * Exports all historical values of all entities of the EntityType within a time range
         */
        fullExport?: Schema$GoogleCloudAiplatformV1beta1ExportFeatureValuesRequestFullExport;
        /**
         * Per-Feature export settings.
         */
        settings?: Schema$GoogleCloudAiplatformV1beta1DestinationFeatureSetting[];
        /**
         * Exports the latest Feature values of all entities of the EntityType within a time range.
         */
        snapshotExport?: Schema$GoogleCloudAiplatformV1beta1ExportFeatureValuesRequestSnapshotExport;
    }
    /**
     * Describes exporting all historical Feature values of all entities of the EntityType between [start_time, end_time].
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExportFeatureValuesRequestFullExport {
        /**
         * Exports Feature values as of this timestamp. If not set, retrieve values as of now. Timestamp, if present, must not have higher than millisecond precision.
         */
        endTime?: string | null;
        /**
         * Excludes Feature values with feature generation timestamp before this timestamp. If not set, retrieve oldest values kept in Feature Store. Timestamp, if present, must not have higher than millisecond precision.
         */
        startTime?: string | null;
    }
    /**
     * Describes exporting the latest Feature values of all entities of the EntityType between [start_time, snapshot_time].
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExportFeatureValuesRequestSnapshotExport {
        /**
         * Exports Feature values as of this timestamp. If not set, retrieve values as of now. Timestamp, if present, must not have higher than millisecond precision.
         */
        snapshotTime?: string | null;
        /**
         * Excludes Feature values with feature generation timestamp before this timestamp. If not set, retrieve oldest values kept in Feature Store. Timestamp, if present, must not have higher than millisecond precision.
         */
        startTime?: string | null;
    }
    /**
     * Response message for FeaturestoreService.ExportFeatureValues.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExportFeatureValuesResponse {
    }
    /**
     * Assigns the input data to training, validation, and test sets as per the given fractions. Any of `training_fraction`, `validation_fraction` and `test_fraction` may optionally be provided, they must sum to up to 1. If the provided ones sum to less than 1, the remainder is assigned to sets as decided by Vertex AI. If none of the fractions are set, by default roughly 80% of data is used for training, 10% for validation, and 10% for test.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExportFractionSplit {
        /**
         * The fraction of the input data that is to be used to evaluate the Model.
         */
        testFraction?: number | null;
        /**
         * The fraction of the input data that is to be used to train the Model.
         */
        trainingFraction?: number | null;
        /**
         * The fraction of the input data that is to be used to validate the Model.
         */
        validationFraction?: number | null;
    }
    /**
     * Details of ModelService.ExportModel operation.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExportModelOperationMetadata {
        /**
         * The common part of the operation metadata.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
        /**
         * Output only. Information further describing the output of this Model export.
         */
        outputInfo?: Schema$GoogleCloudAiplatformV1beta1ExportModelOperationMetadataOutputInfo;
    }
    /**
     * Further describes the output of the ExportModel. Supplements ExportModelRequest.OutputConfig.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExportModelOperationMetadataOutputInfo {
        /**
         * Output only. If the Model artifact is being exported to Google Cloud Storage this is the full path of the directory created, into which the Model files are being written to.
         */
        artifactOutputUri?: string | null;
        /**
         * Output only. If the Model image is being exported to Google Container Registry or Artifact Registry this is the full path of the image created.
         */
        imageOutputUri?: string | null;
    }
    /**
     * Request message for ModelService.ExportModel.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExportModelRequest {
        /**
         * Required. The desired output location and configuration.
         */
        outputConfig?: Schema$GoogleCloudAiplatformV1beta1ExportModelRequestOutputConfig;
    }
    /**
     * Output configuration for the Model export.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExportModelRequestOutputConfig {
        /**
         * The Cloud Storage location where the Model artifact is to be written to. Under the directory given as the destination a new one with name "`model-export--`", where timestamp is in YYYY-MM-DDThh:mm:ss.sssZ ISO-8601 format, will be created. Inside, the Model and any of its supporting files will be written. This field should only be set when the `exportableContent` field of the [Model.supported_export_formats] object contains `ARTIFACT`.
         */
        artifactDestination?: Schema$GoogleCloudAiplatformV1beta1GcsDestination;
        /**
         * The ID of the format in which the Model must be exported. Each Model lists the export formats it supports. If no value is provided here, then the first from the list of the Model's supported formats is used by default.
         */
        exportFormatId?: string | null;
        /**
         * The Google Container Registry or Artifact Registry uri where the Model container image will be copied to. This field should only be set when the `exportableContent` field of the [Model.supported_export_formats] object contains `IMAGE`.
         */
        imageDestination?: Schema$GoogleCloudAiplatformV1beta1ContainerRegistryDestination;
    }
    /**
     * Response message of ModelService.ExportModel operation.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExportModelResponse {
    }
    /**
     * Request message for TensorboardService.ExportTensorboardTimeSeriesData.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest {
        /**
         * Exports the TensorboardTimeSeries' data that match the filter expression.
         */
        filter?: string | null;
        /**
         * Field to use to sort the TensorboardTimeSeries' data. By default, TensorboardTimeSeries' data is returned in a pseudo random order.
         */
        orderBy?: string | null;
        /**
         * The maximum number of data points to return per page. The default page_size is 1000. Values must be between 1 and 10000. Values above 10000 are coerced to 10000.
         */
        pageSize?: number | null;
        /**
         * A page token, received from a previous ExportTensorboardTimeSeriesData call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to ExportTensorboardTimeSeriesData must match the call that provided the page token.
         */
        pageToken?: string | null;
    }
    /**
     * Response message for TensorboardService.ExportTensorboardTimeSeriesData.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataResponse {
        /**
         * A token, which can be sent as page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
         */
        nextPageToken?: string | null;
        /**
         * The returned time series data points.
         */
        timeSeriesDataPoints?: Schema$GoogleCloudAiplatformV1beta1TimeSeriesDataPoint[];
    }
    /**
     * Feature Metadata information. For example, color is a feature that describes an apple.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1Feature {
        /**
         * Output only. Only applicable for Vertex AI Feature Store (Legacy). Timestamp when this EntityType was created.
         */
        createTime?: string | null;
        /**
         * Description of the Feature.
         */
        description?: string | null;
        /**
         * Optional. Only applicable for Vertex AI Feature Store (Legacy). If not set, use the monitoring_config defined for the EntityType this Feature belongs to. Only Features with type (Feature.ValueType) BOOL, STRING, DOUBLE or INT64 can enable monitoring. If set to true, all types of data monitoring are disabled despite the config on EntityType.
         */
        disableMonitoring?: boolean | null;
        /**
         * Used to perform a consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
         */
        etag?: string | null;
        /**
         * Optional. The labels with user-defined metadata to organize your Features. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one Feature (System labels are excluded)." System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Optional. Only applicable for Vertex AI Feature Store (Legacy). Deprecated: The custom monitoring configuration for this Feature, if not set, use the monitoring_config defined for the EntityType this Feature belongs to. Only Features with type (Feature.ValueType) BOOL, STRING, DOUBLE or INT64 can enable monitoring. If this is populated with FeaturestoreMonitoringConfig.disabled = true, snapshot analysis monitoring is disabled; if FeaturestoreMonitoringConfig.monitoring_interval specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring config is same as the EntityType's this Feature belongs to.
         */
        monitoringConfig?: Schema$GoogleCloudAiplatformV1beta1FeaturestoreMonitoringConfig;
        /**
         * Output only. Only applicable for Vertex AI Feature Store (Legacy). A list of historical SnapshotAnalysis stats requested by user, sorted by FeatureStatsAnomaly.start_time descending.
         */
        monitoringStats?: Schema$GoogleCloudAiplatformV1beta1FeatureStatsAnomaly[];
        /**
         * Output only. Only applicable for Vertex AI Feature Store (Legacy). The list of historical stats and anomalies with specified objectives.
         */
        monitoringStatsAnomalies?: Schema$GoogleCloudAiplatformV1beta1FeatureMonitoringStatsAnomaly[];
        /**
         * Immutable. Name of the Feature. Format: `projects/{project\}/locations/{location\}/featurestores/{featurestore\}/entityTypes/{entity_type\}/features/{feature\}` `projects/{project\}/locations/{location\}/featureGroups/{feature_group\}/features/{feature\}` The last part feature is assigned by the client. The feature can be up to 64 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscore(_), and ASCII digits 0-9 starting with a letter. The value will be unique given an entity type.
         */
        name?: string | null;
        /**
         * Entity responsible for maintaining this feature. Can be comma separated list of email addresses or URIs.
         */
        pointOfContact?: string | null;
        /**
         * Output only. Only applicable for Vertex AI Feature Store (Legacy). Timestamp when this EntityType was most recently updated.
         */
        updateTime?: string | null;
        /**
         * Immutable. Only applicable for Vertex AI Feature Store (Legacy). Type of Feature value.
         */
        valueType?: string | null;
        /**
         * Only applicable for Vertex AI Feature Store. The name of the BigQuery Table/View column hosting data for this version. If no value is provided, will use feature_id.
         */
        versionColumnName?: string | null;
    }
    /**
     * Vertex AI Feature Group.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureGroup {
        /**
         * Indicates that features for this group come from BigQuery Table/View. By default treats the source as a sparse time series source, which is required to have an entity_id and a feature_timestamp column in the source.
         */
        bigQuery?: Schema$GoogleCloudAiplatformV1beta1FeatureGroupBigQuery;
        /**
         * Output only. Timestamp when this FeatureGroup was created.
         */
        createTime?: string | null;
        /**
         * Optional. Description of the FeatureGroup.
         */
        description?: string | null;
        /**
         * Optional. Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
         */
        etag?: string | null;
        /**
         * Optional. The labels with user-defined metadata to organize your FeatureGroup. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one FeatureGroup(System labels are excluded)." System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Identifier. Name of the FeatureGroup. Format: `projects/{project\}/locations/{location\}/featureGroups/{featureGroup\}`
         */
        name?: string | null;
        /**
         * Output only. Timestamp when this FeatureGroup was last updated.
         */
        updateTime?: string | null;
    }
    /**
     * Input source type for BigQuery Tables and Views.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureGroupBigQuery {
        /**
         * Required. Immutable. The BigQuery source URI that points to either a BigQuery Table or View.
         */
        bigQuerySource?: Schema$GoogleCloudAiplatformV1beta1BigQuerySource;
        /**
         * Optional. Columns to construct entity_id / row keys. If not provided defaults to `entity_id`.
         */
        entityIdColumns?: string[] | null;
    }
    /**
     * A list of historical SnapshotAnalysis or ImportFeaturesAnalysis stats requested by user, sorted by FeatureStatsAnomaly.start_time descending.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureMonitoringStatsAnomaly {
        /**
         * Output only. The stats and anomalies generated at specific timestamp.
         */
        featureStatsAnomaly?: Schema$GoogleCloudAiplatformV1beta1FeatureStatsAnomaly;
        /**
         * Output only. The objective for each stats.
         */
        objective?: string | null;
    }
    /**
     * Noise sigma by features. Noise sigma represents the standard deviation of the gaussian kernel that will be used to add noise to interpolated inputs prior to computing gradients.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureNoiseSigma {
        /**
         * Noise sigma per feature. No noise is added to features that are not set.
         */
        noiseSigma?: Schema$GoogleCloudAiplatformV1beta1FeatureNoiseSigmaNoiseSigmaForFeature[];
    }
    /**
     * Noise sigma for a single feature.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureNoiseSigmaNoiseSigmaForFeature {
        /**
         * The name of the input feature for which noise sigma is provided. The features are defined in explanation metadata inputs.
         */
        name?: string | null;
        /**
         * This represents the standard deviation of the Gaussian kernel that will be used to add noise to the feature prior to computing gradients. Similar to noise_sigma but represents the noise added to the current feature. Defaults to 0.1.
         */
        sigma?: number | null;
    }
    /**
     * Vertex AI Feature Online Store provides a centralized repository for serving ML features and embedding indexes at low latency. The Feature Online Store is a top-level container.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureOnlineStore {
        /**
         * Contains settings for the Cloud Bigtable instance that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore.
         */
        bigtable?: Schema$GoogleCloudAiplatformV1beta1FeatureOnlineStoreBigtable;
        /**
         * Output only. Timestamp when this FeatureOnlineStore was created.
         */
        createTime?: string | null;
        /**
         * Optional. The dedicated serving endpoint for this FeatureOnlineStore, which is different from common Vertex service endpoint.
         */
        dedicatedServingEndpoint?: Schema$GoogleCloudAiplatformV1beta1FeatureOnlineStoreDedicatedServingEndpoint;
        /**
         * Optional. The settings for embedding management in FeatureOnlineStore.
         */
        embeddingManagement?: Schema$GoogleCloudAiplatformV1beta1FeatureOnlineStoreEmbeddingManagement;
        /**
         * Optional. Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
         */
        etag?: string | null;
        /**
         * Optional. The labels with user-defined metadata to organize your FeatureOnlineStore. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one FeatureOnlineStore(System labels are excluded)." System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Identifier. Name of the FeatureOnlineStore. Format: `projects/{project\}/locations/{location\}/featureOnlineStores/{featureOnlineStore\}`
         */
        name?: string | null;
        /**
         * Contains settings for the Optimized store that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore. When choose Optimized storage type, need to set PrivateServiceConnectConfig.enable_private_service_connect to use private endpoint. Otherwise will use public endpoint by default.
         */
        optimized?: Schema$GoogleCloudAiplatformV1beta1FeatureOnlineStoreOptimized;
        /**
         * Output only. State of the featureOnlineStore.
         */
        state?: string | null;
        /**
         * Output only. Timestamp when this FeatureOnlineStore was last updated.
         */
        updateTime?: string | null;
    }
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureOnlineStoreBigtable {
        /**
         * Required. Autoscaling config applied to Bigtable Instance.
         */
        autoScaling?: Schema$GoogleCloudAiplatformV1beta1FeatureOnlineStoreBigtableAutoScaling;
    }
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureOnlineStoreBigtableAutoScaling {
        /**
         * Optional. A percentage of the cluster's CPU capacity. Can be from 10% to 80%. When a cluster's CPU utilization exceeds the target that you have set, Bigtable immediately adds nodes to the cluster. When CPU utilization is substantially lower than the target, Bigtable removes nodes. If not set will default to 50%.
         */
        cpuUtilizationTarget?: number | null;
        /**
         * Required. The maximum number of nodes to scale up to. Must be greater than or equal to min_node_count, and less than or equal to 10 times of 'min_node_count'.
         */
        maxNodeCount?: number | null;
        /**
         * Required. The minimum number of nodes to scale down to. Must be greater than or equal to 1.
         */
        minNodeCount?: number | null;
    }
    /**
     * The dedicated serving endpoint for this FeatureOnlineStore. Only need to set when you choose Optimized storage type or enable EmbeddingManagement. Will use public endpoint by default. Note, for EmbeddingManagement use case, only [DedicatedServingEndpoint.public_endpoint_domain_name] is available now.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureOnlineStoreDedicatedServingEndpoint {
        /**
         * Optional. Private service connect config. The private service connection is available only for Optimized storage type, not for embedding management now. If PrivateServiceConnectConfig.enable_private_service_connect set to true, customers will use private service connection to send request. Otherwise, the connection will set to public endpoint.
         */
        privateServiceConnectConfig?: Schema$GoogleCloudAiplatformV1beta1PrivateServiceConnectConfig;
        /**
         * Output only. This field will be populated with the domain name to use for this FeatureOnlineStore
         */
        publicEndpointDomainName?: string | null;
        /**
         * Output only. The name of the service attachment resource. Populated if private service connect is enabled and after FeatureViewSync is created.
         */
        serviceAttachment?: string | null;
    }
    /**
     * Contains settings for embedding management.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureOnlineStoreEmbeddingManagement {
        /**
         * Optional. Immutable. Whether to enable embedding management in this FeatureOnlineStore. It's immutable after creation to ensure the FeatureOnlineStore availability.
         */
        enabled?: boolean | null;
    }
    /**
     * Optimized storage type
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureOnlineStoreOptimized {
    }
    /**
     * Selector for Features of an EntityType.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureSelector {
        /**
         * Required. Matches Features based on ID.
         */
        idMatcher?: Schema$GoogleCloudAiplatformV1beta1IdMatcher;
    }
    /**
     * Stats and Anomaly generated at specific timestamp for specific Feature. The start_time and end_time are used to define the time range of the dataset that current stats belongs to, e.g. prediction traffic is bucketed into prediction datasets by time window. If the Dataset is not defined by time window, start_time = end_time. Timestamp of the stats and anomalies always refers to end_time. Raw stats and anomalies are stored in stats_uri or anomaly_uri in the tensorflow defined protos. Field data_stats contains almost identical information with the raw stats in Vertex AI defined proto, for UI to display.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureStatsAnomaly {
        /**
         * This is the threshold used when detecting anomalies. The threshold can be changed by user, so this one might be different from ThresholdConfig.value.
         */
        anomalyDetectionThreshold?: number | null;
        /**
         * Path of the anomaly file for current feature values in Cloud Storage bucket. Format: gs:////anomalies. Example: gs://monitoring_bucket/feature_name/anomalies. Stats are stored as binary format with Protobuf message Anoamlies are stored as binary format with Protobuf message [tensorflow.metadata.v0.AnomalyInfo] (https://github.com/tensorflow/metadata/blob/master/tensorflow_metadata/proto/v0/anomalies.proto).
         */
        anomalyUri?: string | null;
        /**
         * Deviation from the current stats to baseline stats. 1. For categorical feature, the distribution distance is calculated by L-inifinity norm. 2. For numerical feature, the distribution distance is calculated by Jensen–Shannon divergence.
         */
        distributionDeviation?: number | null;
        /**
         * The end timestamp of window where stats were generated. For objectives where time window doesn't make sense (e.g. Featurestore Snapshot Monitoring), end_time indicates the timestamp of the data used to generate stats (e.g. timestamp we take snapshots for feature values).
         */
        endTime?: string | null;
        /**
         * Feature importance score, only populated when cross-feature monitoring is enabled. For now only used to represent feature attribution score within range [0, 1] for ModelDeploymentMonitoringObjectiveType.FEATURE_ATTRIBUTION_SKEW and ModelDeploymentMonitoringObjectiveType.FEATURE_ATTRIBUTION_DRIFT.
         */
        score?: number | null;
        /**
         * The start timestamp of window where stats were generated. For objectives where time window doesn't make sense (e.g. Featurestore Snapshot Monitoring), start_time is only used to indicate the monitoring intervals, so it always equals to (end_time - monitoring_interval).
         */
        startTime?: string | null;
        /**
         * Path of the stats file for current feature values in Cloud Storage bucket. Format: gs:////stats. Example: gs://monitoring_bucket/feature_name/stats. Stats are stored as binary format with Protobuf message [tensorflow.metadata.v0.FeatureNameStatistics](https://github.com/tensorflow/metadata/blob/master/tensorflow_metadata/proto/v0/statistics.proto).
         */
        statsUri?: string | null;
    }
    /**
     * Vertex AI Feature Store provides a centralized repository for organizing, storing, and serving ML features. The Featurestore is a top-level container for your features and their values.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1Featurestore {
        /**
         * Output only. Timestamp when this Featurestore was created.
         */
        createTime?: string | null;
        /**
         * Optional. Customer-managed encryption key spec for data storage. If set, both of the online and offline data storage will be secured by this key.
         */
        encryptionSpec?: Schema$GoogleCloudAiplatformV1beta1EncryptionSpec;
        /**
         * Optional. Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
         */
        etag?: string | null;
        /**
         * Optional. The labels with user-defined metadata to organize your Featurestore. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one Featurestore(System labels are excluded)." System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Output only. Name of the Featurestore. Format: `projects/{project\}/locations/{location\}/featurestores/{featurestore\}`
         */
        name?: string | null;
        /**
         * Optional. Config for online storage resources. The field should not co-exist with the field of `OnlineStoreReplicationConfig`. If both of it and OnlineStoreReplicationConfig are unset, the feature store will not have an online store and cannot be used for online serving.
         */
        onlineServingConfig?: Schema$GoogleCloudAiplatformV1beta1FeaturestoreOnlineServingConfig;
        /**
         * Optional. TTL in days for feature values that will be stored in online serving storage. The Feature Store online storage periodically removes obsolete feature values older than `online_storage_ttl_days` since the feature generation time. Note that `online_storage_ttl_days` should be less than or equal to `offline_storage_ttl_days` for each EntityType under a featurestore. If not set, default to 4000 days
         */
        onlineStorageTtlDays?: number | null;
        /**
         * Output only. State of the featurestore.
         */
        state?: string | null;
        /**
         * Output only. Timestamp when this Featurestore was last updated.
         */
        updateTime?: string | null;
    }
    /**
     * Configuration of how features in Featurestore are monitored.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeaturestoreMonitoringConfig {
        /**
         * Threshold for categorical features of anomaly detection. This is shared by all types of Featurestore Monitoring for categorical features (i.e. Features with type (Feature.ValueType) BOOL or STRING).
         */
        categoricalThresholdConfig?: Schema$GoogleCloudAiplatformV1beta1FeaturestoreMonitoringConfigThresholdConfig;
        /**
         * The config for ImportFeatures Analysis Based Feature Monitoring.
         */
        importFeaturesAnalysis?: Schema$GoogleCloudAiplatformV1beta1FeaturestoreMonitoringConfigImportFeaturesAnalysis;
        /**
         * Threshold for numerical features of anomaly detection. This is shared by all objectives of Featurestore Monitoring for numerical features (i.e. Features with type (Feature.ValueType) DOUBLE or INT64).
         */
        numericalThresholdConfig?: Schema$GoogleCloudAiplatformV1beta1FeaturestoreMonitoringConfigThresholdConfig;
        /**
         * The config for Snapshot Analysis Based Feature Monitoring.
         */
        snapshotAnalysis?: Schema$GoogleCloudAiplatformV1beta1FeaturestoreMonitoringConfigSnapshotAnalysis;
    }
    /**
     * Configuration of the Featurestore's ImportFeature Analysis Based Monitoring. This type of analysis generates statistics for values of each Feature imported by every ImportFeatureValues operation.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeaturestoreMonitoringConfigImportFeaturesAnalysis {
        /**
         * The baseline used to do anomaly detection for the statistics generated by import features analysis.
         */
        anomalyDetectionBaseline?: string | null;
        /**
         * Whether to enable / disable / inherite default hebavior for import features analysis.
         */
        state?: string | null;
    }
    /**
     * Configuration of the Featurestore's Snapshot Analysis Based Monitoring. This type of analysis generates statistics for each Feature based on a snapshot of the latest feature value of each entities every monitoring_interval.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeaturestoreMonitoringConfigSnapshotAnalysis {
        /**
         * The monitoring schedule for snapshot analysis. For EntityType-level config: unset / disabled = true indicates disabled by default for Features under it; otherwise by default enable snapshot analysis monitoring with monitoring_interval for Features under it. Feature-level config: disabled = true indicates disabled regardless of the EntityType-level config; unset monitoring_interval indicates going with EntityType-level config; otherwise run snapshot analysis monitoring with monitoring_interval regardless of the EntityType-level config. Explicitly Disable the snapshot analysis based monitoring.
         */
        disabled?: boolean | null;
        /**
         * Configuration of the snapshot analysis based monitoring pipeline running interval. The value is rolled up to full day. If both monitoring_interval_days and the deprecated `monitoring_interval` field are set when creating/updating EntityTypes/Features, monitoring_interval_days will be used.
         */
        monitoringInterval?: string | null;
        /**
         * Configuration of the snapshot analysis based monitoring pipeline running interval. The value indicates number of days.
         */
        monitoringIntervalDays?: number | null;
        /**
         * Customized export features time window for snapshot analysis. Unit is one day. Default value is 3 weeks. Minimum value is 1 day. Maximum value is 4000 days.
         */
        stalenessDays?: number | null;
    }
    /**
     * The config for Featurestore Monitoring threshold.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeaturestoreMonitoringConfigThresholdConfig {
        /**
         * Specify a threshold value that can trigger the alert. 1. For categorical feature, the distribution distance is calculated by L-inifinity norm. 2. For numerical feature, the distribution distance is calculated by Jensen–Shannon divergence. Each feature must have a non-zero threshold if they need to be monitored. Otherwise no alert will be triggered for that feature.
         */
        value?: number | null;
    }
    /**
     * OnlineServingConfig specifies the details for provisioning online serving resources.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeaturestoreOnlineServingConfig {
        /**
         * The number of nodes for the online store. The number of nodes doesn't scale automatically, but you can manually update the number of nodes. If set to 0, the featurestore will not have an online store and cannot be used for online serving.
         */
        fixedNodeCount?: number | null;
        /**
         * Online serving scaling configuration. Only one of `fixed_node_count` and `scaling` can be set. Setting one will reset the other.
         */
        scaling?: Schema$GoogleCloudAiplatformV1beta1FeaturestoreOnlineServingConfigScaling;
    }
    /**
     * Online serving scaling configuration. If min_node_count and max_node_count are set to the same value, the cluster will be configured with the fixed number of node (no auto-scaling).
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeaturestoreOnlineServingConfigScaling {
        /**
         * Optional. The cpu utilization that the Autoscaler should be trying to achieve. This number is on a scale from 0 (no utilization) to 100 (total utilization), and is limited between 10 and 80. When a cluster's CPU utilization exceeds the target that you have set, Bigtable immediately adds nodes to the cluster. When CPU utilization is substantially lower than the target, Bigtable removes nodes. If not set or set to 0, default to 50.
         */
        cpuUtilizationTarget?: number | null;
        /**
         * The maximum number of nodes to scale up to. Must be greater than min_node_count, and less than or equal to 10 times of 'min_node_count'.
         */
        maxNodeCount?: number | null;
        /**
         * Required. The minimum number of nodes to scale down to. Must be greater than or equal to 1.
         */
        minNodeCount?: number | null;
    }
    /**
     * Value for a feature.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureValue {
        /**
         * A list of bool type feature value.
         */
        boolArrayValue?: Schema$GoogleCloudAiplatformV1beta1BoolArray;
        /**
         * Bool type feature value.
         */
        boolValue?: boolean | null;
        /**
         * Bytes feature value.
         */
        bytesValue?: string | null;
        /**
         * A list of double type feature value.
         */
        doubleArrayValue?: Schema$GoogleCloudAiplatformV1beta1DoubleArray;
        /**
         * Double type feature value.
         */
        doubleValue?: number | null;
        /**
         * A list of int64 type feature value.
         */
        int64ArrayValue?: Schema$GoogleCloudAiplatformV1beta1Int64Array;
        /**
         * Int64 feature value.
         */
        int64Value?: string | null;
        /**
         * Metadata of feature value.
         */
        metadata?: Schema$GoogleCloudAiplatformV1beta1FeatureValueMetadata;
        /**
         * A list of string type feature value.
         */
        stringArrayValue?: Schema$GoogleCloudAiplatformV1beta1StringArray;
        /**
         * String feature value.
         */
        stringValue?: string | null;
    }
    /**
     * A destination location for Feature values and format.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureValueDestination {
        /**
         * Output in BigQuery format. BigQueryDestination.output_uri in FeatureValueDestination.bigquery_destination must refer to a table.
         */
        bigqueryDestination?: Schema$GoogleCloudAiplatformV1beta1BigQueryDestination;
        /**
         * Output in CSV format. Array Feature value types are not allowed in CSV format.
         */
        csvDestination?: Schema$GoogleCloudAiplatformV1beta1CsvDestination;
        /**
         * Output in TFRecord format. Below are the mapping from Feature value type in Featurestore to Feature value type in TFRecord: Value type in Featurestore | Value type in TFRecord DOUBLE, DOUBLE_ARRAY | FLOAT_LIST INT64, INT64_ARRAY | INT64_LIST STRING, STRING_ARRAY, BYTES | BYTES_LIST true -\> byte_string("true"), false -\> byte_string("false") BOOL, BOOL_ARRAY (true, false) | BYTES_LIST
         */
        tfrecordDestination?: Schema$GoogleCloudAiplatformV1beta1TFRecordDestination;
    }
    /**
     * Container for list of values.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureValueList {
        /**
         * A list of feature values. All of them should be the same data type.
         */
        values?: Schema$GoogleCloudAiplatformV1beta1FeatureValue[];
    }
    /**
     * Metadata of feature value.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureValueMetadata {
        /**
         * Feature generation timestamp. Typically, it is provided by user at feature ingestion time. If not, feature store will use the system timestamp when the data is ingested into feature store. For streaming ingestion, the time, aligned by days, must be no older than five years (1825 days) and no later than one year (366 days) in the future.
         */
        generateTime?: string | null;
    }
    /**
     * FeatureView is representation of values that the FeatureOnlineStore will serve based on its syncConfig.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureView {
        /**
         * Optional. Configures how data is supposed to be extracted from a BigQuery source to be loaded onto the FeatureOnlineStore.
         */
        bigQuerySource?: Schema$GoogleCloudAiplatformV1beta1FeatureViewBigQuerySource;
        /**
         * Output only. Timestamp when this FeatureView was created.
         */
        createTime?: string | null;
        /**
         * Optional. Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
         */
        etag?: string | null;
        /**
         * Optional. Configures the features from a Feature Registry source that need to be loaded onto the FeatureOnlineStore.
         */
        featureRegistrySource?: Schema$GoogleCloudAiplatformV1beta1FeatureViewFeatureRegistrySource;
        /**
         * Optional. The labels with user-defined metadata to organize your FeatureViews. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one FeatureOnlineStore(System labels are excluded)." System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Identifier. Name of the FeatureView. Format: `projects/{project\}/locations/{location\}/featureOnlineStores/{feature_online_store\}/featureViews/{feature_view\}`
         */
        name?: string | null;
        /**
         * Output only. A Service Account unique to this FeatureView. The role bigquery.dataViewer should be granted to this service account to allow Vertex AI Feature Store to sync data to the online store.
         */
        serviceAccountEmail?: string | null;
        /**
         * Optional. Service agent type used during data sync. By default, the Vertex AI Service Agent is used. When using an IAM Policy to isolate this FeatureView within a project (https://cloud.google.com/vertex-ai/docs/featurestore/latest/resource-policy) a separate service account should be provisioned by setting this field to `SERVICE_AGENT_TYPE_FEATURE_VIEW`. This will generate a separate service account to access the BigQuery source table.
         */
        serviceAgentType?: string | null;
        /**
         * Configures when data is to be synced/updated for this FeatureView. At the end of the sync the latest featureValues for each entityId of this FeatureView are made ready for online serving.
         */
        syncConfig?: Schema$GoogleCloudAiplatformV1beta1FeatureViewSyncConfig;
        /**
         * Output only. Timestamp when this FeatureView was last updated.
         */
        updateTime?: string | null;
        /**
         * Optional. Deprecated: please use FeatureView.index_config instead.
         */
        vectorSearchConfig?: Schema$GoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig;
    }
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureViewBigQuerySource {
        /**
         * Required. Columns to construct entity_id / row keys.
         */
        entityIdColumns?: string[] | null;
        /**
         * Required. The BigQuery view URI that will be materialized on each sync trigger based on FeatureView.SyncConfig.
         */
        uri?: string | null;
    }
    /**
     * Lookup key for a feature view.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureViewDataKey {
        /**
         * The actual Entity ID will be composed from this struct. This should match with the way ID is defined in the FeatureView spec.
         */
        compositeKey?: Schema$GoogleCloudAiplatformV1beta1FeatureViewDataKeyCompositeKey;
        /**
         * String key to use for lookup.
         */
        key?: string | null;
    }
    /**
     * ID that is comprised from several parts (columns).
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureViewDataKeyCompositeKey {
        /**
         * Parts to construct Entity ID. Should match with the same ID columns as defined in FeatureView in the same order.
         */
        parts?: string[] | null;
    }
    /**
     * A Feature Registry source for features that need to be synced to Online Store.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureViewFeatureRegistrySource {
        /**
         * Required. List of features that need to be synced to Online Store.
         */
        featureGroups?: Schema$GoogleCloudAiplatformV1beta1FeatureViewFeatureRegistrySourceFeatureGroup[];
        /**
         * Optional. The project number of the parent project of the Feature Groups.
         */
        projectNumber?: string | null;
    }
    /**
     * Features belonging to a single feature group that will be synced to Online Store.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureViewFeatureRegistrySourceFeatureGroup {
        /**
         * Required. Identifier of the feature group.
         */
        featureGroupId?: string | null;
        /**
         * Required. Identifiers of features under the feature group.
         */
        featureIds?: string[] | null;
    }
    /**
     * FeatureViewSync is a representation of sync operation which copies data from data source to Feature View in Online Store.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureViewSync {
        /**
         * Output only. Time when this FeatureViewSync is created. Creation of a FeatureViewSync means that the job is pending / waiting for sufficient resources but may not have started the actual data transfer yet.
         */
        createTime?: string | null;
        /**
         * Output only. Final status of the FeatureViewSync.
         */
        finalStatus?: Schema$GoogleRpcStatus;
        /**
         * Identifier. Name of the FeatureViewSync. Format: `projects/{project\}/locations/{location\}/featureOnlineStores/{feature_online_store\}/featureViews/{feature_view\}/featureViewSyncs/{feature_view_sync\}`
         */
        name?: string | null;
        /**
         * Output only. Time when this FeatureViewSync is finished.
         */
        runTime?: Schema$GoogleTypeInterval;
        /**
         * Output only. Summary of the sync job.
         */
        syncSummary?: Schema$GoogleCloudAiplatformV1beta1FeatureViewSyncSyncSummary;
    }
    /**
     * Configuration for Sync. Only one option is set.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureViewSyncConfig {
        /**
         * Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled runs. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: "CRON_TZ=${IANA_TIME_ZONE\}" or "TZ=${IANA_TIME_ZONE\}". The ${IANA_TIME_ZONE\} may only be a valid string from IANA time zone database. For example, "CRON_TZ=America/New_York 1 * * * *", or "TZ=America/New_York 1 * * * *".
         */
        cron?: string | null;
    }
    /**
     * Summary from the Sync job. For continuous syncs, the summary is updated periodically. For batch syncs, it gets updated on completion of the sync.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureViewSyncSyncSummary {
        /**
         * Output only. Total number of rows synced.
         */
        rowSynced?: string | null;
        /**
         * Output only. BigQuery slot milliseconds consumed for the sync job.
         */
        totalSlot?: string | null;
    }
    /**
     * Deprecated. Use IndexConfig instead.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig {
        /**
         * Optional. Configuration options for using brute force search, which simply implements the standard linear search in the database for each query. It is primarily meant for benchmarking and to generate the ground truth for approximate search.
         */
        bruteForceConfig?: Schema$GoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfigBruteForceConfig;
        /**
         * Optional. Column of crowding. This column contains crowding attribute which is a constraint on a neighbor list produced by nearest neighbor search requiring that no more than some value k' of the k neighbors returned have the same value of crowding_attribute.
         */
        crowdingColumn?: string | null;
        /**
         * Optional. The distance measure used in nearest neighbor search.
         */
        distanceMeasureType?: string | null;
        /**
         * Optional. Column of embedding. This column contains the source data to create index for vector search. embedding_column must be set when using vector search.
         */
        embeddingColumn?: string | null;
        /**
         * Optional. The number of dimensions of the input embedding.
         */
        embeddingDimension?: number | null;
        /**
         * Optional. Columns of features that're used to filter vector search results.
         */
        filterColumns?: string[] | null;
        /**
         * Optional. Configuration options for the tree-AH algorithm (Shallow tree + Asymmetric Hashing). Please refer to this paper for more details: https://arxiv.org/abs/1908.10396
         */
        treeAhConfig?: Schema$GoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfigTreeAHConfig;
    }
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfigBruteForceConfig {
    }
    export interface Schema$GoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfigTreeAHConfig {
        /**
         * Optional. Number of embeddings on each leaf node. The default value is 1000 if not set.
         */
        leafNodeEmbeddingCount?: string | null;
    }
    /**
     * Request message for FeatureOnlineStoreService.FetchFeatureValues. All the features under the requested feature view will be returned.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FetchFeatureValuesRequest {
        /**
         * Optional. Response data format. If not set, FeatureViewDataFormat.KEY_VALUE will be used.
         */
        dataFormat?: string | null;
        /**
         * Optional. The request key to fetch feature values for.
         */
        dataKey?: Schema$GoogleCloudAiplatformV1beta1FeatureViewDataKey;
        /**
         * Specify response data format. If not set, KeyValue format will be used. Deprecated. Use FetchFeatureValuesRequest.data_format.
         */
        format?: string | null;
        /**
         * Simple ID. The whole string will be used as is to identify Entity to fetch feature values for.
         */
        id?: string | null;
    }
    /**
     * Response message for FeatureOnlineStoreService.FetchFeatureValues
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FetchFeatureValuesResponse {
        /**
         * Feature values in KeyValue format.
         */
        keyValues?: Schema$GoogleCloudAiplatformV1beta1FetchFeatureValuesResponseFeatureNameValuePairList;
        /**
         * Feature values in proto Struct format.
         */
        protoStruct?: {
            [key: string]: any;
        } | null;
    }
    /**
     * Response structure in the format of key (feature name) and (feature) value pair.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FetchFeatureValuesResponseFeatureNameValuePairList {
        /**
         * List of feature names and values.
         */
        features?: Schema$GoogleCloudAiplatformV1beta1FetchFeatureValuesResponseFeatureNameValuePairListFeatureNameValuePair[];
    }
    /**
     * Feature name & value pair.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FetchFeatureValuesResponseFeatureNameValuePairListFeatureNameValuePair {
        /**
         * Feature short name.
         */
        name?: string | null;
        /**
         * Feature value.
         */
        value?: Schema$GoogleCloudAiplatformV1beta1FeatureValue;
    }
    /**
     * URI based data.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FileData {
        /**
         * Required. URI.
         */
        fileUri?: string | null;
        /**
         * Required. The IANA standard MIME type of the source data.
         */
        mimeType?: string | null;
    }
    /**
     * Assigns input data to training, validation, and test sets based on the given filters, data pieces not matched by any filter are ignored. Currently only supported for Datasets containing DataItems. If any of the filters in this message are to match nothing, then they can be set as '-' (the minus sign). Supported only for unstructured Datasets.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FilterSplit {
        /**
         * Required. A filter on DataItems of the Dataset. DataItems that match this filter are used to test the Model. A filter with same syntax as the one used in DatasetService.ListDataItems may be used. If a single DataItem is matched by more than one of the FilterSplit filters, then it is assigned to the first set that applies to it in the training, validation, test order.
         */
        testFilter?: string | null;
        /**
         * Required. A filter on DataItems of the Dataset. DataItems that match this filter are used to train the Model. A filter with same syntax as the one used in DatasetService.ListDataItems may be used. If a single DataItem is matched by more than one of the FilterSplit filters, then it is assigned to the first set that applies to it in the training, validation, test order.
         */
        trainingFilter?: string | null;
        /**
         * Required. A filter on DataItems of the Dataset. DataItems that match this filter are used to validate the Model. A filter with same syntax as the one used in DatasetService.ListDataItems may be used. If a single DataItem is matched by more than one of the FilterSplit filters, then it is assigned to the first set that applies to it in the training, validation, test order.
         */
        validationFilter?: string | null;
    }
    /**
     * The request message for MatchService.FindNeighbors.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FindNeighborsRequest {
        /**
         * The ID of the DeployedIndex that will serve the request. This request is sent to a specific IndexEndpoint, as per the IndexEndpoint.network. That IndexEndpoint also has IndexEndpoint.deployed_indexes, and each such index has a DeployedIndex.id field. The value of the field below must equal one of the DeployedIndex.id fields of the IndexEndpoint that is being called for this request.
         */
        deployedIndexId?: string | null;
        /**
         * The list of queries.
         */
        queries?: Schema$GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery[];
        /**
         * If set to true, the full datapoints (including all vector values and restricts) of the nearest neighbors are returned. Note that returning full datapoint will significantly increase the latency and cost of the query.
         */
        returnFullDatapoint?: boolean | null;
    }
    /**
     * A query to find a number of the nearest neighbors (most similar vectors) of a vector.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery {
        /**
         * The number of neighbors to find via approximate search before exact reordering is performed. If not set, the default value from scam config is used; if set, this value must be \> 0.
         */
        approximateNeighborCount?: number | null;
        /**
         * Required. The datapoint/vector whose nearest neighbors should be searched for.
         */
        datapoint?: Schema$GoogleCloudAiplatformV1beta1IndexDatapoint;
        /**
         * The fraction of the number of leaves to search, set at query time allows user to tune search performance. This value increase result in both search accuracy and latency increase. The value should be between 0.0 and 1.0. If not set or set to 0.0, query uses the default value specified in NearestNeighborSearchConfig.TreeAHConfig.fraction_leaf_nodes_to_search.
         */
        fractionLeafNodesToSearchOverride?: number | null;
        /**
         * The number of nearest neighbors to be retrieved from database for each query. If not set, will use the default from the service configuration (https://cloud.google.com/vertex-ai/docs/matching-engine/configuring-indexes#nearest-neighbor-search-config).
         */
        neighborCount?: number | null;
        /**
         * Crowding is a constraint on a neighbor list produced by nearest neighbor search requiring that no more than some value k' of the k neighbors returned have the same value of crowding_attribute. It's used for improving result diversity. This field is the maximum number of matches with the same crowding tag.
         */
        perCrowdingAttributeNeighborCount?: number | null;
    }
    /**
     * The response message for MatchService.FindNeighbors.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FindNeighborsResponse {
        /**
         * The nearest neighbors of the query datapoints.
         */
        nearestNeighbors?: Schema$GoogleCloudAiplatformV1beta1FindNeighborsResponseNearestNeighbors[];
    }
    /**
     * Nearest neighbors for one query.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FindNeighborsResponseNearestNeighbors {
        /**
         * The ID of the query datapoint.
         */
        id?: string | null;
        /**
         * All its neighbors.
         */
        neighbors?: Schema$GoogleCloudAiplatformV1beta1FindNeighborsResponseNeighbor[];
    }
    /**
     * A neighbor of the query vector.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FindNeighborsResponseNeighbor {
        /**
         * The datapoint of the neighbor. Note that full datapoints are returned only when "return_full_datapoint" is set to true. Otherwise, only the "datapoint_id" and "crowding_tag" fields are populated.
         */
        datapoint?: Schema$GoogleCloudAiplatformV1beta1IndexDatapoint;
        /**
         * The distance between the neighbor and the query vector.
         */
        distance?: number | null;
    }
    /**
     * Assigns the input data to training, validation, and test sets as per the given fractions. Any of `training_fraction`, `validation_fraction` and `test_fraction` may optionally be provided, they must sum to up to 1. If the provided ones sum to less than 1, the remainder is assigned to sets as decided by Vertex AI. If none of the fractions are set, by default roughly 80% of data is used for training, 10% for validation, and 10% for test.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FractionSplit {
        /**
         * The fraction of the input data that is to be used to evaluate the Model.
         */
        testFraction?: number | null;
        /**
         * The fraction of the input data that is to be used to train the Model.
         */
        trainingFraction?: number | null;
        /**
         * The fraction of the input data that is to be used to validate the Model.
         */
        validationFraction?: number | null;
    }
    /**
     * A predicted [FunctionCall] returned from the model that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing the parameters and their values.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FunctionCall {
        /**
         * Optional. Required. The function parameters and values in JSON object format. See [FunctionDeclaration.parameters] for parameter details.
         */
        args?: {
            [key: string]: any;
        } | null;
        /**
         * Required. The name of the function to call. Matches [FunctionDeclaration.name].
         */
        name?: string | null;
    }
    /**
     * Structured representation of a function declaration as defined by the [OpenAPI 3.0 specification](https://spec.openapis.org/oas/v3.0.3). Included in this declaration are the function name and parameters. This FunctionDeclaration is a representation of a block of code that can be used as a `Tool` by the model and executed by the client.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FunctionDeclaration {
        /**
         * Optional. Description and purpose of the function. Model uses it to decide how and whether to call the function.
         */
        description?: string | null;
        /**
         * Required. The name of the function to call. Must start with a letter or an underscore. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
         */
        name?: string | null;
        /**
         * Optional. Describes the parameters to this function in JSON Schema Object format. Reflects the Open API 3.03 Parameter Object. string Key: the name of the parameter. Parameter names are case sensitive. Schema Value: the Schema defining the type used for the parameter. For function with no parameters, this can be left unset. Example with 1 required and 1 optional parameter: type: OBJECT properties: param1: type: STRING param2: type: INTEGER required: - param1
         */
        parameters?: Schema$GoogleCloudAiplatformV1beta1Schema;
    }
    /**
     * The result output from a [FunctionCall] that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing any output from the function is used as context to the model. This should contain the result of a [FunctionCall] made based on model prediction.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1FunctionResponse {
        /**
         * Required. The name of the function to call. Matches [FunctionDeclaration.name] and [FunctionCall.name].
         */
        name?: string | null;
        /**
         * Required. The function response in JSON object format.
         */
        response?: {
            [key: string]: any;
        } | null;
    }
    /**
     * The Google Cloud Storage location where the output is to be written to.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1GcsDestination {
        /**
         * Required. Google Cloud Storage URI to output directory. If the uri doesn't end with '/', a '/' will be automatically appended. The directory is created if it doesn't exist.
         */
        outputUriPrefix?: string | null;
    }
    /**
     * The Google Cloud Storage location for the input content.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1GcsSource {
        /**
         * Required. Google Cloud Storage URI(-s) to the input file(s). May contain wildcards. For more information on wildcards, see https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames.
         */
        uris?: string[] | null;
    }
    /**
     * Request message for NotebookInternalService.GenerateAccessToken.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1GenerateAccessTokenRequest {
        /**
         * Required. The VM identity token (a JWT) for authenticating the VM. https://cloud.google.com/compute/docs/instances/verifying-instance-identity
         */
        vmToken?: string | null;
    }
    /**
     * Response message for NotebookInternalService.GenerateToken.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1GenerateAccessTokenResponse {
        /**
         * Short-lived access token string which may be used to access Google APIs.
         */
        accessToken?: string | null;
        /**
         * The time in seconds when the access token expires. Typically that's 3600.
         */
        expiresIn?: number | null;
        /**
         * Space-separated list of scopes contained in the returned token. https://cloud.google.com/docs/authentication/token-types#access-contents
         */
        scope?: string | null;
        /**
         * Type of the returned access token (e.g. "Bearer"). It specifies how the token must be used. Bearer tokens may be used by any entity without proof of identity.
         */
        tokenType?: string | null;
    }
    /**
     * Request message for [PredictionService.GenerateContent].
     */
    export interface Schema$GoogleCloudAiplatformV1beta1GenerateContentRequest {
        /**
         * Required. The content of the current conversation with the model. For single-turn queries, this is a single instance. For multi-turn queries, this is a repeated field that contains conversation history + latest request.
         */
        contents?: Schema$GoogleCloudAiplatformV1beta1Content[];
        /**
         * Optional. Generation config.
         */
        generationConfig?: Schema$GoogleCloudAiplatformV1beta1GenerationConfig;
        /**
         * Optional. Per request settings for blocking unsafe content. Enforced on GenerateContentResponse.candidates.
         */
        safetySettings?: Schema$GoogleCloudAiplatformV1beta1SafetySetting[];
        /**
         * Optional. A list of `Tools` the model may use to generate the next response. A `Tool` is a piece of code that enables the system to interact with external systems to perform an action, or set of actions, outside of knowledge and scope of the model.
         */
        tools?: Schema$GoogleCloudAiplatformV1beta1Tool[];
    }
    /**
     * Response message for [PredictionService.GenerateContent].
     */
    export interface Schema$GoogleCloudAiplatformV1beta1GenerateContentResponse {
        /**
         * Output only. Generated candidates.
         */
        candidates?: Schema$GoogleCloudAiplatformV1beta1Candidate[];
        /**
         * Output only. Content filter results for a prompt sent in the request. Note: Sent only in the first stream chunk. Only happens when no candidates were generated due to content violations.
         */
        promptFeedback?: Schema$GoogleCloudAiplatformV1beta1GenerateContentResponsePromptFeedback;
        /**
         * Usage metadata about the response(s).
         */
        usageMetadata?: Schema$GoogleCloudAiplatformV1beta1GenerateContentResponseUsageMetadata;
    }
    /**
     * Content filter results for a prompt sent in the request.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1GenerateContentResponsePromptFeedback {
        /**
         * Output only. Blocked reason.
         */
        blockReason?: string | null;
        /**
         * Output only. A readable block reason message.
         */
        blockReasonMessage?: string | null;
        /**
         * Output only. Safety ratings.
         */
        safetyRatings?: Schema$GoogleCloudAiplatformV1beta1SafetyRating[];
    }
    /**
     * Usage metadata about response(s).
     */
    export interface Schema$GoogleCloudAiplatformV1beta1GenerateContentResponseUsageMetadata {
        /**
         * Number of tokens in the response(s).
         */
        candidatesTokenCount?: number | null;
        /**
         * Number of tokens in the request.
         */
        promptTokenCount?: number | null;
        totalTokenCount?: number | null;
    }
    /**
     * Generation config.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1GenerationConfig {
        /**
         * Optional. Number of candidates to generate.
         */
        candidateCount?: number | null;
        /**
         * Optional. The maximum number of output tokens to generate per message.
         */
        maxOutputTokens?: number | null;
        /**
         * Optional. Stop sequences.
         */
        stopSequences?: string[] | null;
        /**
         * Optional. Controls the randomness of predictions.
         */
        temperature?: number | null;
        /**
         * Optional. If specified, top-k sampling will be used.
         */
        topK?: number | null;
        /**
         * Optional. If specified, nucleus sampling will be used.
         */
        topP?: number | null;
    }
    /**
     * Generic Metadata shared by all operations.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata {
        /**
         * Output only. Time when the operation was created.
         */
        createTime?: string | null;
        /**
         * Output only. Partial failures encountered. E.g. single files that couldn't be read. This field should never exceed 20 entries. Status details field will contain standard Google Cloud error details.
         */
        partialFailures?: Schema$GoogleRpcStatus[];
        /**
         * Output only. Time when the operation was updated for the last time. If the operation has finished (successfully or not), this is the finish time.
         */
        updateTime?: string | null;
    }
    /**
     * Contains information about the source of the models generated from Generative AI Studio.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1GenieSource {
        /**
         * Required. The public base model URI.
         */
        baseModelUri?: string | null;
    }
    /**
     * Tool to retrieve public web data for grounding, powered by Google.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1GoogleSearchRetrieval {
        /**
         * Optional. Disable using the result from this tool in detecting grounding attribution. This does not affect how the result is given to the model for generation.
         */
        disableAttribution?: boolean | null;
    }
    /**
     * Grounding attribution.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1GroundingAttribution {
        /**
         * Optional. Output only. Confidence score of the attribution. Ranges from 0 to 1. 1 is the most confident.
         */
        confidenceScore?: number | null;
        /**
         * Output only. Segment of the content this attribution belongs to.
         */
        segment?: Schema$GoogleCloudAiplatformV1beta1Segment;
        /**
         * Optional. Attribution from the web.
         */
        web?: Schema$GoogleCloudAiplatformV1beta1GroundingAttributionWeb;
    }
    /**
     * Attribution from the web.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1GroundingAttributionWeb {
        /**
         * Output only. Title of the attribution.
         */
        title?: string | null;
        /**
         * Output only. URI reference of the attribution.
         */
        uri?: string | null;
    }
    /**
     * Metadata returned to client when grounding is enabled.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1GroundingMetadata {
        /**
         * Optional. List of grounding attributions.
         */
        groundingAttributions?: Schema$GoogleCloudAiplatformV1beta1GroundingAttribution[];
        /**
         * Optional. Web search queries for the following-up web search.
         */
        webSearchQueries?: string[] | null;
    }
    /**
     * Represents a HyperparameterTuningJob. A HyperparameterTuningJob has a Study specification and multiple CustomJobs with identical CustomJob specification.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1HyperparameterTuningJob {
        /**
         * Output only. Time when the HyperparameterTuningJob was created.
         */
        createTime?: string | null;
        /**
         * Required. The display name of the HyperparameterTuningJob. The name can be up to 128 characters long and can consist of any UTF-8 characters.
         */
        displayName?: string | null;
        /**
         * Customer-managed encryption key options for a HyperparameterTuningJob. If this is set, then all resources created by the HyperparameterTuningJob will be encrypted with the provided encryption key.
         */
        encryptionSpec?: Schema$GoogleCloudAiplatformV1beta1EncryptionSpec;
        /**
         * Output only. Time when the HyperparameterTuningJob entered any of the following states: `JOB_STATE_SUCCEEDED`, `JOB_STATE_FAILED`, `JOB_STATE_CANCELLED`.
         */
        endTime?: string | null;
        /**
         * Output only. Only populated when job's state is JOB_STATE_FAILED or JOB_STATE_CANCELLED.
         */
        error?: Schema$GoogleRpcStatus;
        /**
         * The labels with user-defined metadata to organize HyperparameterTuningJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * The number of failed Trials that need to be seen before failing the HyperparameterTuningJob. If set to 0, Vertex AI decides how many Trials must fail before the whole job fails.
         */
        maxFailedTrialCount?: number | null;
        /**
         * Required. The desired total number of Trials.
         */
        maxTrialCount?: number | null;
        /**
         * Output only. Resource name of the HyperparameterTuningJob.
         */
        name?: string | null;
        /**
         * Required. The desired number of Trials to run in parallel.
         */
        parallelTrialCount?: number | null;
        /**
         * Output only. Time when the HyperparameterTuningJob for the first time entered the `JOB_STATE_RUNNING` state.
         */
        startTime?: string | null;
        /**
         * Output only. The detailed state of the job.
         */
        state?: string | null;
        /**
         * Required. Study configuration of the HyperparameterTuningJob.
         */
        studySpec?: Schema$GoogleCloudAiplatformV1beta1StudySpec;
        /**
         * Required. The spec of a trial job. The same spec applies to the CustomJobs created in all the trials.
         */
        trialJobSpec?: Schema$GoogleCloudAiplatformV1beta1CustomJobSpec;
        /**
         * Output only. Trials of the HyperparameterTuningJob.
         */
        trials?: Schema$GoogleCloudAiplatformV1beta1Trial[];
        /**
         * Output only. Time when the HyperparameterTuningJob was most recently updated.
         */
        updateTime?: string | null;
    }
    /**
     * Matcher for Features of an EntityType by Feature ID.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1IdMatcher {
        /**
         * Required. The following are accepted as `ids`: * A single-element list containing only `*`, which selects all Features in the target EntityType, or * A list containing only Feature IDs, which selects only Features with those IDs in the target EntityType.
         */
        ids?: string[] | null;
    }
    /**
     * Describes the location from where we import data into a Dataset, together with the labels that will be applied to the DataItems and the Annotations.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ImportDataConfig {
        /**
         * Labels that will be applied to newly imported Annotations. If two Annotations are identical, one of them will be deduped. Two Annotations are considered identical if their payload, payload_schema_uri and all of their labels are the same. These labels will be overridden by Annotation labels specified inside index file referenced by import_schema_uri, e.g. jsonl file.
         */
        annotationLabels?: {
            [key: string]: string;
        } | null;
        /**
         * Labels that will be applied to newly imported DataItems. If an identical DataItem as one being imported already exists in the Dataset, then these labels will be appended to these of the already existing one, and if labels with identical key is imported before, the old label value will be overwritten. If two DataItems are identical in the same import data operation, the labels will be combined and if key collision happens in this case, one of the values will be picked randomly. Two DataItems are considered identical if their content bytes are identical (e.g. image bytes or pdf bytes). These labels will be overridden by Annotation labels specified inside index file referenced by import_schema_uri, e.g. jsonl file.
         */
        dataItemLabels?: {
            [key: string]: string;
        } | null;
        /**
         * The Google Cloud Storage location for the input content.
         */
        gcsSource?: Schema$GoogleCloudAiplatformV1beta1GcsSource;
        /**
         * Required. Points to a YAML file stored on Google Cloud Storage describing the import format. Validation will be done against the schema. The schema is defined as an [OpenAPI 3.0.2 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject).
         */
        importSchemaUri?: string | null;
    }
    /**
     * Runtime operation information for DatasetService.ImportData.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ImportDataOperationMetadata {
        /**
         * The common part of the operation metadata.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Request message for DatasetService.ImportData.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ImportDataRequest {
        /**
         * Required. The desired input locations. The contents of all input locations will be imported in one batch.
         */
        importConfigs?: Schema$GoogleCloudAiplatformV1beta1ImportDataConfig[];
    }
    /**
     * Response message for DatasetService.ImportData.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ImportDataResponse {
    }
    /**
     * Details of ExtensionRegistryService.ImportExtension operation.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ImportExtensionOperationMetadata {
        /**
         * The common part of the operation metadata.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Details of operations that perform import Feature values.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata {
        /**
         * List of ImportFeatureValues operations running under a single EntityType that are blocking this operation.
         */
        blockingOperationIds?: string[] | null;
        /**
         * Operation metadata for Featurestore import Feature values.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
        /**
         * Number of entities that have been imported by the operation.
         */
        importedEntityCount?: string | null;
        /**
         * Number of Feature values that have been imported by the operation.
         */
        importedFeatureValueCount?: string | null;
        /**
         * The number of rows in input source that weren't imported due to either * Not having any featureValues. * Having a null entityId. * Having a null timestamp. * Not being parsable (applicable for CSV sources).
         */
        invalidRowCount?: string | null;
        /**
         * The source URI from where Feature values are imported.
         */
        sourceUris?: string[] | null;
        /**
         * The number rows that weren't ingested due to having timestamps outside the retention boundary.
         */
        timestampOutsideRetentionRowsCount?: string | null;
    }
    /**
     * Request message for FeaturestoreService.ImportFeatureValues.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ImportFeatureValuesRequest {
        avroSource?: Schema$GoogleCloudAiplatformV1beta1AvroSource;
        bigquerySource?: Schema$GoogleCloudAiplatformV1beta1BigQuerySource;
        csvSource?: Schema$GoogleCloudAiplatformV1beta1CsvSource;
        /**
         * If true, API doesn't start ingestion analysis pipeline.
         */
        disableIngestionAnalysis?: boolean | null;
        /**
         * If set, data will not be imported for online serving. This is typically used for backfilling, where Feature generation timestamps are not in the timestamp range needed for online serving.
         */
        disableOnlineServing?: boolean | null;
        /**
         * Source column that holds entity IDs. If not provided, entity IDs are extracted from the column named entity_id.
         */
        entityIdField?: string | null;
        /**
         * Required. Specifications defining which Feature values to import from the entity. The request fails if no feature_specs are provided, and having multiple feature_specs for one Feature is not allowed.
         */
        featureSpecs?: Schema$GoogleCloudAiplatformV1beta1ImportFeatureValuesRequestFeatureSpec[];
        /**
         * Single Feature timestamp for all entities being imported. The timestamp must not have higher than millisecond precision.
         */
        featureTime?: string | null;
        /**
         * Source column that holds the Feature timestamp for all Feature values in each entity.
         */
        featureTimeField?: string | null;
        /**
         * Specifies the number of workers that are used to write data to the Featurestore. Consider the online serving capacity that you require to achieve the desired import throughput without interfering with online serving. The value must be positive, and less than or equal to 100. If not set, defaults to using 1 worker. The low count ensures minimal impact on online serving performance.
         */
        workerCount?: number | null;
    }
    /**
     * Defines the Feature value(s) to import.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ImportFeatureValuesRequestFeatureSpec {
        /**
         * Required. ID of the Feature to import values of. This Feature must exist in the target EntityType, or the request will fail.
         */
        id?: string | null;
        /**
         * Source column to get the Feature values from. If not set, uses the column with the same name as the Feature ID.
         */
        sourceField?: string | null;
    }
    /**
     * Response message for FeaturestoreService.ImportFeatureValues.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ImportFeatureValuesResponse {
        /**
         * Number of entities that have been imported by the operation.
         */
        importedEntityCount?: string | null;
        /**
         * Number of Feature values that have been imported by the operation.
         */
        importedFeatureValueCount?: string | null;
        /**
         * The number of rows in input source that weren't imported due to either * Not having any featureValues. * Having a null entityId. * Having a null timestamp. * Not being parsable (applicable for CSV sources).
         */
        invalidRowCount?: string | null;
        /**
         * The number rows that weren't ingested due to having feature timestamps outside the retention boundary.
         */
        timestampOutsideRetentionRowsCount?: string | null;
    }
    /**
     * Request message for ModelService.ImportModelEvaluation
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ImportModelEvaluationRequest {
        /**
         * Required. Model evaluation resource to be imported.
         */
        modelEvaluation?: Schema$GoogleCloudAiplatformV1beta1ModelEvaluation;
    }
    /**
     * A representation of a collection of database items organized in a way that allows for approximate nearest neighbor (a.k.a ANN) algorithms search.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1Index {
        /**
         * Output only. Timestamp when this Index was created.
         */
        createTime?: string | null;
        /**
         * Output only. The pointers to DeployedIndexes created from this Index. An Index can be only deleted if all its DeployedIndexes had been undeployed first.
         */
        deployedIndexes?: Schema$GoogleCloudAiplatformV1beta1DeployedIndexRef[];
        /**
         * The description of the Index.
         */
        description?: string | null;
        /**
         * Required. The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
         */
        displayName?: string | null;
        /**
         * Immutable. Customer-managed encryption key spec for an Index. If set, this Index and all sub-resources of this Index will be secured by this key.
         */
        encryptionSpec?: Schema$GoogleCloudAiplatformV1beta1EncryptionSpec;
        /**
         * Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
         */
        etag?: string | null;
        /**
         * Output only. Stats of the index resource.
         */
        indexStats?: Schema$GoogleCloudAiplatformV1beta1IndexStats;
        /**
         * Immutable. The update method to use with this Index. If not set, BATCH_UPDATE will be used by default.
         */
        indexUpdateMethod?: string | null;
        /**
         * The labels with user-defined metadata to organize your Indexes. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * An additional information about the Index; the schema of the metadata can be found in metadata_schema.
         */
        metadata?: any | null;
        /**
         * Immutable. Points to a YAML file stored on Google Cloud Storage describing additional information about the Index, that is specific to it. Unset if the Index does not have any additional information. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.
         */
        metadataSchemaUri?: string | null;
        /**
         * Output only. The resource name of the Index.
         */
        name?: string | null;
        /**
         * Output only. Timestamp when this Index was most recently updated. This also includes any update to the contents of the Index. Note that Operations working on this Index may have their Operations.metadata.generic_metadata.update_time a little after the value of this timestamp, yet that does not mean their results are not already reflected in the Index. Result of any successfully completed Operation on the Index is reflected in it.
         */
        updateTime?: string | null;
    }
    /**
     * A datapoint of Index.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1IndexDatapoint {
        /**
         * Optional. CrowdingTag of the datapoint, the number of neighbors to return in each crowding can be configured during query.
         */
        crowdingTag?: Schema$GoogleCloudAiplatformV1beta1IndexDatapointCrowdingTag;
        /**
         * Required. Unique identifier of the datapoint.
         */
        datapointId?: string | null;
        /**
         * Required. Feature embedding vector. An array of numbers with the length of [NearestNeighborSearchConfig.dimensions].
         */
        featureVector?: number[] | null;
        /**
         * Optional. List of Restrict of the datapoint, used to perform "restricted searches" where boolean rule are used to filter the subset of the database eligible for matching. This uses numeric comparisons.
         */
        numericRestricts?: Schema$GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction[];
        /**
         * Optional. List of Restrict of the datapoint, used to perform "restricted searches" where boolean rule are used to filter the subset of the database eligible for matching. This uses categorical tokens. See: https://cloud.google.com/vertex-ai/docs/matching-engine/filtering
         */
        restricts?: Schema$GoogleCloudAiplatformV1beta1IndexDatapointRestriction[];
    }
    /**
     * Crowding tag is a constraint on a neighbor list produced by nearest neighbor search requiring that no more than some value k' of the k neighbors returned have the same value of crowding_attribute.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1IndexDatapointCrowdingTag {
        /**
         * The attribute value used for crowding. The maximum number of neighbors to return per crowding attribute value (per_crowding_attribute_num_neighbors) is configured per-query. This field is ignored if per_crowding_attribute_num_neighbors is larger than the total number of neighbors to return for a given query.
         */
        crowdingAttribute?: string | null;
    }
    /**
     * This field allows restricts to be based on numeric comparisons rather than categorical tokens.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction {
        /**
         * The namespace of this restriction. e.g.: cost.
         */
        namespace?: string | null;
        /**
         * This MUST be specified for queries and must NOT be specified for datapoints.
         */
        op?: string | null;
        /**
         * Represents 64 bit float.
         */
        valueDouble?: number | null;
        /**
         * Represents 32 bit float.
         */
        valueFloat?: number | null;
        /**
         * Represents 64 bit integer.
         */
        valueInt?: string | null;
    }
    /**
     * Restriction of a datapoint which describe its attributes(tokens) from each of several attribute categories(namespaces).
     */
    export interface Schema$GoogleCloudAiplatformV1beta1IndexDatapointRestriction {
        /**
         * The attributes to allow in this namespace. e.g.: 'red'
         */
        allowList?: string[] | null;
        /**
         * The attributes to deny in this namespace. e.g.: 'blue'
         */
        denyList?: string[] | null;
        /**
         * The namespace of this restriction. e.g.: color.
         */
        namespace?: string | null;
    }
    /**
     * Indexes are deployed into it. An IndexEndpoint can have multiple DeployedIndexes.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1IndexEndpoint {
        /**
         * Output only. Timestamp when this IndexEndpoint was created.
         */
        createTime?: string | null;
        /**
         * Output only. The indexes deployed in this endpoint.
         */
        deployedIndexes?: Schema$GoogleCloudAiplatformV1beta1DeployedIndex[];
        /**
         * The description of the IndexEndpoint.
         */
        description?: string | null;
        /**
         * Required. The display name of the IndexEndpoint. The name can be up to 128 characters long and can consist of any UTF-8 characters.
         */
        displayName?: string | null;
        /**
         * Optional. Deprecated: If true, expose the IndexEndpoint via private service connect. Only one of the fields, network or enable_private_service_connect, can be set.
         */
        enablePrivateServiceConnect?: boolean | null;
        /**
         * Immutable. Customer-managed encryption key spec for an IndexEndpoint. If set, this IndexEndpoint and all sub-resources of this IndexEndpoint will be secured by this key.
         */
        encryptionSpec?: Schema$GoogleCloudAiplatformV1beta1EncryptionSpec;
        /**
         * Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
         */
        etag?: string | null;
        /**
         * The labels with user-defined metadata to organize your IndexEndpoints. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Output only. The resource name of the IndexEndpoint.
         */
        name?: string | null;
        /**
         * Optional. The full name of the Google Compute Engine [network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the IndexEndpoint should be peered. Private services access must already be configured for the network. If left unspecified, the Endpoint is not peered with any network. network and private_service_connect_config are mutually exclusive. [Format](https://cloud.google.com/compute/docs/reference/rest/v1/networks/insert): `projects/{project\}/global/networks/{network\}`. Where {project\} is a project number, as in '12345', and {network\} is network name.
         */
        network?: string | null;
        /**
         * Optional. Configuration for private service connect. network and private_service_connect_config are mutually exclusive.
         */
        privateServiceConnectConfig?: Schema$GoogleCloudAiplatformV1beta1PrivateServiceConnectConfig;
        /**
         * Output only. If public_endpoint_enabled is true, this field will be populated with the domain name to use for this index endpoint.
         */
        publicEndpointDomainName?: string | null;
        /**
         * Optional. If true, the deployed index will be accessible through public endpoint.
         */
        publicEndpointEnabled?: boolean | null;
        /**
         * Output only. Timestamp when this IndexEndpoint was last updated. This timestamp is not updated when the endpoint's DeployedIndexes are updated, e.g. due to updates of the original Indexes they are the deployments of.
         */
        updateTime?: string | null;
    }
    /**
     * IndexPrivateEndpoints proto is used to provide paths for users to send requests via private endpoints (e.g. private service access, private service connect). To send request via private service access, use match_grpc_address. To send request via private service connect, use service_attachment.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1IndexPrivateEndpoints {
        /**
         * Output only. The ip address used to send match gRPC requests.
         */
        matchGrpcAddress?: string | null;
        /**
         * Output only. PscAutomatedEndpoints is populated if private service connect is enabled if PscAutomatedConfig is set.
         */
        pscAutomatedEndpoints?: Schema$GoogleCloudAiplatformV1beta1PscAutomatedEndpoints[];
        /**
         * Output only. The name of the service attachment resource. Populated if private service connect is enabled.
         */
        serviceAttachment?: string | null;
    }
    /**
     * Stats of the Index.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1IndexStats {
        /**
         * Output only. The number of shards in the Index.
         */
        shardsCount?: number | null;
        /**
         * Output only. The number of vectors in the Index.
         */
        vectorsCount?: string | null;
    }
    /**
     * Specifies Vertex AI owned input data to be used for training, and possibly evaluating, the Model.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1InputDataConfig {
        /**
         * Applicable only to custom training with Datasets that have DataItems and Annotations. Cloud Storage URI that points to a YAML file describing the annotation schema. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). The schema files that can be used here are found in gs://google-cloud-aiplatform/schema/dataset/annotation/ , note that the chosen schema must be consistent with metadata of the Dataset specified by dataset_id. Only Annotations that both match this schema and belong to DataItems not ignored by the split method are used in respectively training, validation or test role, depending on the role of the DataItem they are on. When used in conjunction with annotations_filter, the Annotations used for training are filtered by both annotations_filter and annotation_schema_uri.
         */
        annotationSchemaUri?: string | null;
        /**
         * Applicable only to Datasets that have DataItems and Annotations. A filter on Annotations of the Dataset. Only Annotations that both match this filter and belong to DataItems not ignored by the split method are used in respectively training, validation or test role, depending on the role of the DataItem they are on (for the auto-assigned that role is decided by Vertex AI). A filter with same syntax as the one used in ListAnnotations may be used, but note here it filters across all Annotations of the Dataset, and not just within a single DataItem.
         */
        annotationsFilter?: string | null;
        /**
         * Only applicable to custom training with tabular Dataset with BigQuery source. The BigQuery project location where the training data is to be written to. In the given project a new dataset is created with name `dataset___` where timestamp is in YYYY_MM_DDThh_mm_ss_sssZ format. All training input data is written into that dataset. In the dataset three tables are created, `training`, `validation` and `test`. * AIP_DATA_FORMAT = "bigquery". * AIP_TRAINING_DATA_URI = "bigquery_destination.dataset___.training" * AIP_VALIDATION_DATA_URI = "bigquery_destination.dataset___.validation" * AIP_TEST_DATA_URI = "bigquery_destination.dataset___.test"
         */
        bigqueryDestination?: Schema$GoogleCloudAiplatformV1beta1BigQueryDestination;
        /**
         * Required. The ID of the Dataset in the same Project and Location which data will be used to train the Model. The Dataset must use schema compatible with Model being trained, and what is compatible should be described in the used TrainingPipeline's training_task_definition. For tabular Datasets, all their data is exported to training, to pick and choose from.
         */
        datasetId?: string | null;
        /**
         * Split based on the provided filters for each set.
         */
        filterSplit?: Schema$GoogleCloudAiplatformV1beta1FilterSplit;
        /**
         * Split based on fractions defining the size of each set.
         */
        fractionSplit?: Schema$GoogleCloudAiplatformV1beta1FractionSplit;
        /**
         * The Cloud Storage location where the training data is to be written to. In the given directory a new directory is created with name: `dataset---` where timestamp is in YYYY-MM-DDThh:mm:ss.sssZ ISO-8601 format. All training input data is written into that directory. The Vertex AI environment variables representing Cloud Storage data URIs are represented in the Cloud Storage wildcard format to support sharded data. e.g.: "gs://.../training-*.jsonl" * AIP_DATA_FORMAT = "jsonl" for non-tabular data, "csv" for tabular data * AIP_TRAINING_DATA_URI = "gcs_destination/dataset---/training-*.${AIP_DATA_FORMAT\}" * AIP_VALIDATION_DATA_URI = "gcs_destination/dataset---/validation-*.${AIP_DATA_FORMAT\}" * AIP_TEST_DATA_URI = "gcs_destination/dataset---/test-*.${AIP_DATA_FORMAT\}"
         */
        gcsDestination?: Schema$GoogleCloudAiplatformV1beta1GcsDestination;
        /**
         * Whether to persist the ML use assignment to data item system labels.
         */
        persistMlUseAssignment?: boolean | null;
        /**
         * Supported only for tabular Datasets. Split based on a predefined key.
         */
        predefinedSplit?: Schema$GoogleCloudAiplatformV1beta1PredefinedSplit;
        /**
         * Only applicable to Datasets that have SavedQueries. The ID of a SavedQuery (annotation set) under the Dataset specified by dataset_id used for filtering Annotations for training. Only Annotations that are associated with this SavedQuery are used in respectively training. When used in conjunction with annotations_filter, the Annotations used for training are filtered by both saved_query_id and annotations_filter. Only one of saved_query_id and annotation_schema_uri should be specified as both of them represent the same thing: problem type.
         */
        savedQueryId?: string | null;
        /**
         * Supported only for tabular Datasets. Split based on the distribution of the specified column.
         */
        stratifiedSplit?: Schema$GoogleCloudAiplatformV1beta1StratifiedSplit;
        /**
         * Supported only for tabular Datasets. Split based on the timestamp of the input data pieces.
         */
        timestampSplit?: Schema$GoogleCloudAiplatformV1beta1TimestampSplit;
    }
    /**
     * A list of int64 values.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1Int64Array {
        /**
         * A list of int64 values.
         */
        values?: string[] | null;
    }
    /**
     * An attribution method that computes the Aumann-Shapley value taking advantage of the model's fully differentiable structure. Refer to this paper for more details: https://arxiv.org/abs/1703.01365
     */
    export interface Schema$GoogleCloudAiplatformV1beta1IntegratedGradientsAttribution {
        /**
         * Config for IG with blur baseline. When enabled, a linear path from the maximally blurred image to the input image is created. Using a blurred baseline instead of zero (black image) is motivated by the BlurIG approach explained here: https://arxiv.org/abs/2004.03383
         */
        blurBaselineConfig?: Schema$GoogleCloudAiplatformV1beta1BlurBaselineConfig;
        /**
         * Config for SmoothGrad approximation of gradients. When enabled, the gradients are approximated by averaging the gradients from noisy samples in the vicinity of the inputs. Adding noise can help improve the computed gradients. Refer to this paper for more details: https://arxiv.org/pdf/1706.03825.pdf
         */
        smoothGradConfig?: Schema$GoogleCloudAiplatformV1beta1SmoothGradConfig;
        /**
         * Required. The number of steps for approximating the path integral. A good value to start is 50 and gradually increase until the sum to diff property is within the desired error range. Valid range of its value is [1, 100], inclusively.
         */
        stepCount?: number | null;
    }
    /**
     * Request message for [InternalOsServiceStateInstance].
     */
    export interface Schema$GoogleCloudAiplatformV1beta1InternalOsServiceStateInstance {
        /**
         * Required. internal service name.
         */
        serviceName?: string | null;
        /**
         * Required. internal service state.
         */
        serviceState?: string | null;
    }
    /**
     * Contains information about the Large Model.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1LargeModelReference {
        /**
         * Required. The unique name of the large Foundation or pre-built model. Like "chat-bison", "text-bison". Or model name with version ID, like "chat-bison@001", "text-bison@005", etc.
         */
        name?: string | null;
    }
    /**
     * A subgraph of the overall lineage graph. Event edges connect Artifact and Execution nodes.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1LineageSubgraph {
        /**
         * The Artifact nodes in the subgraph.
         */
        artifacts?: Schema$GoogleCloudAiplatformV1beta1Artifact[];
        /**
         * The Event edges between Artifacts and Executions in the subgraph.
         */
        events?: Schema$GoogleCloudAiplatformV1beta1Event[];
        /**
         * The Execution nodes in the subgraph.
         */
        executions?: Schema$GoogleCloudAiplatformV1beta1Execution[];
    }
    /**
     * Response message for DatasetService.ListAnnotations.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListAnnotationsResponse {
        /**
         * A list of Annotations that matches the specified filter in the request.
         */
        annotations?: Schema$GoogleCloudAiplatformV1beta1Annotation[];
        /**
         * The standard List next-page token.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for MetadataService.ListArtifacts.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListArtifactsResponse {
        /**
         * The Artifacts retrieved from the MetadataStore.
         */
        artifacts?: Schema$GoogleCloudAiplatformV1beta1Artifact[];
        /**
         * A token, which can be sent as ListArtifactsRequest.page_token to retrieve the next page. If this field is not populated, there are no subsequent pages.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for JobService.ListBatchPredictionJobs
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListBatchPredictionJobsResponse {
        /**
         * List of BatchPredictionJobs in the requested page.
         */
        batchPredictionJobs?: Schema$GoogleCloudAiplatformV1beta1BatchPredictionJob[];
        /**
         * A token to retrieve the next page of results. Pass to ListBatchPredictionJobsRequest.page_token to obtain that page.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for MetadataService.ListContexts.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListContextsResponse {
        /**
         * The Contexts retrieved from the MetadataStore.
         */
        contexts?: Schema$GoogleCloudAiplatformV1beta1Context[];
        /**
         * A token, which can be sent as ListContextsRequest.page_token to retrieve the next page. If this field is not populated, there are no subsequent pages.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for JobService.ListCustomJobs
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListCustomJobsResponse {
        /**
         * List of CustomJobs in the requested page.
         */
        customJobs?: Schema$GoogleCloudAiplatformV1beta1CustomJob[];
        /**
         * A token to retrieve the next page of results. Pass to ListCustomJobsRequest.page_token to obtain that page.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for DatasetService.ListDataItems.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListDataItemsResponse {
        /**
         * A list of DataItems that matches the specified filter in the request.
         */
        dataItems?: Schema$GoogleCloudAiplatformV1beta1DataItem[];
        /**
         * The standard List next-page token.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for JobService.ListDataLabelingJobs.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListDataLabelingJobsResponse {
        /**
         * A list of DataLabelingJobs that matches the specified filter in the request.
         */
        dataLabelingJobs?: Schema$GoogleCloudAiplatformV1beta1DataLabelingJob[];
        /**
         * The standard List next-page token.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for DatasetService.ListDatasets.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListDatasetsResponse {
        /**
         * A list of Datasets that matches the specified filter in the request.
         */
        datasets?: Schema$GoogleCloudAiplatformV1beta1Dataset[];
        /**
         * The standard List next-page token.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for DatasetService.ListDatasetVersions.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListDatasetVersionsResponse {
        /**
         * A list of DatasetVersions that matches the specified filter in the request.
         */
        datasetVersions?: Schema$GoogleCloudAiplatformV1beta1DatasetVersion[];
        /**
         * The standard List next-page token.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for ListDeploymentResourcePools method.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListDeploymentResourcePoolsResponse {
        /**
         * The DeploymentResourcePools from the specified location.
         */
        deploymentResourcePools?: Schema$GoogleCloudAiplatformV1beta1DeploymentResourcePool[];
        /**
         * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for EndpointService.ListEndpoints.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListEndpointsResponse {
        /**
         * List of Endpoints in the requested page.
         */
        endpoints?: Schema$GoogleCloudAiplatformV1beta1Endpoint[];
        /**
         * A token to retrieve the next page of results. Pass to ListEndpointsRequest.page_token to obtain that page.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for FeaturestoreService.ListEntityTypes.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListEntityTypesResponse {
        /**
         * The EntityTypes matching the request.
         */
        entityTypes?: Schema$GoogleCloudAiplatformV1beta1EntityType[];
        /**
         * A token, which can be sent as ListEntityTypesRequest.page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for MetadataService.ListExecutions.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListExecutionsResponse {
        /**
         * The Executions retrieved from the MetadataStore.
         */
        executions?: Schema$GoogleCloudAiplatformV1beta1Execution[];
        /**
         * A token, which can be sent as ListExecutionsRequest.page_token to retrieve the next page. If this field is not populated, there are no subsequent pages.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for FeatureRegistryService.ListFeatureGroups.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListFeatureGroupsResponse {
        /**
         * The FeatureGroups matching the request.
         */
        featureGroups?: Schema$GoogleCloudAiplatformV1beta1FeatureGroup[];
        /**
         * A token, which can be sent as ListFeatureGroupsRequest.page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for FeatureOnlineStoreAdminService.ListFeatureOnlineStores.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListFeatureOnlineStoresResponse {
        /**
         * The FeatureOnlineStores matching the request.
         */
        featureOnlineStores?: Schema$GoogleCloudAiplatformV1beta1FeatureOnlineStore[];
        /**
         * A token, which can be sent as ListFeatureOnlineStoresRequest.page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for FeaturestoreService.ListFeatures. Response message for FeatureRegistryService.ListFeatures.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListFeaturesResponse {
        /**
         * The Features matching the request.
         */
        features?: Schema$GoogleCloudAiplatformV1beta1Feature[];
        /**
         * A token, which can be sent as ListFeaturesRequest.page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for FeaturestoreService.ListFeaturestores.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListFeaturestoresResponse {
        /**
         * The Featurestores matching the request.
         */
        featurestores?: Schema$GoogleCloudAiplatformV1beta1Featurestore[];
        /**
         * A token, which can be sent as ListFeaturestoresRequest.page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for FeatureOnlineStoreAdminService.ListFeatureViews.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListFeatureViewsResponse {
        /**
         * The FeatureViews matching the request.
         */
        featureViews?: Schema$GoogleCloudAiplatformV1beta1FeatureView[];
        /**
         * A token, which can be sent as ListFeatureViewsRequest.page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for FeatureOnlineStoreAdminService.ListFeatureViewSyncs.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListFeatureViewSyncsResponse {
        /**
         * The FeatureViewSyncs matching the request.
         */
        featureViewSyncs?: Schema$GoogleCloudAiplatformV1beta1FeatureViewSync[];
        /**
         * A token, which can be sent as ListFeatureViewSyncsRequest.page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for JobService.ListHyperparameterTuningJobs
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListHyperparameterTuningJobsResponse {
        /**
         * List of HyperparameterTuningJobs in the requested page. HyperparameterTuningJob.trials of the jobs will be not be returned.
         */
        hyperparameterTuningJobs?: Schema$GoogleCloudAiplatformV1beta1HyperparameterTuningJob[];
        /**
         * A token to retrieve the next page of results. Pass to ListHyperparameterTuningJobsRequest.page_token to obtain that page.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for IndexEndpointService.ListIndexEndpoints.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListIndexEndpointsResponse {
        /**
         * List of IndexEndpoints in the requested page.
         */
        indexEndpoints?: Schema$GoogleCloudAiplatformV1beta1IndexEndpoint[];
        /**
         * A token to retrieve next page of results. Pass to ListIndexEndpointsRequest.page_token to obtain that page.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for IndexService.ListIndexes.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListIndexesResponse {
        /**
         * List of indexes in the requested page.
         */
        indexes?: Schema$GoogleCloudAiplatformV1beta1Index[];
        /**
         * A token to retrieve next page of results. Pass to ListIndexesRequest.page_token to obtain that page.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for MetadataService.ListMetadataSchemas.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListMetadataSchemasResponse {
        /**
         * The MetadataSchemas found for the MetadataStore.
         */
        metadataSchemas?: Schema$GoogleCloudAiplatformV1beta1MetadataSchema[];
        /**
         * A token, which can be sent as ListMetadataSchemasRequest.page_token to retrieve the next page. If this field is not populated, there are no subsequent pages.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for MetadataService.ListMetadataStores.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListMetadataStoresResponse {
        /**
         * The MetadataStores found for the Location.
         */
        metadataStores?: Schema$GoogleCloudAiplatformV1beta1MetadataStore[];
        /**
         * A token, which can be sent as ListMetadataStoresRequest.page_token to retrieve the next page. If this field is not populated, there are no subsequent pages.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for JobService.ListModelDeploymentMonitoringJobs.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListModelDeploymentMonitoringJobsResponse {
        /**
         * A list of ModelDeploymentMonitoringJobs that matches the specified filter in the request.
         */
        modelDeploymentMonitoringJobs?: Schema$GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob[];
        /**
         * The standard List next-page token.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for ModelService.ListModelEvaluationSlices.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListModelEvaluationSlicesResponse {
        /**
         * List of ModelEvaluations in the requested page.
         */
        modelEvaluationSlices?: Schema$GoogleCloudAiplatformV1beta1ModelEvaluationSlice[];
        /**
         * A token to retrieve next page of results. Pass to ListModelEvaluationSlicesRequest.page_token to obtain that page.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for ModelService.ListModelEvaluations.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListModelEvaluationsResponse {
        /**
         * List of ModelEvaluations in the requested page.
         */
        modelEvaluations?: Schema$GoogleCloudAiplatformV1beta1ModelEvaluation[];
        /**
         * A token to retrieve next page of results. Pass to ListModelEvaluationsRequest.page_token to obtain that page.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for ModelService.ListModels
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListModelsResponse {
        /**
         * List of Models in the requested page.
         */
        models?: Schema$GoogleCloudAiplatformV1beta1Model[];
        /**
         * A token to retrieve next page of results. Pass to ListModelsRequest.page_token to obtain that page.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for ModelService.ListModelVersions
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListModelVersionsResponse {
        /**
         * List of Model versions in the requested page. In the returned Model name field, version ID instead of regvision tag will be included.
         */
        models?: Schema$GoogleCloudAiplatformV1beta1Model[];
        /**
         * A token to retrieve the next page of results. Pass to ListModelVersionsRequest.page_token to obtain that page.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for JobService.ListNasJobs
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListNasJobsResponse {
        /**
         * List of NasJobs in the requested page. NasJob.nas_job_output of the jobs will not be returned.
         */
        nasJobs?: Schema$GoogleCloudAiplatformV1beta1NasJob[];
        /**
         * A token to retrieve the next page of results. Pass to ListNasJobsRequest.page_token to obtain that page.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for JobService.ListNasTrialDetails
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListNasTrialDetailsResponse {
        /**
         * List of top NasTrials in the requested page.
         */
        nasTrialDetails?: Schema$GoogleCloudAiplatformV1beta1NasTrialDetail[];
        /**
         * A token to retrieve the next page of results. Pass to ListNasTrialDetailsRequest.page_token to obtain that page.
         */
        nextPageToken?: string | null;
    }
    /**
     * Response message for NotebookService.ListNotebookRuntimes.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListNotebookRuntimesResponse {
        /**
         * A token to retrieve next page of results. Pass to ListNotebookRuntimesRequest.page_token to obtain that page.
         */
        nextPageToken?: string | null;
        /**
         * List of NotebookRuntimes in the requested page.
         */
        notebookRuntimes?: Schema$GoogleCloudAiplatformV1beta1NotebookRuntime[];
    }
    /**
     * Response message for NotebookService.ListNotebookRuntimeTemplates.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListNotebookRuntimeTemplatesResponse {
        /**
         * A token to retrieve next page of results. Pass to ListNotebookRuntimeTemplatesRequest.page_token to obtain that page.
         */
        nextPageToken?: string | null;
        /**
         * List of NotebookRuntimeTemplates in the requested page.
         */
        notebookRuntimeTemplates?: Schema$GoogleCloudAiplatformV1beta1NotebookRuntimeTemplate[];
    }
    /**
     * Request message for VizierService.ListOptimalTrials.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListOptimalTrialsRequest {
    }
    /**
     * Response message for VizierService.ListOptimalTrials.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListOptimalTrialsResponse {
        /**
         * The pareto-optimal Trials for multiple objective Study or the optimal trial for single objective Study. The definition of pareto-optimal can be checked in wiki page. https://en.wikipedia.org/wiki/Pareto_efficiency
         */
        optimalTrials?: Schema$GoogleCloudAiplatformV1beta1Trial[];
    }
    /**
     * Response message for PersistentResourceService.ListPersistentResources
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListPersistentResourcesResponse {
        /**
         * A token to retrieve next page of results. Pass to ListPersistentResourcesRequest.page_token to obtain that page.
         */
        nextPageToken?: string | null;
        persistentResources?: Schema$GoogleCloudAiplatformV1beta1PersistentResource[];
    }
    /**
     * Response message for PipelineService.ListPipelineJobs
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListPipelineJobsResponse {
        /**
         * A token to retrieve the next page of results. Pass to ListPipelineJobsRequest.page_token to obtain that page.
         */
        nextPageToken?: string | null;
        /**
         * List of PipelineJobs in the requested page.
         */
        pipelineJobs?: Schema$GoogleCloudAiplatformV1beta1PipelineJob[];
    }
    /**
     * Response message for ModelGardenService.ListPublisherModels.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListPublisherModelsResponse {
        /**
         * A token to retrieve next page of results. Pass to ListPublisherModels.page_token to obtain that page.
         */
        nextPageToken?: string | null;
        /**
         * List of PublisherModels in the requested page.
         */
        publisherModels?: Schema$GoogleCloudAiplatformV1beta1PublisherModel[];
    }
    /**
     * Response message for DatasetService.ListSavedQueries.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListSavedQueriesResponse {
        /**
         * The standard List next-page token.
         */
        nextPageToken?: string | null;
        /**
         * A list of SavedQueries that match the specified filter in the request.
         */
        savedQueries?: Schema$GoogleCloudAiplatformV1beta1SavedQuery[];
    }
    /**
     * Response message for ScheduleService.ListSchedules
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListSchedulesResponse {
        /**
         * A token to retrieve the next page of results. Pass to ListSchedulesRequest.page_token to obtain that page.
         */
        nextPageToken?: string | null;
        /**
         * List of Schedules in the requested page.
         */
        schedules?: Schema$GoogleCloudAiplatformV1beta1Schedule[];
    }
    /**
     * Response message for SpecialistPoolService.ListSpecialistPools.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListSpecialistPoolsResponse {
        /**
         * The standard List next-page token.
         */
        nextPageToken?: string | null;
        /**
         * A list of SpecialistPools that matches the specified filter in the request.
         */
        specialistPools?: Schema$GoogleCloudAiplatformV1beta1SpecialistPool[];
    }
    /**
     * Response message for VizierService.ListStudies.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListStudiesResponse {
        /**
         * Passes this token as the `page_token` field of the request for a subsequent call. If this field is omitted, there are no subsequent pages.
         */
        nextPageToken?: string | null;
        /**
         * The studies associated with the project.
         */
        studies?: Schema$GoogleCloudAiplatformV1beta1Study[];
    }
    /**
     * Response message for TensorboardService.ListTensorboardExperiments.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListTensorboardExperimentsResponse {
        /**
         * A token, which can be sent as ListTensorboardExperimentsRequest.page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
         */
        nextPageToken?: string | null;
        /**
         * The TensorboardExperiments mathching the request.
         */
        tensorboardExperiments?: Schema$GoogleCloudAiplatformV1beta1TensorboardExperiment[];
    }
    /**
     * Response message for TensorboardService.ListTensorboardRuns.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListTensorboardRunsResponse {
        /**
         * A token, which can be sent as ListTensorboardRunsRequest.page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
         */
        nextPageToken?: string | null;
        /**
         * The TensorboardRuns mathching the request.
         */
        tensorboardRuns?: Schema$GoogleCloudAiplatformV1beta1TensorboardRun[];
    }
    /**
     * Response message for TensorboardService.ListTensorboards.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListTensorboardsResponse {
        /**
         * A token, which can be sent as ListTensorboardsRequest.page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
         */
        nextPageToken?: string | null;
        /**
         * The Tensorboards mathching the request.
         */
        tensorboards?: Schema$GoogleCloudAiplatformV1beta1Tensorboard[];
    }
    /**
     * Response message for TensorboardService.ListTensorboardTimeSeries.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListTensorboardTimeSeriesResponse {
        /**
         * A token, which can be sent as ListTensorboardTimeSeriesRequest.page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
         */
        nextPageToken?: string | null;
        /**
         * The TensorboardTimeSeries mathching the request.
         */
        tensorboardTimeSeries?: Schema$GoogleCloudAiplatformV1beta1TensorboardTimeSeries[];
    }
    /**
     * Response message for PipelineService.ListTrainingPipelines
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListTrainingPipelinesResponse {
        /**
         * A token to retrieve the next page of results. Pass to ListTrainingPipelinesRequest.page_token to obtain that page.
         */
        nextPageToken?: string | null;
        /**
         * List of TrainingPipelines in the requested page.
         */
        trainingPipelines?: Schema$GoogleCloudAiplatformV1beta1TrainingPipeline[];
    }
    /**
     * Response message for VizierService.ListTrials.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ListTrialsResponse {
        /**
         * Pass this token as the `page_token` field of the request for a subsequent call. If this field is omitted, there are no subsequent pages.
         */
        nextPageToken?: string | null;
        /**
         * The Trials associated with the Study.
         */
        trials?: Schema$GoogleCloudAiplatformV1beta1Trial[];
    }
    /**
     * Request message for VizierService.LookupStudy.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1LookupStudyRequest {
        /**
         * Required. The user-defined display name of the Study
         */
        displayName?: string | null;
    }
    /**
     * Specification of a single machine.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1MachineSpec {
        /**
         * The number of accelerators to attach to the machine.
         */
        acceleratorCount?: number | null;
        /**
         * Immutable. The type of accelerator(s) that may be attached to the machine as per accelerator_count.
         */
        acceleratorType?: string | null;
        /**
         * Immutable. The type of the machine. See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types) See the [list of machine types supported for custom training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types). For DeployedModel this field is optional, and the default value is `n1-standard-2`. For BatchPredictionJob or as part of WorkerPoolSpec this field is required.
         */
        machineType?: string | null;
        /**
         * Immutable. The topology of the TPUs. Corresponds to the TPU topologies available from GKE. (Example: tpu_topology: "2x2x1").
         */
        tpuTopology?: string | null;
    }
    /**
     * Manual batch tuning parameters.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ManualBatchTuningParameters {
        /**
         * Immutable. The number of the records (e.g. instances) of the operation given in each batch to a machine replica. Machine type, and size of a single record should be considered when setting this parameter, higher value speeds up the batch operation's execution, but too high value will result in a whole batch not fitting in a machine's memory, and the whole operation will fail. The default value is 64.
         */
        batchSize?: number | null;
    }
    /**
     * A message representing a Measurement of a Trial. A Measurement contains the Metrics got by executing a Trial using suggested hyperparameter values.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1Measurement {
        /**
         * Output only. Time that the Trial has been running at the point of this Measurement.
         */
        elapsedDuration?: string | null;
        /**
         * Output only. A list of metrics got by evaluating the objective functions using suggested Parameter values.
         */
        metrics?: Schema$GoogleCloudAiplatformV1beta1MeasurementMetric[];
        /**
         * Output only. The number of steps the machine learning model has been trained for. Must be non-negative.
         */
        stepCount?: string | null;
    }
    /**
     * A message representing a metric in the measurement.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1MeasurementMetric {
        /**
         * Output only. The ID of the Metric. The Metric should be defined in StudySpec's Metrics.
         */
        metricId?: string | null;
        /**
         * Output only. The value for this metric.
         */
        value?: number | null;
    }
    /**
     * Request message for ModelService.MergeVersionAliases.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1MergeVersionAliasesRequest {
        /**
         * Required. The set of version aliases to merge. The alias should be at most 128 characters, and match `a-z{0,126\}[a-z-0-9]`. Add the `-` prefix to an alias means removing that alias from the version. `-` is NOT counted in the 128 characters. Example: `-golden` means removing the `golden` alias from the version. There is NO ordering in aliases, which means 1) The aliases returned from GetModel API might not have the exactly same order from this MergeVersionAliases API. 2) Adding and deleting the same alias in the request is not recommended, and the 2 operations will be cancelled out.
         */
        versionAliases?: string[] | null;
    }
    /**
     * Instance of a general MetadataSchema.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1MetadataSchema {
        /**
         * Output only. Timestamp when this MetadataSchema was created.
         */
        createTime?: string | null;
        /**
         * Description of the Metadata Schema
         */
        description?: string | null;
        /**
         * Output only. The resource name of the MetadataSchema.
         */
        name?: string | null;
        /**
         * Required. The raw YAML string representation of the MetadataSchema. The combination of [MetadataSchema.version] and the schema name given by `title` in [MetadataSchema.schema] must be unique within a MetadataStore. The schema is defined as an OpenAPI 3.0.2 [MetadataSchema Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#schemaObject)
         */
        schema?: string | null;
        /**
         * The type of the MetadataSchema. This is a property that identifies which metadata types will use the MetadataSchema.
         */
        schemaType?: string | null;
        /**
         * The version of the MetadataSchema. The version's format must match the following regular expression: `^[0-9]+.+.+$`, which would allow to order/compare different versions. Example: 1.0.0, 1.0.1, etc.
         */
        schemaVersion?: string | null;
    }
    /**
     * Instance of a metadata store. Contains a set of metadata that can be queried.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1MetadataStore {
        /**
         * Output only. Timestamp when this MetadataStore was created.
         */
        createTime?: string | null;
        /**
         * Description of the MetadataStore.
         */
        description?: string | null;
        /**
         * Customer-managed encryption key spec for a Metadata Store. If set, this Metadata Store and all sub-resources of this Metadata Store are secured using this key.
         */
        encryptionSpec?: Schema$GoogleCloudAiplatformV1beta1EncryptionSpec;
        /**
         * Output only. The resource name of the MetadataStore instance.
         */
        name?: string | null;
        /**
         * Output only. State information of the MetadataStore.
         */
        state?: Schema$GoogleCloudAiplatformV1beta1MetadataStoreMetadataStoreState;
        /**
         * Output only. Timestamp when this MetadataStore was last updated.
         */
        updateTime?: string | null;
    }
    /**
     * Represents state information for a MetadataStore.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1MetadataStoreMetadataStoreState {
        /**
         * The disk utilization of the MetadataStore in bytes.
         */
        diskUtilizationBytes?: string | null;
    }
    /**
     * Represents one resource that exists in automl.googleapis.com, datalabeling.googleapis.com or ml.googleapis.com.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1MigratableResource {
        /**
         * Output only. Represents one Dataset in automl.googleapis.com.
         */
        automlDataset?: Schema$GoogleCloudAiplatformV1beta1MigratableResourceAutomlDataset;
        /**
         * Output only. Represents one Model in automl.googleapis.com.
         */
        automlModel?: Schema$GoogleCloudAiplatformV1beta1MigratableResourceAutomlModel;
        /**
         * Output only. Represents one Dataset in datalabeling.googleapis.com.
         */
        dataLabelingDataset?: Schema$GoogleCloudAiplatformV1beta1MigratableResourceDataLabelingDataset;
        /**
         * Output only. Timestamp when the last migration attempt on this MigratableResource started. Will not be set if there's no migration attempt on this MigratableResource.
         */
        lastMigrateTime?: string | null;
        /**
         * Output only. Timestamp when this MigratableResource was last updated.
         */
        lastUpdateTime?: string | null;
        /**
         * Output only. Represents one Version in ml.googleapis.com.
         */
        mlEngineModelVersion?: Schema$GoogleCloudAiplatformV1beta1MigratableResourceMlEngineModelVersion;
    }
    /**
     * Represents one Dataset in automl.googleapis.com.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1MigratableResourceAutomlDataset {
        /**
         * Full resource name of automl Dataset. Format: `projects/{project\}/locations/{location\}/datasets/{dataset\}`.
         */
        dataset?: string | null;
        /**
         * The Dataset's display name in automl.googleapis.com.
         */
        datasetDisplayName?: string | null;
    }
    /**
     * Represents one Model in automl.googleapis.com.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1MigratableResourceAutomlModel {
        /**
         * Full resource name of automl Model. Format: `projects/{project\}/locations/{location\}/models/{model\}`.
         */
        model?: string | null;
        /**
         * The Model's display name in automl.googleapis.com.
         */
        modelDisplayName?: string | null;
    }
    /**
     * Represents one Dataset in datalabeling.googleapis.com.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1MigratableResourceDataLabelingDataset {
        /**
         * The migratable AnnotatedDataset in datalabeling.googleapis.com belongs to the data labeling Dataset.
         */
        dataLabelingAnnotatedDatasets?: Schema$GoogleCloudAiplatformV1beta1MigratableResourceDataLabelingDatasetDataLabelingAnnotatedDataset[];
        /**
         * Full resource name of data labeling Dataset. Format: `projects/{project\}/datasets/{dataset\}`.
         */
        dataset?: string | null;
        /**
         * The Dataset's display name in datalabeling.googleapis.com.
         */
        datasetDisplayName?: string | null;
    }
    /**
     * Represents one AnnotatedDataset in datalabeling.googleapis.com.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1MigratableResourceDataLabelingDatasetDataLabelingAnnotatedDataset {
        /**
         * Full resource name of data labeling AnnotatedDataset. Format: `projects/{project\}/datasets/{dataset\}/annotatedDatasets/{annotated_dataset\}`.
         */
        annotatedDataset?: string | null;
        /**
         * The AnnotatedDataset's display name in datalabeling.googleapis.com.
         */
        annotatedDatasetDisplayName?: string | null;
    }
    /**
     * Represents one model Version in ml.googleapis.com.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1MigratableResourceMlEngineModelVersion {
        /**
         * The ml.googleapis.com endpoint that this model Version currently lives in. Example values: * ml.googleapis.com * us-centrall-ml.googleapis.com * europe-west4-ml.googleapis.com * asia-east1-ml.googleapis.com
         */
        endpoint?: string | null;
        /**
         * Full resource name of ml engine model Version. Format: `projects/{project\}/models/{model\}/versions/{version\}`.
         */
        version?: string | null;
    }
    /**
     * Config of migrating one resource from automl.googleapis.com, datalabeling.googleapis.com and ml.googleapis.com to Vertex AI.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1MigrateResourceRequest {
        /**
         * Config for migrating Dataset in automl.googleapis.com to Vertex AI's Dataset.
         */
        migrateAutomlDatasetConfig?: Schema$GoogleCloudAiplatformV1beta1MigrateResourceRequestMigrateAutomlDatasetConfig;
        /**
         * Config for migrating Model in automl.googleapis.com to Vertex AI's Model.
         */
        migrateAutomlModelConfig?: Schema$GoogleCloudAiplatformV1beta1MigrateResourceRequestMigrateAutomlModelConfig;
        /**
         * Config for migrating Dataset in datalabeling.googleapis.com to Vertex AI's Dataset.
         */
        migrateDataLabelingDatasetConfig?: Schema$GoogleCloudAiplatformV1beta1MigrateResourceRequestMigrateDataLabelingDatasetConfig;
        /**
         * Config for migrating Version in ml.googleapis.com to Vertex AI's Model.
         */
        migrateMlEngineModelVersionConfig?: Schema$GoogleCloudAiplatformV1beta1MigrateResourceRequestMigrateMlEngineModelVersionConfig;
    }
    /**
     * Config for migrating Dataset in automl.googleapis.com to Vertex AI's Dataset.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1MigrateResourceRequestMigrateAutomlDatasetConfig {
        /**
         * Required. Full resource name of automl Dataset. Format: `projects/{project\}/locations/{location\}/datasets/{dataset\}`.
         */
        dataset?: string | null;
        /**
         * Required. Display name of the Dataset in Vertex AI. System will pick a display name if unspecified.
         */
        datasetDisplayName?: string | null;
    }
    /**
     * Config for migrating Model in automl.googleapis.com to Vertex AI's Model.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1MigrateResourceRequestMigrateAutomlModelConfig {
        /**
         * Required. Full resource name of automl Model. Format: `projects/{project\}/locations/{location\}/models/{model\}`.
         */
        model?: string | null;
        /**
         * Optional. Display name of the model in Vertex AI. System will pick a display name if unspecified.
         */
        modelDisplayName?: string | null;
    }
    /**
     * Config for migrating Dataset in datalabeling.googleapis.com to Vertex AI's Dataset.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1MigrateResourceRequestMigrateDataLabelingDatasetConfig {
        /**
         * Required. Full resource name of data labeling Dataset. Format: `projects/{project\}/datasets/{dataset\}`.
         */
        dataset?: string | null;
        /**
         * Optional. Display name of the Dataset in Vertex AI. System will pick a display name if unspecified.
         */
        datasetDisplayName?: string | null;
        /**
         * Optional. Configs for migrating AnnotatedDataset in datalabeling.googleapis.com to Vertex AI's SavedQuery. The specified AnnotatedDatasets have to belong to the datalabeling Dataset.
         */
        migrateDataLabelingAnnotatedDatasetConfigs?: Schema$GoogleCloudAiplatformV1beta1MigrateResourceRequestMigrateDataLabelingDatasetConfigMigrateDataLabelingAnnotatedDatasetConfig[];
    }
    /**
     * Config for migrating AnnotatedDataset in datalabeling.googleapis.com to Vertex AI's SavedQuery.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1MigrateResourceRequestMigrateDataLabelingDatasetConfigMigrateDataLabelingAnnotatedDatasetConfig {
        /**
         * Required. Full resource name of data labeling AnnotatedDataset. Format: `projects/{project\}/datasets/{dataset\}/annotatedDatasets/{annotated_dataset\}`.
         */
        annotatedDataset?: string | null;
    }
    /**
     * Config for migrating version in ml.googleapis.com to Vertex AI's Model.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1MigrateResourceRequestMigrateMlEngineModelVersionConfig {
        /**
         * Required. The ml.googleapis.com endpoint that this model version should be migrated from. Example values: * ml.googleapis.com * us-centrall-ml.googleapis.com * europe-west4-ml.googleapis.com * asia-east1-ml.googleapis.com
         */
        endpoint?: string | null;
        /**
         * Required. Display name of the model in Vertex AI. System will pick a display name if unspecified.
         */
        modelDisplayName?: string | null;
        /**
         * Required. Full resource name of ml engine model version. Format: `projects/{project\}/models/{model\}/versions/{version\}`.
         */
        modelVersion?: string | null;
    }
    /**
     * Describes a successfully migrated resource.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1MigrateResourceResponse {
        /**
         * Migrated Dataset's resource name.
         */
        dataset?: string | null;
        /**
         * Before migration, the identifier in ml.googleapis.com, automl.googleapis.com or datalabeling.googleapis.com.
         */
        migratableResource?: Schema$GoogleCloudAiplatformV1beta1MigratableResource;
        /**
         * Migrated Model's resource name.
         */
        model?: string | null;
    }
    /**
     * A trained machine learning Model.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1Model {
        /**
         * Immutable. The path to the directory containing the Model artifact and any of its supporting files. Not required for AutoML Models.
         */
        artifactUri?: string | null;
        /**
         * Optional. User input field to specify the base model source. Currently it only supports specifing the Model Garden models and Genie models.
         */
        baseModelSource?: Schema$GoogleCloudAiplatformV1beta1ModelBaseModelSource;
        /**
         * Input only. The specification of the container that is to be used when deploying this Model. The specification is ingested upon ModelService.UploadModel, and all binaries it contains are copied and stored internally by Vertex AI. Not required for AutoML Models.
         */
        containerSpec?: Schema$GoogleCloudAiplatformV1beta1ModelContainerSpec;
        /**
         * Output only. Timestamp when this Model was uploaded into Vertex AI.
         */
        createTime?: string | null;
        /**
         * Output only. The pointers to DeployedModels created from this Model. Note that Model could have been deployed to Endpoints in different Locations.
         */
        deployedModels?: Schema$GoogleCloudAiplatformV1beta1DeployedModelRef[];
        /**
         * The description of the Model.
         */
        description?: string | null;
        /**
         * Required. The display name of the Model. The name can be up to 128 characters long and can consist of any UTF-8 characters.
         */
        displayName?: string | null;
        /**
         * Customer-managed encryption key spec for a Model. If set, this Model and all sub-resources of this Model will be secured by this key.
         */
        encryptionSpec?: Schema$GoogleCloudAiplatformV1beta1EncryptionSpec;
        /**
         * Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
         */
        etag?: string | null;
        /**
         * The default explanation specification for this Model. The Model can be used for requesting explanation after being deployed if it is populated. The Model can be used for batch explanation if it is populated. All fields of the explanation_spec can be overridden by explanation_spec of DeployModelRequest.deployed_model, or explanation_spec of BatchPredictionJob. If the default explanation specification is not set for this Model, this Model can still be used for requesting explanation by setting explanation_spec of DeployModelRequest.deployed_model and for batch explanation by setting explanation_spec of BatchPredictionJob.
         */
        explanationSpec?: Schema$GoogleCloudAiplatformV1beta1ExplanationSpec;
        /**
         * The labels with user-defined metadata to organize your Models. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Immutable. An additional information about the Model; the schema of the metadata can be found in metadata_schema. Unset if the Model does not have any additional information.
         */
        metadata?: any | null;
        /**
         * Output only. The resource name of the Artifact that was created in MetadataStore when creating the Model. The Artifact resource name pattern is `projects/{project\}/locations/{location\}/metadataStores/{metadata_store\}/artifacts/{artifact\}`.
         */
        metadataArtifact?: string | null;
        /**
         * Immutable. Points to a YAML file stored on Google Cloud Storage describing additional information about the Model, that is specific to it. Unset if the Model does not have any additional information. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). AutoML Models always have this field populated by Vertex AI, if no additional metadata is needed, this field is set to an empty string. Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.
         */
        metadataSchemaUri?: string | null;
        /**
         * Output only. Source of a model. It can either be automl training pipeline, custom training pipeline, BigQuery ML, or saved and tuned from Genie or Model Garden.
         */
        modelSourceInfo?: Schema$GoogleCloudAiplatformV1beta1ModelSourceInfo;
        /**
         * The resource name of the Model.
         */
        name?: string | null;
        /**
         * Output only. If this Model is a copy of another Model, this contains info about the original.
         */
        originalModelInfo?: Schema$GoogleCloudAiplatformV1beta1ModelOriginalModelInfo;
        /**
         * The schemata that describe formats of the Model's predictions and explanations as given and returned via PredictionService.Predict and PredictionService.Explain.
         */
        predictSchemata?: Schema$GoogleCloudAiplatformV1beta1PredictSchemata;
        /**
         * Output only. When this Model is deployed, its prediction resources are described by the `prediction_resources` field of the Endpoint.deployed_models object. Because not all Models support all resource configuration types, the configuration types this Model supports are listed here. If no configuration types are listed, the Model cannot be deployed to an Endpoint and does not support online predictions (PredictionService.Predict or PredictionService.Explain). Such a Model can serve predictions by using a BatchPredictionJob, if it has at least one entry each in supported_input_storage_formats and supported_output_storage_formats.
         */
        supportedDeploymentResourcesTypes?: string[] | null;
        /**
         * Output only. The formats in which this Model may be exported. If empty, this Model is not available for export.
         */
        supportedExportFormats?: Schema$GoogleCloudAiplatformV1beta1ModelExportFormat[];
        /**
         * Output only. The formats this Model supports in BatchPredictionJob.input_config. If PredictSchemata.instance_schema_uri exists, the instances should be given as per that schema. The possible formats are: * `jsonl` The JSON Lines format, where each instance is a single line. Uses GcsSource. * `csv` The CSV format, where each instance is a single comma-separated line. The first line in the file is the header, containing comma-separated field names. Uses GcsSource. * `tf-record` The TFRecord format, where each instance is a single record in tfrecord syntax. Uses GcsSource. * `tf-record-gzip` Similar to `tf-record`, but the file is gzipped. Uses GcsSource. * `bigquery` Each instance is a single row in BigQuery. Uses BigQuerySource. * `file-list` Each line of the file is the location of an instance to process, uses `gcs_source` field of the InputConfig object. If this Model doesn't support any of these formats it means it cannot be used with a BatchPredictionJob. However, if it has supported_deployment_resources_types, it could serve online predictions by using PredictionService.Predict or PredictionService.Explain.
         */
        supportedInputStorageFormats?: string[] | null;
        /**
         * Output only. The formats this Model supports in BatchPredictionJob.output_config. If both PredictSchemata.instance_schema_uri and PredictSchemata.prediction_schema_uri exist, the predictions are returned together with their instances. In other words, the prediction has the original instance data first, followed by the actual prediction content (as per the schema). The possible formats are: * `jsonl` The JSON Lines format, where each prediction is a single line. Uses GcsDestination. * `csv` The CSV format, where each prediction is a single comma-separated line. The first line in the file is the header, containing comma-separated field names. Uses GcsDestination. * `bigquery` Each prediction is a single row in a BigQuery table, uses BigQueryDestination . If this Model doesn't support any of these formats it means it cannot be used with a BatchPredictionJob. However, if it has supported_deployment_resources_types, it could serve online predictions by using PredictionService.Predict or PredictionService.Explain.
         */
        supportedOutputStorageFormats?: string[] | null;
        /**
         * Output only. The resource name of the TrainingPipeline that uploaded this Model, if any.
         */
        trainingPipeline?: string | null;
        /**
         * Output only. Timestamp when this Model was most recently updated.
         */
        updateTime?: string | null;
        /**
         * User provided version aliases so that a model version can be referenced via alias (i.e. `projects/{project\}/locations/{location\}/models/{model_id\}@{version_alias\}` instead of auto-generated version id (i.e. `projects/{project\}/locations/{location\}/models/{model_id\}@{version_id\})`. The format is a-z{0,126\}[a-z0-9] to distinguish from version_id. A default version alias will be created for the first version of the model, and there must be exactly one default version alias for a model.
         */
        versionAliases?: string[] | null;
        /**
         * Output only. Timestamp when this version was created.
         */
        versionCreateTime?: string | null;
        /**
         * The description of this version.
         */
        versionDescription?: string | null;
        /**
         * Output only. Immutable. The version ID of the model. A new version is committed when a new model version is uploaded or trained under an existing model id. It is an auto-incrementing decimal number in string representation.
         */
        versionId?: string | null;
        /**
         * Output only. Timestamp when this version was most recently updated.
         */
        versionUpdateTime?: string | null;
    }
    /**
     * User input field to specify the base model source. Currently it only supports specifing the Model Garden models and Genie models.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelBaseModelSource {
        /**
         * Information about the base model of Genie models.
         */
        genieSource?: Schema$GoogleCloudAiplatformV1beta1GenieSource;
        /**
         * Source information of Model Garden models.
         */
        modelGardenSource?: Schema$GoogleCloudAiplatformV1beta1ModelGardenSource;
    }
    /**
     * Specification of a container for serving predictions. Some fields in this message correspond to fields in the [Kubernetes Container v1 core specification](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelContainerSpec {
        /**
         * Immutable. Specifies arguments for the command that runs when the container starts. This overrides the container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd). Specify this field as an array of executable and arguments, similar to a Docker `CMD`'s "default parameters" form. If you don't specify this field but do specify the command field, then the command from the `command` field runs without any additional arguments. See the [Kubernetes documentation about how the `command` and `args` fields interact with a container's `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes). If you don't specify this field and don't specify the `command` field, then the container's [`ENTRYPOINT`](https://docs.docker.com/engine/reference/builder/#cmd) and `CMD` determine what runs based on their default behavior. See the Docker documentation about [how `CMD` and `ENTRYPOINT` interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact). In this field, you can reference [environment variables set by Vertex AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables) and environment variables set in the env field. You cannot reference environment variables set in the Docker image. In order for environment variables to be expanded, reference them by using the following syntax: $( VARIABLE_NAME) Note that this differs from Bash variable expansion, which does not use parentheses. If a variable cannot be resolved, the reference in the input string is used unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example: $$(VARIABLE_NAME) This field corresponds to the `args` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
         */
        args?: string[] | null;
        /**
         * Immutable. Specifies the command that runs when the container starts. This overrides the container's [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint). Specify this field as an array of executable and arguments, similar to a Docker `ENTRYPOINT`'s "exec" form, not its "shell" form. If you do not specify this field, then the container's `ENTRYPOINT` runs, in conjunction with the args field or the container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd), if either exists. If this field is not specified and the container does not have an `ENTRYPOINT`, then refer to the Docker documentation about [how `CMD` and `ENTRYPOINT` interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact). If you specify this field, then you can also specify the `args` field to provide additional arguments for this command. However, if you specify this field, then the container's `CMD` is ignored. See the [Kubernetes documentation about how the `command` and `args` fields interact with a container's `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes). In this field, you can reference [environment variables set by Vertex AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables) and environment variables set in the env field. You cannot reference environment variables set in the Docker image. In order for environment variables to be expanded, reference them by using the following syntax: $( VARIABLE_NAME) Note that this differs from Bash variable expansion, which does not use parentheses. If a variable cannot be resolved, the reference in the input string is used unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example: $$(VARIABLE_NAME) This field corresponds to the `command` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
         */
        command?: string[] | null;
        /**
         * Immutable. Deployment timeout. Limit for deployment timeout is 2 hours.
         */
        deploymentTimeout?: string | null;
        /**
         * Immutable. List of environment variables to set in the container. After the container starts running, code running in the container can read these environment variables. Additionally, the command and args fields can reference these variables. Later entries in this list can also reference earlier entries. For example, the following example sets the variable `VAR_2` to have the value `foo bar`: ```json [ { "name": "VAR_1", "value": "foo" \}, { "name": "VAR_2", "value": "$(VAR_1) bar" \} ] ``` If you switch the order of the variables in the example, then the expansion does not occur. This field corresponds to the `env` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
         */
        env?: Schema$GoogleCloudAiplatformV1beta1EnvVar[];
        /**
         * Immutable. List of ports to expose from the container. Vertex AI sends gRPC prediction requests that it receives to the first port on this list. Vertex AI also sends liveness and health checks to this port. If you do not specify this field, gRPC requests to the container will be disabled. Vertex AI does not use ports other than the first one listed. This field corresponds to the `ports` field of the Kubernetes Containers v1 core API.
         */
        grpcPorts?: Schema$GoogleCloudAiplatformV1beta1Port[];
        /**
         * Immutable. Specification for Kubernetes readiness probe.
         */
        healthProbe?: Schema$GoogleCloudAiplatformV1beta1Probe;
        /**
         * Immutable. HTTP path on the container to send health checks to. Vertex AI intermittently sends GET requests to this path on the container's IP address and port to check that the container is healthy. Read more about [health checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#health). For example, if you set this field to `/bar`, then Vertex AI intermittently sends a GET request to the `/bar` path on the port of your container specified by the first value of this `ModelContainerSpec`'s ports field. If you don't specify this field, it defaults to the following value when you deploy this Model to an Endpoint: /v1/endpoints/ENDPOINT/deployedModels/ DEPLOYED_MODEL:predict The placeholders in this value are replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes this value available to your container code as the [`AIP_ENDPOINT_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`. (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)
         */
        healthRoute?: string | null;
        /**
         * Required. Immutable. URI of the Docker image to be used as the custom container for serving predictions. This URI must identify an image in Artifact Registry or Container Registry. Learn more about the [container publishing requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#publishing), including permissions requirements for the Vertex AI Service Agent. The container image is ingested upon ModelService.UploadModel, stored internally, and this original path is afterwards not used. To learn about the requirements for the Docker image itself, see [Custom container requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#). You can use the URI to one of Vertex AI's [pre-built container images for prediction](https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers) in this field.
         */
        imageUri?: string | null;
        /**
         * Immutable. List of ports to expose from the container. Vertex AI sends any prediction requests that it receives to the first port on this list. Vertex AI also sends [liveness and health checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#liveness) to this port. If you do not specify this field, it defaults to following value: ```json [ { "containerPort": 8080 \} ] ``` Vertex AI does not use ports other than the first one listed. This field corresponds to the `ports` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
         */
        ports?: Schema$GoogleCloudAiplatformV1beta1Port[];
        /**
         * Immutable. HTTP path on the container to send prediction requests to. Vertex AI forwards requests sent using projects.locations.endpoints.predict to this path on the container's IP address and port. Vertex AI then returns the container's response in the API response. For example, if you set this field to `/foo`, then when Vertex AI receives a prediction request, it forwards the request body in a POST request to the `/foo` path on the port of your container specified by the first value of this `ModelContainerSpec`'s ports field. If you don't specify this field, it defaults to the following value when you deploy this Model to an Endpoint: /v1/endpoints/ENDPOINT/deployedModels/DEPLOYED_MODEL:predict The placeholders in this value are replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes this value available to your container code as the [`AIP_ENDPOINT_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`. (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)
         */
        predictRoute?: string | null;
        /**
         * Immutable. The amount of the VM memory to reserve as the shared memory for the model in megabytes.
         */
        sharedMemorySizeMb?: string | null;
        /**
         * Immutable. Specification for Kubernetes startup probe.
         */
        startupProbe?: Schema$GoogleCloudAiplatformV1beta1Probe;
    }
    /**
     * ModelDeploymentMonitoringBigQueryTable specifies the BigQuery table name as well as some information of the logs stored in this table.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringBigQueryTable {
        /**
         * The created BigQuery table to store logs. Customer could do their own query & analysis. Format: `bq://.model_deployment_monitoring_._`
         */
        bigqueryTablePath?: string | null;
        /**
         * The source of log.
         */
        logSource?: string | null;
        /**
         * The type of log.
         */
        logType?: string | null;
        /**
         * Output only. The schema version of the request/response logging BigQuery table. Default to v1 if unset.
         */
        requestResponseLoggingSchemaVersion?: string | null;
    }
    /**
     * Represents a job that runs periodically to monitor the deployed models in an endpoint. It will analyze the logged training & prediction data to detect any abnormal behaviors.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob {
        /**
         * YAML schema file uri describing the format of a single instance that you want Tensorflow Data Validation (TFDV) to analyze. If this field is empty, all the feature data types are inferred from predict_instance_schema_uri, meaning that TFDV will use the data in the exact format(data type) as prediction request/response. If there are any data type differences between predict instance and TFDV instance, this field can be used to override the schema. For models trained with Vertex AI, this field must be set as all the fields in predict instance formatted as string.
         */
        analysisInstanceSchemaUri?: string | null;
        /**
         * Output only. The created bigquery tables for the job under customer project. Customer could do their own query & analysis. There could be 4 log tables in maximum: 1. Training data logging predict request/response 2. Serving data logging predict request/response
         */
        bigqueryTables?: Schema$GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringBigQueryTable[];
        /**
         * Output only. Timestamp when this ModelDeploymentMonitoringJob was created.
         */
        createTime?: string | null;
        /**
         * Required. The user-defined name of the ModelDeploymentMonitoringJob. The name can be up to 128 characters long and can consist of any UTF-8 characters. Display name of a ModelDeploymentMonitoringJob.
         */
        displayName?: string | null;
        /**
         * If true, the scheduled monitoring pipeline logs are sent to Google Cloud Logging, including pipeline status and anomalies detected. Please note the logs incur cost, which are subject to [Cloud Logging pricing](https://cloud.google.com/logging#pricing).
         */
        enableMonitoringPipelineLogs?: boolean | null;
        /**
         * Customer-managed encryption key spec for a ModelDeploymentMonitoringJob. If set, this ModelDeploymentMonitoringJob and all sub-resources of this ModelDeploymentMonitoringJob will be secured by this key.
         */
        encryptionSpec?: Schema$GoogleCloudAiplatformV1beta1EncryptionSpec;
        /**
         * Required. Endpoint resource name. Format: `projects/{project\}/locations/{location\}/endpoints/{endpoint\}`
         */
        endpoint?: string | null;
        /**
         * Output only. Only populated when the job's state is `JOB_STATE_FAILED` or `JOB_STATE_CANCELLED`.
         */
        error?: Schema$GoogleRpcStatus;
        /**
         * The labels with user-defined metadata to organize your ModelDeploymentMonitoringJob. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Output only. Latest triggered monitoring pipeline metadata.
         */
        latestMonitoringPipelineMetadata?: Schema$GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJobLatestMonitoringPipelineMetadata;
        /**
         * Required. Sample Strategy for logging.
         */
        loggingSamplingStrategy?: Schema$GoogleCloudAiplatformV1beta1SamplingStrategy;
        /**
         * The TTL of BigQuery tables in user projects which stores logs. A day is the basic unit of the TTL and we take the ceil of TTL/86400(a day). e.g. { second: 3600\} indicates ttl = 1 day.
         */
        logTtl?: string | null;
        /**
         * Required. The config for monitoring objectives. This is a per DeployedModel config. Each DeployedModel needs to be configured separately.
         */
        modelDeploymentMonitoringObjectiveConfigs?: Schema$GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringObjectiveConfig[];
        /**
         * Required. Schedule config for running the monitoring job.
         */
        modelDeploymentMonitoringScheduleConfig?: Schema$GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringScheduleConfig;
        /**
         * Alert config for model monitoring.
         */
        modelMonitoringAlertConfig?: Schema$GoogleCloudAiplatformV1beta1ModelMonitoringAlertConfig;
        /**
         * Output only. Resource name of a ModelDeploymentMonitoringJob.
         */
        name?: string | null;
        /**
         * Output only. Timestamp when this monitoring pipeline will be scheduled to run for the next round.
         */
        nextScheduleTime?: string | null;
        /**
         * YAML schema file uri describing the format of a single instance, which are given to format this Endpoint's prediction (and explanation). If not set, we will generate predict schema from collected predict requests.
         */
        predictInstanceSchemaUri?: string | null;
        /**
         * Sample Predict instance, same format as PredictRequest.instances, this can be set as a replacement of ModelDeploymentMonitoringJob.predict_instance_schema_uri. If not set, we will generate predict schema from collected predict requests.
         */
        samplePredictInstance?: any | null;
        /**
         * Output only. Schedule state when the monitoring job is in Running state.
         */
        scheduleState?: string | null;
        /**
         * Output only. The detailed state of the monitoring job. When the job is still creating, the state will be 'PENDING'. Once the job is successfully created, the state will be 'RUNNING'. Pause the job, the state will be 'PAUSED'. Resume the job, the state will return to 'RUNNING'.
         */
        state?: string | null;
        /**
         * Stats anomalies base folder path.
         */
        statsAnomaliesBaseDirectory?: Schema$GoogleCloudAiplatformV1beta1GcsDestination;
        /**
         * Output only. Timestamp when this ModelDeploymentMonitoringJob was updated most recently.
         */
        updateTime?: string | null;
    }
    /**
     * All metadata of most recent monitoring pipelines.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJobLatestMonitoringPipelineMetadata {
        /**
         * The time that most recent monitoring pipelines that is related to this run.
         */
        runTime?: string | null;
        /**
         * The status of the most recent monitoring pipeline.
         */
        status?: Schema$GoogleRpcStatus;
    }
    /**
     * ModelDeploymentMonitoringObjectiveConfig contains the pair of deployed_model_id to ModelMonitoringObjectiveConfig.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringObjectiveConfig {
        /**
         * The DeployedModel ID of the objective config.
         */
        deployedModelId?: string | null;
        /**
         * The objective config of for the modelmonitoring job of this deployed model.
         */
        objectiveConfig?: Schema$GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfig;
    }
    /**
     * The config for scheduling monitoring job.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringScheduleConfig {
        /**
         * Required. The model monitoring job scheduling interval. It will be rounded up to next full hour. This defines how often the monitoring jobs are triggered.
         */
        monitorInterval?: string | null;
        /**
         * The time window of the prediction data being included in each prediction dataset. This window specifies how long the data should be collected from historical model results for each run. If not set, ModelDeploymentMonitoringScheduleConfig.monitor_interval will be used. e.g. If currently the cutoff time is 2022-01-08 14:30:00 and the monitor_window is set to be 3600, then data from 2022-01-08 13:30:00 to 2022-01-08 14:30:00 will be retrieved and aggregated to calculate the monitoring statistics.
         */
        monitorWindow?: string | null;
    }
    /**
     * A collection of metrics calculated by comparing Model's predictions on all of the test data against annotations from the test data.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelEvaluation {
        /**
         * Specify the configuration for bias detection.
         */
        biasConfigs?: Schema$GoogleCloudAiplatformV1beta1ModelEvaluationBiasConfig;
        /**
         * Output only. Timestamp when this ModelEvaluation was created.
         */
        createTime?: string | null;
        /**
         * The display name of the ModelEvaluation.
         */
        displayName?: string | null;
        /**
         * Describes the values of ExplanationSpec that are used for explaining the predicted values on the evaluated data.
         */
        explanationSpecs?: Schema$GoogleCloudAiplatformV1beta1ModelEvaluationModelEvaluationExplanationSpec[];
        /**
         * The metadata of the ModelEvaluation. For the ModelEvaluation uploaded from Managed Pipeline, metadata contains a structured value with keys of "pipeline_job_id", "evaluation_dataset_type", "evaluation_dataset_path", "row_based_metrics_path".
         */
        metadata?: any | null;
        /**
         * Evaluation metrics of the Model. The schema of the metrics is stored in metrics_schema_uri
         */
        metrics?: any | null;
        /**
         * Points to a YAML file stored on Google Cloud Storage describing the metrics of this ModelEvaluation. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject).
         */
        metricsSchemaUri?: string | null;
        /**
         * Aggregated explanation metrics for the Model's prediction output over the data this ModelEvaluation uses. This field is populated only if the Model is evaluated with explanations, and only for AutoML tabular Models.
         */
        modelExplanation?: Schema$GoogleCloudAiplatformV1beta1ModelExplanation;
        /**
         * Output only. The resource name of the ModelEvaluation.
         */
        name?: string | null;
        /**
         * All possible dimensions of ModelEvaluationSlices. The dimensions can be used as the filter of the ModelService.ListModelEvaluationSlices request, in the form of `slice.dimension = `.
         */
        sliceDimensions?: string[] | null;
    }
    /**
     * Configuration for bias detection.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelEvaluationBiasConfig {
        /**
         * Specification for how the data should be sliced for bias. It contains a list of slices, with limitation of two slices. The first slice of data will be the slice_a. The second slice in the list (slice_b) will be compared against the first slice. If only a single slice is provided, then slice_a will be compared against "not slice_a". Below are examples with feature "education" with value "low", "medium", "high" in the dataset: Example 1: bias_slices = [{'education': 'low'\}] A single slice provided. In this case, slice_a is the collection of data with 'education' equals 'low', and slice_b is the collection of data with 'education' equals 'medium' or 'high'. Example 2: bias_slices = [{'education': 'low'\}, {'education': 'high'\}] Two slices provided. In this case, slice_a is the collection of data with 'education' equals 'low', and slice_b is the collection of data with 'education' equals 'high'.
         */
        biasSlices?: Schema$GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpec;
        /**
         * Positive labels selection on the target field.
         */
        labels?: string[] | null;
    }
    export interface Schema$GoogleCloudAiplatformV1beta1ModelEvaluationModelEvaluationExplanationSpec {
        /**
         * Explanation spec details.
         */
        explanationSpec?: Schema$GoogleCloudAiplatformV1beta1ExplanationSpec;
        /**
         * Explanation type. For AutoML Image Classification models, possible values are: * `image-integrated-gradients` * `image-xrai`
         */
        explanationType?: string | null;
    }
    /**
     * A collection of metrics calculated by comparing Model's predictions on a slice of the test data against ground truth annotations.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelEvaluationSlice {
        /**
         * Output only. Timestamp when this ModelEvaluationSlice was created.
         */
        createTime?: string | null;
        /**
         * Output only. Sliced evaluation metrics of the Model. The schema of the metrics is stored in metrics_schema_uri
         */
        metrics?: any | null;
        /**
         * Output only. Points to a YAML file stored on Google Cloud Storage describing the metrics of this ModelEvaluationSlice. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject).
         */
        metricsSchemaUri?: string | null;
        /**
         * Output only. Aggregated explanation metrics for the Model's prediction output over the data this ModelEvaluation uses. This field is populated only if the Model is evaluated with explanations, and only for tabular Models.
         */
        modelExplanation?: Schema$GoogleCloudAiplatformV1beta1ModelExplanation;
        /**
         * Output only. The resource name of the ModelEvaluationSlice.
         */
        name?: string | null;
        /**
         * Output only. The slice of the test data that is used to evaluate the Model.
         */
        slice?: Schema$GoogleCloudAiplatformV1beta1ModelEvaluationSliceSlice;
    }
    /**
     * Definition of a slice.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelEvaluationSliceSlice {
        /**
         * Output only. The dimension of the slice. Well-known dimensions are: * `annotationSpec`: This slice is on the test data that has either ground truth or prediction with AnnotationSpec.display_name equals to value. * `slice`: This slice is a user customized slice defined by its SliceSpec.
         */
        dimension?: string | null;
        /**
         * Output only. Specification for how the data was sliced.
         */
        sliceSpec?: Schema$GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpec;
        /**
         * Output only. The value of the dimension in this slice.
         */
        value?: string | null;
    }
    /**
     * Specification for how the data should be sliced.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpec {
        /**
         * Mapping configuration for this SliceSpec. The key is the name of the feature. By default, the key will be prefixed by "instance" as a dictionary prefix for Vertex Batch Predictions output format.
         */
        configs?: {
            [key: string]: Schema$GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecSliceConfig;
        } | null;
    }
    /**
     * A range of values for slice(s). `low` is inclusive, `high` is exclusive.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecRange {
        /**
         * Exclusive high value for the range.
         */
        high?: number | null;
        /**
         * Inclusive low value for the range.
         */
        low?: number | null;
    }
    /**
     * Specification message containing the config for this SliceSpec. When `kind` is selected as `value` and/or `range`, only a single slice will be computed. When `all_values` is present, a separate slice will be computed for each possible label/value for the corresponding key in `config`. Examples, with feature zip_code with values 12345, 23334, 88888 and feature country with values "US", "Canada", "Mexico" in the dataset: Example 1: { "zip_code": { "value": { "float_value": 12345.0 \} \} \} A single slice for any data with zip_code 12345 in the dataset. Example 2: { "zip_code": { "range": { "low": 12345, "high": 20000 \} \} \} A single slice containing data where the zip_codes between 12345 and 20000 For this example, data with the zip_code of 12345 will be in this slice. Example 3: { "zip_code": { "range": { "low": 10000, "high": 20000 \} \}, "country": { "value": { "string_value": "US" \} \} \} A single slice containing data where the zip_codes between 10000 and 20000 has the country "US". For this example, data with the zip_code of 12345 and country "US" will be in this slice. Example 4: { "country": {"all_values": { "value": true \} \} \} Three slices are computed, one for each unique country in the dataset. Example 5: { "country": { "all_values": { "value": true \} \}, "zip_code": { "value": { "float_value": 12345.0 \} \} \} Three slices are computed, one for each unique country in the dataset where the zip_code is also 12345. For this example, data with zip_code 12345 and country "US" will be in one slice, zip_code 12345 and country "Canada" in another slice, and zip_code 12345 and country "Mexico" in another slice, totaling 3 slices.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecSliceConfig {
        /**
         * If all_values is set to true, then all possible labels of the keyed feature will have another slice computed. Example: `{"all_values":{"value":true\}\}`
         */
        allValues?: boolean | null;
        /**
         * A range of values for a numerical feature. Example: `{"range":{"low":10000.0,"high":50000.0\}\}` will capture 12345 and 23334 in the slice.
         */
        range?: Schema$GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecRange;
        /**
         * A unique specific value for a given feature. Example: `{ "value": { "string_value": "12345" \} \}`
         */
        value?: Schema$GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecValue;
    }
    /**
     * Single value that supports strings and floats.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecValue {
        /**
         * Float type.
         */
        floatValue?: number | null;
        /**
         * String type.
         */
        stringValue?: string | null;
    }
    /**
     * Aggregated explanation metrics for a Model over a set of instances.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelExplanation {
        /**
         * Output only. Aggregated attributions explaining the Model's prediction outputs over the set of instances. The attributions are grouped by outputs. For Models that predict only one output, such as regression Models that predict only one score, there is only one attibution that explains the predicted output. For Models that predict multiple outputs, such as multiclass Models that predict multiple classes, each element explains one specific item. Attribution.output_index can be used to identify which output this attribution is explaining. The baselineOutputValue, instanceOutputValue and featureAttributions fields are averaged over the test data. NOTE: Currently AutoML tabular classification Models produce only one attribution, which averages attributions over all the classes it predicts. Attribution.approximation_error is not populated.
         */
        meanAttributions?: Schema$GoogleCloudAiplatformV1beta1Attribution[];
    }
    /**
     * Represents export format supported by the Model. All formats export to Google Cloud Storage.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelExportFormat {
        /**
         * Output only. The content of this Model that may be exported.
         */
        exportableContents?: string[] | null;
        /**
         * Output only. The ID of the export format. The possible format IDs are: * `tflite` Used for Android mobile devices. * `edgetpu-tflite` Used for [Edge TPU](https://cloud.google.com/edge-tpu/) devices. * `tf-saved-model` A tensorflow model in SavedModel format. * `tf-js` A [TensorFlow.js](https://www.tensorflow.org/js) model that can be used in the browser and in Node.js using JavaScript. * `core-ml` Used for iOS mobile devices. * `custom-trained` A Model that was uploaded or trained by custom code.
         */
        id?: string | null;
    }
    /**
     * Contains information about the source of the models generated from Model Garden.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelGardenSource {
        /**
         * Required. The model garden source model resource name.
         */
        publicModelName?: string | null;
    }
    /**
     * The alert config for model monitoring.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelMonitoringAlertConfig {
        /**
         * Email alert config.
         */
        emailAlertConfig?: Schema$GoogleCloudAiplatformV1beta1ModelMonitoringAlertConfigEmailAlertConfig;
        /**
         * Dump the anomalies to Cloud Logging. The anomalies will be put to json payload encoded from proto google.cloud.aiplatform.logging.ModelMonitoringAnomaliesLogEntry. This can be further sinked to Pub/Sub or any other services supported by Cloud Logging.
         */
        enableLogging?: boolean | null;
        /**
         * Resource names of the NotificationChannels to send alert. Must be of the format `projects//notificationChannels/`
         */
        notificationChannels?: string[] | null;
    }
    /**
     * The config for email alert.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelMonitoringAlertConfigEmailAlertConfig {
        /**
         * The email addresses to send the alert.
         */
        userEmails?: string[] | null;
    }
    /**
     * The model monitoring configuration used for Batch Prediction Job.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelMonitoringConfig {
        /**
         * Model monitoring alert config.
         */
        alertConfig?: Schema$GoogleCloudAiplatformV1beta1ModelMonitoringAlertConfig;
        /**
         * YAML schema file uri in Cloud Storage describing the format of a single instance that you want Tensorflow Data Validation (TFDV) to analyze. If there are any data type differences between predict instance and TFDV instance, this field can be used to override the schema. For models trained with Vertex AI, this field must be set as all the fields in predict instance formatted as string.
         */
        analysisInstanceSchemaUri?: string | null;
        /**
         * Model monitoring objective config.
         */
        objectiveConfigs?: Schema$GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfig[];
        /**
         * A Google Cloud Storage location for batch prediction model monitoring to dump statistics and anomalies. If not provided, a folder will be created in customer project to hold statistics and anomalies.
         */
        statsAnomaliesBaseDirectory?: Schema$GoogleCloudAiplatformV1beta1GcsDestination;
    }
    /**
     * The objective configuration for model monitoring, including the information needed to detect anomalies for one particular model.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfig {
        /**
         * The config for integrating with Vertex Explainable AI.
         */
        explanationConfig?: Schema$GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigExplanationConfig;
        /**
         * The config for drift of prediction data.
         */
        predictionDriftDetectionConfig?: Schema$GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigPredictionDriftDetectionConfig;
        /**
         * Training dataset for models. This field has to be set only if TrainingPredictionSkewDetectionConfig is specified.
         */
        trainingDataset?: Schema$GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset;
        /**
         * The config for skew between training data and prediction data.
         */
        trainingPredictionSkewDetectionConfig?: Schema$GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingPredictionSkewDetectionConfig;
    }
    /**
     * The config for integrating with Vertex Explainable AI. Only applicable if the Model has explanation_spec populated.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigExplanationConfig {
        /**
         * If want to analyze the Vertex Explainable AI feature attribute scores or not. If set to true, Vertex AI will log the feature attributions from explain response and do the skew/drift detection for them.
         */
        enableFeatureAttributes?: boolean | null;
        /**
         * Predictions generated by the BatchPredictionJob using baseline dataset.
         */
        explanationBaseline?: Schema$GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigExplanationConfigExplanationBaseline;
    }
    /**
     * Output from BatchPredictionJob for Model Monitoring baseline dataset, which can be used to generate baseline attribution scores.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigExplanationConfigExplanationBaseline {
        /**
         * BigQuery location for BatchExplain output.
         */
        bigquery?: Schema$GoogleCloudAiplatformV1beta1BigQueryDestination;
        /**
         * Cloud Storage location for BatchExplain output.
         */
        gcs?: Schema$GoogleCloudAiplatformV1beta1GcsDestination;
        /**
         * The storage format of the predictions generated BatchPrediction job.
         */
        predictionFormat?: string | null;
    }
    /**
     * The config for Prediction data drift detection.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigPredictionDriftDetectionConfig {
        /**
         * Key is the feature name and value is the threshold. The threshold here is against attribution score distance between different time windows.
         */
        attributionScoreDriftThresholds?: {
            [key: string]: Schema$GoogleCloudAiplatformV1beta1ThresholdConfig;
        } | null;
        /**
         * Drift anomaly detection threshold used by all features. When the per-feature thresholds are not set, this field can be used to specify a threshold for all features.
         */
        defaultDriftThreshold?: Schema$GoogleCloudAiplatformV1beta1ThresholdConfig;
        /**
         * Key is the feature name and value is the threshold. If a feature needs to be monitored for drift, a value threshold must be configured for that feature. The threshold here is against feature distribution distance between different time windws.
         */
        driftThresholds?: {
            [key: string]: Schema$GoogleCloudAiplatformV1beta1ThresholdConfig;
        } | null;
    }
    /**
     * Training Dataset information.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset {
        /**
         * The BigQuery table of the unmanaged Dataset used to train this Model.
         */
        bigquerySource?: Schema$GoogleCloudAiplatformV1beta1BigQuerySource;
        /**
         * Data format of the dataset, only applicable if the input is from Google Cloud Storage. The possible formats are: "tf-record" The source file is a TFRecord file. "csv" The source file is a CSV file. "jsonl" The source file is a JSONL file.
         */
        dataFormat?: string | null;
        /**
         * The resource name of the Dataset used to train this Model.
         */
        dataset?: string | null;
        /**
         * The Google Cloud Storage uri of the unmanaged Dataset used to train this Model.
         */
        gcsSource?: Schema$GoogleCloudAiplatformV1beta1GcsSource;
        /**
         * Strategy to sample data from Training Dataset. If not set, we process the whole dataset.
         */
        loggingSamplingStrategy?: Schema$GoogleCloudAiplatformV1beta1SamplingStrategy;
        /**
         * The target field name the model is to predict. This field will be excluded when doing Predict and (or) Explain for the training data.
         */
        targetField?: string | null;
    }
    /**
     * The config for Training & Prediction data skew detection. It specifies the training dataset sources and the skew detection parameters.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingPredictionSkewDetectionConfig {
        /**
         * Key is the feature name and value is the threshold. The threshold here is against attribution score distance between the training and prediction feature.
         */
        attributionScoreSkewThresholds?: {
            [key: string]: Schema$GoogleCloudAiplatformV1beta1ThresholdConfig;
        } | null;
        /**
         * Skew anomaly detection threshold used by all features. When the per-feature thresholds are not set, this field can be used to specify a threshold for all features.
         */
        defaultSkewThreshold?: Schema$GoogleCloudAiplatformV1beta1ThresholdConfig;
        /**
         * Key is the feature name and value is the threshold. If a feature needs to be monitored for skew, a value threshold must be configured for that feature. The threshold here is against feature distribution distance between the training and prediction feature.
         */
        skewThresholds?: {
            [key: string]: Schema$GoogleCloudAiplatformV1beta1ThresholdConfig;
        } | null;
    }
    /**
     * Statistics and anomalies generated by Model Monitoring.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies {
        /**
         * Number of anomalies within all stats.
         */
        anomalyCount?: number | null;
        /**
         * Deployed Model ID.
         */
        deployedModelId?: string | null;
        /**
         * A list of historical Stats and Anomalies generated for all Features.
         */
        featureStats?: Schema$GoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomaliesFeatureHistoricStatsAnomalies[];
        /**
         * Model Monitoring Objective those stats and anomalies belonging to.
         */
        objective?: string | null;
    }
    /**
     * Historical Stats (and Anomalies) for a specific Feature.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomaliesFeatureHistoricStatsAnomalies {
        /**
         * Display Name of the Feature.
         */
        featureDisplayName?: string | null;
        /**
         * A list of historical stats generated by different time window's Prediction Dataset.
         */
        predictionStats?: Schema$GoogleCloudAiplatformV1beta1FeatureStatsAnomaly[];
        /**
         * Threshold for anomaly detection.
         */
        threshold?: Schema$GoogleCloudAiplatformV1beta1ThresholdConfig;
        /**
         * Stats calculated for the Training Dataset.
         */
        trainingStats?: Schema$GoogleCloudAiplatformV1beta1FeatureStatsAnomaly;
    }
    /**
     * Contains information about the original Model if this Model is a copy.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelOriginalModelInfo {
        /**
         * Output only. The resource name of the Model this Model is a copy of, including the revision. Format: `projects/{project\}/locations/{location\}/models/{model_id\}@{version_id\}`
         */
        model?: string | null;
    }
    /**
     * Detail description of the source information of the model.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1ModelSourceInfo {
        /**
         * If this Model is copy of another Model. If true then source_type pertains to the original.
         */
        copy?: boolean | null;
        /**
         * Type of the model source.
         */
        sourceType?: string | null;
    }
    /**
     * Runtime operation information for IndexEndpointService.MutateDeployedIndex.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1MutateDeployedIndexOperationMetadata {
        /**
         * The unique index id specified by user
         */
        deployedIndexId?: string | null;
        /**
         * The operation generic information.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Response message for IndexEndpointService.MutateDeployedIndex.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1MutateDeployedIndexResponse {
        /**
         * The DeployedIndex that had been updated in the IndexEndpoint.
         */
        deployedIndex?: Schema$GoogleCloudAiplatformV1beta1DeployedIndex;
    }
    /**
     * Runtime operation information for EndpointService.MutateDeployedModel.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1MutateDeployedModelOperationMetadata {
        /**
         * The operation generic information.
         */
        genericMetadata?: Schema$GoogleCloudAiplatformV1beta1GenericOperationMetadata;
    }
    /**
     * Request message for EndpointService.MutateDeployedModel.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1MutateDeployedModelRequest {
        /**
         * Required. The DeployedModel to be mutated within the Endpoint. Only the following fields can be mutated: * `min_replica_count` in either DedicatedResources or AutomaticResources * `max_replica_count` in either DedicatedResources or AutomaticResources * autoscaling_metric_specs * `disable_container_logging` (v1 only) * `enable_container_logging` (v1beta1 only)
         */
        deployedModel?: Schema$GoogleCloudAiplatformV1beta1DeployedModel;
        /**
         * Required. The update mask applies to the resource. See google.protobuf.FieldMask.
         */
        updateMask?: string | null;
    }
    /**
     * Response message for EndpointService.MutateDeployedModel.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1MutateDeployedModelResponse {
        /**
         * The DeployedModel that's being mutated.
         */
        deployedModel?: Schema$GoogleCloudAiplatformV1beta1DeployedModel;
    }
    /**
     * Represents a Neural Architecture Search (NAS) job.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NasJob {
        /**
         * Output only. Time when the NasJob was created.
         */
        createTime?: string | null;
        /**
         * Required. The display name of the NasJob. The name can be up to 128 characters long and can consist of any UTF-8 characters.
         */
        displayName?: string | null;
        /**
         * Optional. Enable a separation of Custom model training and restricted image training for tenant project.
         */
        enableRestrictedImageTraining?: boolean | null;
        /**
         * Customer-managed encryption key options for a NasJob. If this is set, then all resources created by the NasJob will be encrypted with the provided encryption key.
         */
        encryptionSpec?: Schema$GoogleCloudAiplatformV1beta1EncryptionSpec;
        /**
         * Output only. Time when the NasJob entered any of the following states: `JOB_STATE_SUCCEEDED`, `JOB_STATE_FAILED`, `JOB_STATE_CANCELLED`.
         */
        endTime?: string | null;
        /**
         * Output only. Only populated when job's state is JOB_STATE_FAILED or JOB_STATE_CANCELLED.
         */
        error?: Schema$GoogleRpcStatus;
        /**
         * The labels with user-defined metadata to organize NasJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Output only. Resource name of the NasJob.
         */
        name?: string | null;
        /**
         * Output only. Output of the NasJob.
         */
        nasJobOutput?: Schema$GoogleCloudAiplatformV1beta1NasJobOutput;
        /**
         * Required. The specification of a NasJob.
         */
        nasJobSpec?: Schema$GoogleCloudAiplatformV1beta1NasJobSpec;
        /**
         * Output only. Time when the NasJob for the first time entered the `JOB_STATE_RUNNING` state.
         */
        startTime?: string | null;
        /**
         * Output only. The detailed state of the job.
         */
        state?: string | null;
        /**
         * Output only. Time when the NasJob was most recently updated.
         */
        updateTime?: string | null;
    }
    /**
     * Represents a uCAIP NasJob output.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NasJobOutput {
        /**
         * Output only. The output of this multi-trial Neural Architecture Search (NAS) job.
         */
        multiTrialJobOutput?: Schema$GoogleCloudAiplatformV1beta1NasJobOutputMultiTrialJobOutput;
    }
    /**
     * The output of a multi-trial Neural Architecture Search (NAS) jobs.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NasJobOutputMultiTrialJobOutput {
        /**
         * Output only. List of NasTrials that were started as part of search stage.
         */
        searchTrials?: Schema$GoogleCloudAiplatformV1beta1NasTrial[];
        /**
         * Output only. List of NasTrials that were started as part of train stage.
         */
        trainTrials?: Schema$GoogleCloudAiplatformV1beta1NasTrial[];
    }
    /**
     * Represents the spec of a NasJob.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NasJobSpec {
        /**
         * The spec of multi-trial algorithms.
         */
        multiTrialAlgorithmSpec?: Schema$GoogleCloudAiplatformV1beta1NasJobSpecMultiTrialAlgorithmSpec;
        /**
         * The ID of the existing NasJob in the same Project and Location which will be used to resume search. search_space_spec and nas_algorithm_spec are obtained from previous NasJob hence should not provide them again for this NasJob.
         */
        resumeNasJobId?: string | null;
        /**
         * It defines the search space for Neural Architecture Search (NAS).
         */
        searchSpaceSpec?: string | null;
    }
    /**
     * The spec of multi-trial Neural Architecture Search (NAS).
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NasJobSpecMultiTrialAlgorithmSpec {
        /**
         * Metric specs for the NAS job. Validation for this field is done at `multi_trial_algorithm_spec` field.
         */
        metric?: Schema$GoogleCloudAiplatformV1beta1NasJobSpecMultiTrialAlgorithmSpecMetricSpec;
        /**
         * The multi-trial Neural Architecture Search (NAS) algorithm type. Defaults to `REINFORCEMENT_LEARNING`.
         */
        multiTrialAlgorithm?: string | null;
        /**
         * Required. Spec for search trials.
         */
        searchTrialSpec?: Schema$GoogleCloudAiplatformV1beta1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec;
        /**
         * Spec for train trials. Top N [TrainTrialSpec.max_parallel_trial_count] search trials will be trained for every M [TrainTrialSpec.frequency] trials searched.
         */
        trainTrialSpec?: Schema$GoogleCloudAiplatformV1beta1NasJobSpecMultiTrialAlgorithmSpecTrainTrialSpec;
    }
    /**
     * Represents a metric to optimize.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NasJobSpecMultiTrialAlgorithmSpecMetricSpec {
        /**
         * Required. The optimization goal of the metric.
         */
        goal?: string | null;
        /**
         * Required. The ID of the metric. Must not contain whitespaces.
         */
        metricId?: string | null;
    }
    /**
     * Represent spec for search trials.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec {
        /**
         * The number of failed trials that need to be seen before failing the NasJob. If set to 0, Vertex AI decides how many trials must fail before the whole job fails.
         */
        maxFailedTrialCount?: number | null;
        /**
         * Required. The maximum number of trials to run in parallel.
         */
        maxParallelTrialCount?: number | null;
        /**
         * Required. The maximum number of Neural Architecture Search (NAS) trials to run.
         */
        maxTrialCount?: number | null;
        /**
         * Required. The spec of a search trial job. The same spec applies to all search trials.
         */
        searchTrialJobSpec?: Schema$GoogleCloudAiplatformV1beta1CustomJobSpec;
    }
    /**
     * Represent spec for train trials.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NasJobSpecMultiTrialAlgorithmSpecTrainTrialSpec {
        /**
         * Required. Frequency of search trials to start train stage. Top N [TrainTrialSpec.max_parallel_trial_count] search trials will be trained for every M [TrainTrialSpec.frequency] trials searched.
         */
        frequency?: number | null;
        /**
         * Required. The maximum number of trials to run in parallel.
         */
        maxParallelTrialCount?: number | null;
        /**
         * Required. The spec of a train trial job. The same spec applies to all train trials.
         */
        trainTrialJobSpec?: Schema$GoogleCloudAiplatformV1beta1CustomJobSpec;
    }
    /**
     * Represents a uCAIP NasJob trial.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NasTrial {
        /**
         * Output only. Time when the NasTrial's status changed to `SUCCEEDED` or `INFEASIBLE`.
         */
        endTime?: string | null;
        /**
         * Output only. The final measurement containing the objective value.
         */
        finalMeasurement?: Schema$GoogleCloudAiplatformV1beta1Measurement;
        /**
         * Output only. The identifier of the NasTrial assigned by the service.
         */
        id?: string | null;
        /**
         * Output only. Time when the NasTrial was started.
         */
        startTime?: string | null;
        /**
         * Output only. The detailed state of the NasTrial.
         */
        state?: string | null;
    }
    /**
     * Represents a NasTrial details along with its parameters. If there is a corresponding train NasTrial, the train NasTrial is also returned.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NasTrialDetail {
        /**
         * Output only. Resource name of the NasTrialDetail.
         */
        name?: string | null;
        /**
         * The parameters for the NasJob NasTrial.
         */
        parameters?: string | null;
        /**
         * The requested search NasTrial.
         */
        searchTrial?: Schema$GoogleCloudAiplatformV1beta1NasTrial;
        /**
         * The train NasTrial corresponding to search_trial. Only populated if search_trial is used for training.
         */
        trainTrial?: Schema$GoogleCloudAiplatformV1beta1NasTrial;
    }
    /**
     * A query to find a number of similar entities.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NearestNeighborQuery {
        /**
         * Optional. The embedding vector that be used for similar search.
         */
        embedding?: Schema$GoogleCloudAiplatformV1beta1NearestNeighborQueryEmbedding;
        /**
         * Optional. The entity id whose similar entities should be searched for. If embedding is set, search will use embedding instead of entity_id.
         */
        entityId?: string | null;
        /**
         * Optional. The number of similar entities to be retrieved from feature view for each query.
         */
        neighborCount?: number | null;
        /**
         * Optional. Parameters that can be set to tune query on the fly.
         */
        parameters?: Schema$GoogleCloudAiplatformV1beta1NearestNeighborQueryParameters;
        /**
         * Optional. Crowding is a constraint on a neighbor list produced by nearest neighbor search requiring that no more than sper_crowding_attribute_neighbor_count of the k neighbors returned have the same value of crowding_attribute. It's used for improving result diversity.
         */
        perCrowdingAttributeNeighborCount?: number | null;
        /**
         * Optional. The list of string filters.
         */
        stringFilters?: Schema$GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter[];
    }
    /**
     * The embedding vector.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NearestNeighborQueryEmbedding {
        /**
         * Optional. Individual value in the embedding.
         */
        value?: number[] | null;
    }
    /**
     * Parameters that can be overrided in each query to tune query latency and recall.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NearestNeighborQueryParameters {
        /**
         * Optional. The number of neighbors to find via approximate search before exact reordering is performed; if set, this value must be \> neighbor_count.
         */
        approximateNeighborCandidates?: number | null;
        /**
         * Optional. The fraction of the number of leaves to search, set at query time allows user to tune search performance. This value increase result in both search accuracy and latency increase. The value should be between 0.0 and 1.0.
         */
        leafNodesSearchFraction?: number | null;
    }
    /**
     * String filter is used to search a subset of the entities by using boolean rules on string columns. For example: if a query specifies string filter with 'name = color, allow_tokens = {red, blue\}, deny_tokens = {purple\}',' then that query will match entities that are red or blue, but if those points are also purple, then they will be excluded even if they are red/blue. Only string filter is supported for now, numeric filter will be supported in the near future.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter {
        /**
         * Optional. The allowed tokens.
         */
        allowTokens?: string[] | null;
        /**
         * Optional. The denied tokens.
         */
        denyTokens?: string[] | null;
        /**
         * Required. Column names in BigQuery that used as filters.
         */
        name?: string | null;
    }
    /**
     * Nearest neighbors for one query.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NearestNeighbors {
        /**
         * All its neighbors.
         */
        neighbors?: Schema$GoogleCloudAiplatformV1beta1NearestNeighborsNeighbor[];
    }
    /**
     * Runtime operation metadata with regard to Matching Engine Index.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadata {
        /**
         * The validation stats of the content (per file) to be inserted or updated on the Matching Engine Index resource. Populated if contentsDeltaUri is provided as part of Index.metadata. Please note that, currently for those files that are broken or has unsupported file format, we will not have the stats for those files.
         */
        contentValidationStats?: Schema$GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataContentValidationStats[];
        /**
         * The ingested data size in bytes.
         */
        dataBytesCount?: string | null;
    }
    export interface Schema$GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataContentValidationStats {
        /**
         * Number of records in this file we skipped due to validate errors.
         */
        invalidRecordCount?: string | null;
        /**
         * The detail information of the partial failures encountered for those invalid records that couldn't be parsed. Up to 50 partial errors will be reported.
         */
        partialErrors?: Schema$GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError[];
        /**
         * Cloud Storage URI pointing to the original file in user's bucket.
         */
        sourceGcsUri?: string | null;
        /**
         * Number of records in this file that were successfully processed.
         */
        validRecordCount?: string | null;
    }
    export interface Schema$GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError {
        /**
         * Empty if the embedding id is failed to parse.
         */
        embeddingId?: string | null;
        /**
         * A human-readable message that is shown to the user to help them fix the error. Note that this message may change from time to time, your code should check against error_type as the source of truth.
         */
        errorMessage?: string | null;
        /**
         * The error type of this record.
         */
        errorType?: string | null;
        /**
         * The original content of this record.
         */
        rawRecord?: string | null;
        /**
         * Cloud Storage URI pointing to the original file in user's bucket.
         */
        sourceGcsUri?: string | null;
    }
    /**
     * A neighbor of the query vector.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NearestNeighborsNeighbor {
        /**
         * The distance between the neighbor and the query vector.
         */
        distance?: number | null;
        /**
         * The id of the similar entity.
         */
        entityId?: string | null;
        /**
         * The attributes of the neighbor, e.g. filters, crowding and metadata Note that full entities are returned only when "return_full_entity" is set to true. Otherwise, only the "entity_id" and "distance" fields are populated.
         */
        entityKeyValues?: Schema$GoogleCloudAiplatformV1beta1FetchFeatureValuesResponse;
    }
    /**
     * Neighbors for example-based explanations.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1Neighbor {
        /**
         * Output only. The neighbor distance.
         */
        neighborDistance?: number | null;
        /**
         * Output only. The neighbor id.
         */
        neighborId?: string | null;
    }
    /**
     * Network spec.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NetworkSpec {
        /**
         * Whether to enable public internet access. Default false.
         */
        enableInternetAccess?: boolean | null;
        /**
         * The full name of the Google Compute Engine [network](https://cloud.google.com//compute/docs/networks-and-firewalls#networks)
         */
        network?: string | null;
        /**
         * The name of the subnet that this instance is in. Format: `projects/{project_id_or_number\}/regions/{region\}/subnetworks/{subnetwork_id\}`
         */
        subnetwork?: string | null;
    }
    /**
     * Represents a mount configuration for Network File System (NFS) to mount.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NfsMount {
        /**
         * Required. Destination mount path. The NFS will be mounted for the user under /mnt/nfs/
         */
        mountPoint?: string | null;
        /**
         * Required. Source path exported from NFS server. Has to start with '/', and combined with the ip address, it indicates the source mount path in the form of `server:path`
         */
        path?: string | null;
        /**
         * Required. IP address of the NFS server.
         */
        server?: string | null;
    }
    /**
     * The euc configuration of NotebookRuntimeTemplate.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NotebookEucConfig {
        /**
         * Output only. Whether ActAs check is bypassed for service account attached to the VM. If false, we need ActAs check for the default Compute Engine Service account. When a Runtime is created, a VM is allocated using Default Compute Engine Service Account. Any user requesting to use this Runtime requires Service Account User (ActAs) permission over this SA. If true, Runtime owner is using EUC and does not require the above permission as VM no longer use default Compute Engine SA, but a P4SA.
         */
        bypassActasCheck?: boolean | null;
        /**
         * Input only. Whether EUC is disabled in this NotebookRuntimeTemplate. In proto3, the default value of a boolean is false. In this way, by default EUC will be enabled for NotebookRuntimeTemplate.
         */
        eucDisabled?: boolean | null;
    }
    /**
     * The idle shutdown configuration of NotebookRuntimeTemplate, which contains the idle_timeout as required field.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NotebookIdleShutdownConfig {
        /**
         * Whether Idle Shutdown is disabled in this NotebookRuntimeTemplate.
         */
        idleShutdownDisabled?: boolean | null;
        /**
         * Required. Duration is accurate to the second. In Notebook, Idle Timeout is accurate to minute so the range of idle_timeout (second) is: 10 * 60 ~ 1440 * 60.
         */
        idleTimeout?: string | null;
    }
    /**
     * Notebook Reservation Affinity for consuming Zonal reservation.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NotebookReservationAffinity {
        /**
         * Required. Specifies the type of reservation from which this instance can consume resources: RESERVATION_ANY (default), RESERVATION_SPECIFIC, or RESERVATION_NONE. See Consuming reserved instances for examples.
         */
        consumeReservationType?: string | null;
        /**
         * Optional. Corresponds to the label key of a reservation resource. To target a RESERVATION_SPECIFIC by name, use compute.googleapis.com/reservation-name as the key and specify the name of your reservation as its value.
         */
        key?: string | null;
        /**
         * Optional. Corresponds to the label values of a reservation resource. This must be the full path name of Reservation.
         */
        values?: string[] | null;
    }
    /**
     * A runtime is a virtual machine allocated to a particular user for a particular Notebook file on temporary basis with lifetime limited to 24 hours.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NotebookRuntime {
        /**
         * Output only. Timestamp when this NotebookRuntime was created.
         */
        createTime?: string | null;
        /**
         * The description of the NotebookRuntime.
         */
        description?: string | null;
        /**
         * Required. The display name of the NotebookRuntime. The name can be up to 128 characters long and can consist of any UTF-8 characters.
         */
        displayName?: string | null;
        /**
         * Output only. Timestamp when this NotebookRuntime will be expired: 1. System Predefined NotebookRuntime: 24 hours after creation. After expiration, system predifined runtime will be deleted. 2. User created NotebookRuntime: 6 months after last upgrade. After expiration, user created runtime will be stopped and allowed for upgrade.
         */
        expirationTime?: string | null;
        /**
         * Output only. The health state of the NotebookRuntime.
         */
        healthState?: string | null;
        /**
         * Output only. Whether NotebookRuntime is upgradable.
         */
        isUpgradable?: boolean | null;
        /**
         * The labels with user-defined metadata to organize your NotebookRuntime. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one NotebookRuntime (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable. Following system labels exist for NotebookRuntime: * "aiplatform.googleapis.com/notebook_runtime_gce_instance_id": output only, its value is the Compute Engine instance id. * "aiplatform.googleapis.com/colab_enterprise_entry_service": its value is either "bigquery" or "vertex"; if absent, it should be "vertex". This is to describe the entry service, either BigQuery or Vertex.
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Output only. The resource name of the NotebookRuntime.
         */
        name?: string | null;
        /**
         * Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/vpc/docs/add-remove-network-tags)).
         */
        networkTags?: string[] | null;
        /**
         * Output only. The pointer to NotebookRuntimeTemplate this NotebookRuntime is created from.
         */
        notebookRuntimeTemplateRef?: Schema$GoogleCloudAiplatformV1beta1NotebookRuntimeTemplateRef;
        /**
         * Output only. The type of the notebook runtime.
         */
        notebookRuntimeType?: string | null;
        /**
         * Output only. The proxy endpoint used to access the NotebookRuntime.
         */
        proxyUri?: string | null;
        /**
         * Output only. Reservation Affinity of the notebook runtime.
         */
        reservationAffinity?: Schema$GoogleCloudAiplatformV1beta1NotebookReservationAffinity;
        /**
         * Output only. The runtime (instance) state of the NotebookRuntime.
         */
        runtimeState?: string | null;
        /**
         * Required. The user email of the NotebookRuntime.
         */
        runtimeUser?: string | null;
        /**
         * Output only. The service account that the NotebookRuntime workload runs as.
         */
        serviceAccount?: string | null;
        /**
         * Output only. Timestamp when this NotebookRuntime was most recently updated.
         */
        updateTime?: string | null;
        /**
         * Output only. The VM os image version of NotebookRuntime.
         */
        version?: string | null;
    }
    /**
     * A template that specifies runtime configurations such as machine type, runtime version, network configurations, etc. Multiple runtimes can be created from a runtime template.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NotebookRuntimeTemplate {
        /**
         * Output only. Timestamp when this NotebookRuntimeTemplate was created.
         */
        createTime?: string | null;
        /**
         * Optional. The specification of persistent disk attached to the runtime as data disk storage.
         */
        dataPersistentDiskSpec?: Schema$GoogleCloudAiplatformV1beta1PersistentDiskSpec;
        /**
         * The description of the NotebookRuntimeTemplate.
         */
        description?: string | null;
        /**
         * Required. The display name of the NotebookRuntimeTemplate. The name can be up to 128 characters long and can consist of any UTF-8 characters.
         */
        displayName?: string | null;
        /**
         * Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
         */
        etag?: string | null;
        /**
         * EUC configuration of the NotebookRuntimeTemplate.
         */
        eucConfig?: Schema$GoogleCloudAiplatformV1beta1NotebookEucConfig;
        /**
         * The idle shutdown configuration of NotebookRuntimeTemplate. This config will only be set when idle shutdown is enabled.
         */
        idleShutdownConfig?: Schema$GoogleCloudAiplatformV1beta1NotebookIdleShutdownConfig;
        /**
         * Output only. The default template to use if not specified.
         */
        isDefault?: boolean | null;
        /**
         * The labels with user-defined metadata to organize the NotebookRuntimeTemplates. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Optional. Immutable. The specification of a single machine for the template.
         */
        machineSpec?: Schema$GoogleCloudAiplatformV1beta1MachineSpec;
        /**
         * Output only. The resource name of the NotebookRuntimeTemplate.
         */
        name?: string | null;
        /**
         * Optional. Network spec.
         */
        networkSpec?: Schema$GoogleCloudAiplatformV1beta1NetworkSpec;
        /**
         * Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/vpc/docs/add-remove-network-tags)).
         */
        networkTags?: string[] | null;
        /**
         * Optional. Immutable. The type of the notebook runtime template.
         */
        notebookRuntimeType?: string | null;
        /**
         * Optional. Reservation Affinity of the notebook runtime template.
         */
        reservationAffinity?: Schema$GoogleCloudAiplatformV1beta1NotebookReservationAffinity;
        /**
         * The service account that the runtime workload runs as. You can use any service account within the same project, but you must have the service account user permission to use the instance. If not specified, the [Compute Engine default service account](https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.
         */
        serviceAccount?: string | null;
        /**
         * Optional. Immutable. Runtime Shielded VM spec.
         */
        shieldedVmConfig?: Schema$GoogleCloudAiplatformV1beta1ShieldedVmConfig;
        /**
         * Output only. Timestamp when this NotebookRuntimeTemplate was most recently updated.
         */
        updateTime?: string | null;
    }
    /**
     * Points to a NotebookRuntimeTemplateRef.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1NotebookRuntimeTemplateRef {
        /**
         * Immutable. A resource name of the NotebookRuntimeTemplate.
         */
        notebookRuntimeTemplate?: string | null;
    }
    /**
     * A datatype containing media that is part of a multi-part `Content` message. A `Part` consists of data which has an associated datatype. A `Part` can only contain one of the accepted types in `Part.data`. A `Part` must have a fixed IANA MIME type identifying the type and subtype of the media if `inline_data` or `file_data` field is filled with raw bytes.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1Part {
        /**
         * Optional. URI based data.
         */
        fileData?: Schema$GoogleCloudAiplatformV1beta1FileData;
        /**
         * Optional. A predicted [FunctionCall] returned from the model that contains a string representing the [FunctionDeclaration.name] with the parameters and their values.
         */
        functionCall?: Schema$GoogleCloudAiplatformV1beta1FunctionCall;
        /**
         * Optional. The result output of a [FunctionCall] that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing any output from the function call. It is used as context to the model.
         */
        functionResponse?: Schema$GoogleCloudAiplatformV1beta1FunctionResponse;
        /**
         * Optional. Inlined bytes data.
         */
        inlineData?: Schema$GoogleCloudAiplatformV1beta1Blob;
        /**
         * Optional. Text part (can be code).
         */
        text?: string | null;
        /**
         * Optional. Video metadata. The metadata should only be specified while the video data is presented in inline_data or file_data.
         */
        videoMetadata?: Schema$GoogleCloudAiplatformV1beta1VideoMetadata;
    }
    /**
     * Request message for JobService.PauseModelDeploymentMonitoringJob.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1PauseModelDeploymentMonitoringJobRequest {
    }
    /**
     * Request message for ScheduleService.PauseSchedule.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1PauseScheduleRequest {
    }
    /**
     * Represents the spec of persistent disk options.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1PersistentDiskSpec {
        /**
         * Size in GB of the disk (default is 100GB).
         */
        diskSizeGb?: string | null;
        /**
         * Type of the disk (default is "pd-standard"). Valid values: "pd-ssd" (Persistent Disk Solid State Drive) "pd-standard" (Persistent Disk Hard Disk Drive) "pd-balanced" (Balanced Persistent Disk) "pd-extreme" (Extreme Persistent Disk)
         */
        diskType?: string | null;
    }
    /**
     * Represents long-lasting resources that are dedicated to users to runs custom workloads. A PersistentResource can have multiple node pools and each node pool can have its own machine spec.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1PersistentResource {
        /**
         * Output only. Time when the PersistentResource was created.
         */
        createTime?: string | null;
        /**
         * Optional. The display name of the PersistentResource. The name can be up to 128 characters long and can consist of any UTF-8 characters.
         */
        displayName?: string | null;
        /**
         * Optional. Customer-managed encryption key spec for a PersistentResource. If set, this PersistentResource and all sub-resources of this PersistentResource will be secured by this key.
         */
        encryptionSpec?: Schema$GoogleCloudAiplatformV1beta1EncryptionSpec;
        /**
         * Output only. Only populated when persistent resource's state is `STOPPING` or `ERROR`.
         */
        error?: Schema$GoogleRpcStatus;
        /**
         * Optional. The labels with user-defined metadata to organize PersistentResource. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Immutable. Resource name of a PersistentResource.
         */
        name?: string | null;
        /**
         * Optional. The full name of the Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to peered with Vertex AI to host the persistent resources. For example, `projects/12345/global/networks/myVPC`. [Format](/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project\}/global/networks/{network\}`. Where {project\} is a project number, as in `12345`, and {network\} is a network name. To specify this field, you must have already [configured VPC Network Peering for Vertex AI](https://cloud.google.com/vertex-ai/docs/general/vpc-peering). If this field is left unspecified, the resources aren't peered with any network.
         */
        network?: string | null;
        /**
         * Optional. A list of names for the reserved IP ranges under the VPC network that can be used for this persistent resource. If set, we will deploy the persistent resource within the provided IP ranges. Otherwise, the persistent resource is deployed to any IP ranges under the provided VPC network. Example: ['vertex-ai-ip-range'].
         */
        reservedIpRanges?: string[] | null;
        /**
         * Required. The spec of the pools of different resources.
         */
        resourcePools?: Schema$GoogleCloudAiplatformV1beta1ResourcePool[];
        /**
         * Output only. Runtime information of the Persistent Resource.
         */
        resourceRuntime?: Schema$GoogleCloudAiplatformV1beta1ResourceRuntime;
        /**
         * Optional. Persistent Resource runtime spec. For example, used for Ray cluster configuration.
         */
        resourceRuntimeSpec?: Schema$GoogleCloudAiplatformV1beta1ResourceRuntimeSpec;
        /**
         * Output only. Time when the PersistentResource for the first time entered the `RUNNING` state.
         */
        startTime?: string | null;
        /**
         * Output only. The detailed state of a Study.
         */
        state?: string | null;
        /**
         * Output only. Time when the PersistentResource was most recently updated.
         */
        updateTime?: string | null;
    }
    /**
     * An instance of a machine learning PipelineJob.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1PipelineJob {
        /**
         * Output only. Pipeline creation time.
         */
        createTime?: string | null;
        /**
         * The display name of the Pipeline. The name can be up to 128 characters long and can consist of any UTF-8 characters.
         */
        displayName?: string | null;
        /**
         * Customer-managed encryption key spec for a pipelineJob. If set, this PipelineJob and all of its sub-resources will be secured by this key.
         */
        encryptionSpec?: Schema$GoogleCloudAiplatformV1beta1EncryptionSpec;
        /**
         * Output only. Pipeline end time.
         */
        endTime?: string | null;
        /**
         * Output only. The error that occurred during pipeline execution. Only populated when the pipeline's state is FAILED or CANCELLED.
         */
        error?: Schema$GoogleRpcStatus;
        /**
         * Output only. The details of pipeline run. Not available in the list view.
         */
        jobDetail?: Schema$GoogleCloudAiplatformV1beta1PipelineJobDetail;
        /**
         * The labels with user-defined metadata to organize PipelineJob. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels. Note there is some reserved label key for Vertex AI Pipelines. - `vertex-ai-pipelines-run-billing-id`, user set value will get overrided.
         */
        labels?: {
            [key: string]: string;
        } | null;
        /**
         * Output only. The resource name of the PipelineJob.
         */
        name?: string | null;
        /**
         * The full name of the Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the Pipeline Job's workload should be peered. For example, `projects/12345/global/networks/myVPC`. [Format](/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project\}/global/networks/{network\}`. Where {project\} is a project number, as in `12345`, and {network\} is a network name. Private services access must already be configured for the network. Pipeline job will apply the network configuration to the Google Cloud resources being launched, if applied, such as Vertex AI Training or Dataflow job. If left unspecified, the workload is not peered with any network.
         */
        network?: string | null;
        /**
         * The spec of the pipeline.
         */
        pipelineSpec?: {
            [key: string]: any;
        } | null;
        /**
         * Optional. Whether to do component level validations before job creation.
         */
        preflightValidations?: boolean | null;
        /**
         * A list of names for the reserved ip ranges under the VPC network that can be used for this Pipeline Job's workload. If set, we will deploy the Pipeline Job's workload within the provided ip ranges. Otherwise, the job will be deployed to any ip ranges under the provided VPC network. Example: ['vertex-ai-ip-range'].
         */
        reservedIpRanges?: string[] | null;
        /**
         * Runtime config of the pipeline.
         */
        runtimeConfig?: Schema$GoogleCloudAiplatformV1beta1PipelineJobRuntimeConfig;
        /**
         * Output only. The schedule resource name. Only returned if the Pipeline is created by Schedule API.
         */
        scheduleName?: string | null;
        /**
         * The service account that the pipeline workload runs as. If not specified, the Compute Engine default service account in the project will be used. See https://cloud.google.com/compute/docs/access/service-accounts#default_service_account Users starting the pipeline must have the `iam.serviceAccounts.actAs` permission on this service account.
         */
        serviceAccount?: string | null;
        /**
         * Output only. Pipeline start time.
         */
        startTime?: string | null;
        /**
         * Output only. The detailed state of the job.
         */
        state?: string | null;
        /**
         * Output only. Pipeline template metadata. Will fill up fields if PipelineJob.template_uri is from supported template registry.
         */
        templateMetadata?: Schema$GoogleCloudAiplatformV1beta1PipelineTemplateMetadata;
        /**
         * A template uri from where the PipelineJob.pipeline_spec, if empty, will be downloaded. Currently, only uri from Vertex Template Registry & Gallery is supported. Reference to https://cloud.google.com/vertex-ai/docs/pipelines/create-pipeline-template.
         */
        templateUri?: string | null;
        /**
         * Output only. Timestamp when this PipelineJob was most recently updated.
         */
        updateTime?: string | null;
    }
    /**
     * The runtime detail of PipelineJob.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1PipelineJobDetail {
        /**
         * Output only. The context of the pipeline.
         */
        pipelineContext?: Schema$GoogleCloudAiplatformV1beta1Context;
        /**
         * Output only. The context of the current pipeline run.
         */
        pipelineRunContext?: Schema$GoogleCloudAiplatformV1beta1Context;
        /**
         * Output only. The runtime details of the tasks under the pipeline.
         */
        taskDetails?: Schema$GoogleCloudAiplatformV1beta1PipelineTaskDetail[];
    }
    /**
     * The runtime config of a PipelineJob.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1PipelineJobRuntimeConfig {
        /**
         * Represents the failure policy of a pipeline. Currently, the default of a pipeline is that the pipeline will continue to run until no more tasks can be executed, also known as PIPELINE_FAILURE_POLICY_FAIL_SLOW. However, if a pipeline is set to PIPELINE_FAILURE_POLICY_FAIL_FAST, it will stop scheduling any new tasks when a task has failed. Any scheduled tasks will continue to completion.
         */
        failurePolicy?: string | null;
        /**
         * Required. A path in a Cloud Storage bucket, which will be treated as the root output directory of the pipeline. It is used by the system to generate the paths of output artifacts. The artifact paths are generated with a sub-path pattern `{job_id\}/{task_id\}/{output_key\}` under the specified output directory. The service account specified in this pipeline must have the `storage.objects.get` and `storage.objects.create` permissions for this bucket.
         */
        gcsOutputDirectory?: string | null;
        /**
         * The runtime artifacts of the PipelineJob. The key will be the input artifact name and the value would be one of the InputArtifact.
         */
        inputArtifacts?: {
            [key: string]: Schema$GoogleCloudAiplatformV1beta1PipelineJobRuntimeConfigInputArtifact;
        } | null;
        /**
         * Deprecated. Use RuntimeConfig.parameter_values instead. The runtime parameters of the PipelineJob. The parameters will be passed into PipelineJob.pipeline_spec to replace the placeholders at runtime. This field is used by pipelines built using `PipelineJob.pipeline_spec.schema_version` 2.0.0 or lower, such as pipelines built using Kubeflow Pipelines SDK 1.8 or lower.
         */
        parameters?: {
            [key: string]: Schema$GoogleCloudAiplatformV1beta1Value;
        } | null;
        /**
         * The runtime parameters of the PipelineJob. The parameters will be passed into PipelineJob.pipeline_spec to replace the placeholders at runtime. This field is used by pipelines built using `PipelineJob.pipeline_spec.schema_version` 2.1.0, such as pipelines built using Kubeflow Pipelines SDK 1.9 or higher and the v2 DSL.
         */
        parameterValues?: {
            [key: string]: any;
        } | null;
    }
    /**
     * The type of an input artifact.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1PipelineJobRuntimeConfigInputArtifact {
        /**
         * Artifact resource id from MLMD. Which is the last portion of an artifact resource name: `projects/{project\}/locations/{location\}/metadataStores/default/artifacts/{artifact_id\}`. The artifact must stay within the same project, location and default metadatastore as the pipeline.
         */
        artifactId?: string | null;
    }
    /**
     * The runtime detail of a task execution.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1PipelineTaskDetail {
        /**
         * Output only. Task create time.
         */
        createTime?: string | null;
        /**
         * Output only. Task end time.
         */
        endTime?: string | null;
        /**
         * Output only. The error that occurred during task execution. Only populated when the task's state is FAILED or CANCELLED.
         */
        error?: Schema$GoogleRpcStatus;
        /**
         * Output only. The execution metadata of the task.
         */
        execution?: Schema$GoogleCloudAiplatformV1beta1Execution;
        /**
         * Output only. The detailed execution info.
         */
        executorDetail?: Schema$GoogleCloudAiplatformV1beta1PipelineTaskExecutorDetail;
        /**
         * Output only. The runtime input artifacts of the task.
         */
        inputs?: {
            [key: string]: Schema$GoogleCloudAiplatformV1beta1PipelineTaskDetailArtifactList;
        } | null;
        /**
         * Output only. The runtime output artifacts of the task.
         */
        outputs?: {
            [key: string]: Schema$GoogleCloudAiplatformV1beta1PipelineTaskDetailArtifactList;
        } | null;
        /**
         * Output only. The id of the parent task if the task is within a component scope. Empty if the task is at the root level.
         */
        parentTaskId?: string | null;
        /**
         * Output only. A list of task status. This field keeps a record of task status evolving over time.
         */
        pipelineTaskStatus?: Schema$GoogleCloudAiplatformV1beta1PipelineTaskDetailPipelineTaskStatus[];
        /**
         * Output only. Task start time.
         */
        startTime?: string | null;
        /**
         * Output only. State of the task.
         */
        state?: string | null;
        /**
         * Output only. The system generated ID of the task.
         */
        taskId?: string | null;
        /**
         * Output only. The user specified name of the task that is defined in pipeline_spec.
         */
        taskName?: string | null;
    }
    /**
     * A list of artifact metadata.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1PipelineTaskDetailArtifactList {
        /**
         * Output only. A list of artifact metadata.
         */
        artifacts?: Schema$GoogleCloudAiplatformV1beta1Artifact[];
    }
    /**
     * A single record of the task status.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1PipelineTaskDetailPipelineTaskStatus {
        /**
         * Output only. The error that occurred during the state. May be set when the state is any of the non-final state (PENDING/RUNNING/CANCELLING) or FAILED state. If the state is FAILED, the error here is final and not going to be retried. If the state is a non-final state, the error indicates a system-error being retried.
         */
        error?: Schema$GoogleRpcStatus;
        /**
         * Output only. The state of the task.
         */
        state?: string | null;
        /**
         * Output only. Update time of this status.
         */
        updateTime?: string | null;
    }
    /**
     * The runtime detail of a pipeline executor.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1PipelineTaskExecutorDetail {
        /**
         * Output only. The detailed info for a container executor.
         */
        containerDetail?: Schema$GoogleCloudAiplatformV1beta1PipelineTaskExecutorDetailContainerDetail;
        /**
         * Output only. The detailed info for a custom job executor.
         */
        customJobDetail?: Schema$GoogleCloudAiplatformV1beta1PipelineTaskExecutorDetailCustomJobDetail;
    }
    /**
     * The detail of a container execution. It contains the job names of the lifecycle of a container execution.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1PipelineTaskExecutorDetailContainerDetail {
        /**
         * Output only. The names of the previously failed CustomJob for the main container executions. The list includes the all attempts in chronological order.
         */
        failedMainJobs?: string[] | null;
        /**
         * Output only. The names of the previously failed CustomJob for the pre-caching-check container executions. This job will be available if the PipelineJob.pipeline_spec specifies the `pre_caching_check` hook in the lifecycle events. The list includes the all attempts in chronological order.
         */
        failedPreCachingCheckJobs?: string[] | null;
        /**
         * Output only. The name of the CustomJob for the main container execution.
         */
        mainJob?: string | null;
        /**
         * Output only. The name of the CustomJob for the pre-caching-check container execution. This job will be available if the PipelineJob.pipeline_spec specifies the `pre_caching_check` hook in the lifecycle events.
         */
        preCachingCheckJob?: string | null;
    }
    /**
     * The detailed info for a custom job executor.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1PipelineTaskExecutorDetailCustomJobDetail {
        /**
         * Output only. The names of the previously failed CustomJob. The list includes the all attempts in chronological order.
         */
        failedJobs?: string[] | null;
        /**
         * Output only. The name of the CustomJob.
         */
        job?: string | null;
    }
    /**
     * Pipeline template metadata if PipelineJob.template_uri is from supported template registry. Currently, the only supported registry is Artifact Registry.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1PipelineTemplateMetadata {
        /**
         * The version_name in artifact registry. Will always be presented in output if the PipelineJob.template_uri is from supported template registry. Format is "sha256:abcdef123456...".
         */
        version?: string | null;
    }
    /**
     * Represents a network port in a container.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1Port {
        /**
         * The number of the port to expose on the pod's IP address. Must be a valid port number, between 1 and 65535 inclusive.
         */
        containerPort?: number | null;
    }
    /**
     * Assigns input data to training, validation, and test sets based on the value of a provided key. Supported only for tabular Datasets.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1PredefinedSplit {
        /**
         * Required. The key is a name of one of the Dataset's data columns. The value of the key (either the label's value or value in the column) must be one of {`training`, `validation`, `test`\}, and it defines to which set the given piece of data is assigned. If for a piece of data the key is not present or has an invalid value, that piece is ignored by the pipeline.
         */
        key?: string | null;
    }
    /**
     * Request message for PredictionService.Predict.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1PredictRequest {
        /**
         * Required. The instances that are the input to the prediction call. A DeployedModel may have an upper limit on the number of instances it supports per request, and when it is exceeded the prediction call errors in case of AutoML Models, or, in case of customer created Models, the behaviour is as documented by that Model. The schema of any single instance may be specified via Endpoint's DeployedModels' Model's PredictSchemata's instance_schema_uri.
         */
        instances?: any[] | null;
        /**
         * The parameters that govern the prediction. The schema of the parameters may be specified via Endpoint's DeployedModels' Model's PredictSchemata's parameters_schema_uri.
         */
        parameters?: any | null;
    }
    /**
     * Configuration for logging request-response to a BigQuery table.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1PredictRequestResponseLoggingConfig {
        /**
         * BigQuery table for logging. If only given a project, a new dataset will be created with name `logging__` where will be made BigQuery-dataset-name compatible (e.g. most special characters will become underscores). If no table name is given, a new table will be created with name `request_response_logging`
         */
        bigqueryDestination?: Schema$GoogleCloudAiplatformV1beta1BigQueryDestination;
        /**
         * If logging is enabled or not.
         */
        enabled?: boolean | null;
        /**
         * Percentage of requests to be logged, expressed as a fraction in range(0,1].
         */
        samplingRate?: number | null;
    }
    /**
     * Response message for PredictionService.Predict.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1PredictResponse {
        /**
         * ID of the Endpoint's DeployedModel that served this prediction.
         */
        deployedModelId?: string | null;
        /**
         * Output only. Request-level metadata returned by the model. The metadata type will be dependent upon the model implementation.
         */
        metadata?: any | null;
        /**
         * Output only. The resource name of the Model which is deployed as the DeployedModel that this prediction hits.
         */
        model?: string | null;
        /**
         * Output only. The display name of the Model which is deployed as the DeployedModel that this prediction hits.
         */
        modelDisplayName?: string | null;
        /**
         * Output only. The version ID of the Model which is deployed as the DeployedModel that this prediction hits.
         */
        modelVersionId?: string | null;
        /**
         * The predictions that are the output of the predictions call. The schema of any single prediction may be specified via Endpoint's DeployedModels' Model's PredictSchemata's prediction_schema_uri.
         */
        predictions?: any[] | null;
    }
    /**
     * Contains the schemata used in Model's predictions and explanations via PredictionService.Predict, PredictionService.Explain and BatchPredictionJob.
     */
    export interface Schema$GoogleCloudAiplatformV1beta1PredictSchemata {
        /**
         * Immutable. Points to a YAML file stored on Google Cloud Storage describing the format of a single instance, which are used in PredictRequest.instances, ExplainRequest.instances and BatchPredictionJob.input_config. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). AutoML Models always have this field populated by Vertex AI. Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.
         */
        instanceSchemaUri?: string | null;
        /**
         * Immutable. Points to a YAML file stored on Google Cloud Storage describing the parameters of prediction and explanation via PredictRequest.parameters, ExplainRequest.parameters and BatchPredictionJob.model_parameters. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). AutoML Models always have this field populated by Vertex AI, if no parameters are supported, then it is set to an empty string. Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.
         */
        parametersSchemaUri?: string | null;
        /**
         * Immutable. Points to a YAML file stored on Google Cloud Storage describing the format of a single prediction produced by this Model, which are returned via PredictResponse.predictions, ExplainResponse.explanations, and BatchPredictionJob.output_config. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). AutoML Models always have this field populated by Vertex AI. Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.
         */
        predictionSchemaUri?: string | null;
    }
    /**
     * Preset configuration for example-based explanations
     */
    export interface Schema$GoogleCloudAiplatformV1beta1Presets {
        /**
         * The modality of the uploaded